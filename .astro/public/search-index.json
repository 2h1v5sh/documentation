{
  "index": [
    {
      "title": "README",
      "headings": [
        {
          "depth": 2,
          "slug": "using-directives",
          "text": "Using Directives"
        },
        {
          "depth": 3,
          "slug": "callouts",
          "text": "Callouts"
        },
        {
          "depth": 3,
          "slug": "solidity-remix",
          "text": "Solidity Remix"
        },
        {
          "depth": 3,
          "slug": "codetabs",
          "text": "Codetabs"
        }
      ],
      "url": "/README",
      "section": "gettingStarted",
      "description": "Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.",
      "content": "\n## Using Directives\n\nCustom markdown is written using directives. Theres two type of directives, `nodeDirectives` like the ones used in the callouts:\n\n```\n// usage\n:::directiveName[title]\ncontent\n:::\n\n//example\n:::tip[did you know?]\ntip\n:::\n```\n\nAnd `leafDirectives` like the ones used for solidityRemix examples\n\n```\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n```\n\n### Callouts\n\n:::tip[did you know?]\ntip\n:::\n\n:::danger[did you know?]\ndanger\n:::\n\n:::caution[did you know?]\ninfo\n:::\n\n:::note[did you know?]\nwarning\n:::\n\n```\n:::tip[did you know?]\ntip\n:::\n\n:::danger[did you know?]\ndanger\n:::\n\n:::caution[did you know?]\ninfo\n:::\n\n:::note[did you know?]\nwarning\n:::\n```\n\n### Solidity Remix\n\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n\n```\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n```\n\n### Codetabs\n\n````\n  ```shell Rinkeby\n  cd ~/.chainlink-rinkeby && docker run -p 6687:6688 -v ~/.chainlink-rinkeby:/chainlink -it --env-file=.env smartcontract/chainlink local n\n  ```\n  ```shell Kovan\n  cd ~/.chainlink-kovan && docker run -p 6687:6688 -v ~/.chainlink-kovan:/chainlink -it --env-file=.env smartcontract/chainlink local n\n  ```\n  ```shell Mainnet\n  cd ~/.chainlink && docker run -p 6687:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n\n  ```\n````\n\n```shell Rinkeby\ncd ~/.chainlink-rinkeby && docker run -p 6687:6688 -v ~/.chainlink-rinkeby:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\n```shell Kovan\ncd ~/.chainlink-kovan && docker run -p 6687:6688 -v ~/.chainlink-kovan:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run -p 6687:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n"
    },
    {
      "title": "ChainlinkClient API Reference",
      "headings": [
        {
          "depth": 2,
          "slug": "index",
          "text": "Index"
        },
        {
          "depth": 3,
          "slug": "methods",
          "text": "Methods"
        },
        {
          "depth": 3,
          "slug": "events",
          "text": "Events"
        },
        {
          "depth": 3,
          "slug": "modifiers",
          "text": "Modifiers"
        },
        {
          "depth": 3,
          "slug": "constants",
          "text": "Constants"
        },
        {
          "depth": 3,
          "slug": "structs",
          "text": "Structs"
        },
        {
          "depth": 2,
          "slug": "methods-1",
          "text": "Methods"
        },
        {
          "depth": 3,
          "slug": "setchainlinkoracle",
          "text": "setChainlinkOracle"
        },
        {
          "depth": 3,
          "slug": "setchainlinktoken",
          "text": "setChainlinkToken"
        },
        {
          "depth": 3,
          "slug": "buildchainlinkrequest",
          "text": "buildChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "buildoperatorrequest",
          "text": "buildOperatorRequest"
        },
        {
          "depth": 3,
          "slug": "sendchainlinkrequest",
          "text": "sendChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "sendchainlinkrequestto",
          "text": "sendChainlinkRequestTo"
        },
        {
          "depth": 3,
          "slug": "sendoperatorrequest",
          "text": "sendOperatorRequest"
        },
        {
          "depth": 3,
          "slug": "sendoperatorrequestto",
          "text": "sendOperatorRequestTo"
        },
        {
          "depth": 3,
          "slug": "validatechainlinkcallback",
          "text": "validateChainlinkCallback"
        },
        {
          "depth": 3,
          "slug": "addchainlinkexternalrequest",
          "text": "addChainlinkExternalRequest"
        },
        {
          "depth": 3,
          "slug": "cancelchainlinkrequest",
          "text": "cancelChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "usechainlinkwithens",
          "text": "useChainlinkWithENS"
        },
        {
          "depth": 3,
          "slug": "updatechainlinkoraclewithens",
          "text": "updateChainlinkOracleWithENS"
        },
        {
          "depth": 3,
          "slug": "chainlinktokenaddress",
          "text": "chainlinkTokenAddress"
        },
        {
          "depth": 3,
          "slug": "chainlinkoracleaddress",
          "text": "chainlinkOracleAddress"
        },
        {
          "depth": 2,
          "slug": "events-1",
          "text": "Events"
        },
        {
          "depth": 3,
          "slug": "chainlinkrequested",
          "text": "ChainlinkRequested"
        },
        {
          "depth": 3,
          "slug": "chainlinkfulfilled",
          "text": "ChainlinkFulfilled"
        },
        {
          "depth": 3,
          "slug": "chainlinkcancelled",
          "text": "ChainlinkCancelled"
        },
        {
          "depth": 2,
          "slug": "constants-1",
          "text": "Constants"
        },
        {
          "depth": 3,
          "slug": "link_divisibility",
          "text": "LINK_DIVISIBILITY"
        },
        {
          "depth": 2,
          "slug": "modifiers-1",
          "text": "Modifiers"
        },
        {
          "depth": 3,
          "slug": "recordchainlinkfulfillment",
          "text": "recordChainlinkFulfillment"
        },
        {
          "depth": 2,
          "slug": "chainlinkrequest",
          "text": "Chainlink.Request"
        },
        {
          "depth": 3,
          "slug": "attributes",
          "text": "Attributes"
        },
        {
          "depth": 3,
          "slug": "methods-2",
          "text": "Methods"
        },
        {
          "depth": 4,
          "slug": "add",
          "text": "add"
        },
        {
          "depth": 4,
          "slug": "addbytes",
          "text": "addBytes"
        },
        {
          "depth": 4,
          "slug": "addint",
          "text": "addInt"
        },
        {
          "depth": 4,
          "slug": "adduint",
          "text": "addUint"
        },
        {
          "depth": 4,
          "slug": "addstringarray",
          "text": "addStringArray"
        },
        {
          "depth": 4,
          "slug": "setbuffer",
          "text": "setBuffer"
        }
      ],
      "url": "/any-api/api-reference",
      "section": "ethereum",
      "content": "\r\n:::note[ API reference for `ChainlinkClient` [contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol).]\r\n\r\n`ChainlinkClient` contracts can communicate with legacy `Oracle` [contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.4/Oracle.sol) or `Operator` [contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n## Index\r\n\r\n### Methods\r\n\r\n| Name                                                          | Description                                                                                                                                                                                                                        |\r\n| :------------------------------------------------------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [setChainlinkOracle](#setchainlinkoracle)                     | Sets the stored address for the oracle contract                                                                                                                                                                                    |\r\n| [setChainlinkToken](#setchainlinktoken)                       | Sets the stored address for the LINK token                                                                                                                                                                                         |\r\n| [buildChainlinkRequest](#buildchainlinkrequest)               | Instantiates a Request object with the required parameters                                                                                                                                                                         |\r\n| [buildOperatorRequest](#buildoperatorrequest)                 | Instantiates a Request object with the required parameters. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol)                       |\r\n| [sendChainlinkRequest](#sendchainlinkrequest)                 | Sends the request payload to the stored address stored as chainlinkOracleAddress                                                                                                                                                   |\r\n| [sendChainlinkRequestTo](#sendchainlinkrequestto)             | Sends a request to the oracle address specified                                                                                                                                                                                    |\r\n| [sendOperatorRequest](#sendoperatorrequest)                   | Sends the request payload to the stored address stored as chainlinkOracleAddress. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) |\r\n| [sendOperatorRequestTo](#sendoperatorrequestto)               | Sends a request to the oracle address specified. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol)                                  |\r\n| [validateChainlinkCallback](#validatechainlinkcallback)       | Secures the fulfillment callback to make sure it is only called by permissioned senders                                                                                                                                            |\r\n| [addChainlinkExternalRequest](#addchainlinkexternalrequest)   | Allows a Chainlinked contract to track unfulfilled requests that it hasn't created itself                                                                                                                                          |\r\n| [cancelChainlinkRequest](#cancelchainlinkrequest)             | Cancels Chainlink requests attempting to contact an unresponsive node                                                                                                                                                              |\r\n| [useChainlinkWithENS](#usechainlinkwithens)                   | Looks up the addresses of the LINK token and Oracle contract through ENS                                                                                                                                                           |\r\n| [updateChainlinkOracleWithENS](#updatechainlinkoraclewithens) | Updates the stored oracle address with the latest address resolved through ENS                                                                                                                                                     |\r\n| [chainlinkTokenAddress](#chainlinktokenaddress)               | Returns the stored address of the LINK token                                                                                                                                                                                       |\r\n| [chainlinkOracleAddress](#chainlinkoracleaddress)             | Returns the stored address of the oracle contract                                                                                                                                                                                  |\r\n\r\n### Events\r\n\r\n| Name                                      | Description                                                                  |\r\n| :---------------------------------------- | ---------------------------------------------------------------------------- |\r\n| [ChainlinkRequested](#chainlinkrequested) | Emitted from a Chainlinked contract when a request is sent to an oracle      |\r\n| [ChainlinkFulfilled](#chainlinkfulfilled) | Emitted from a Chainlinked contract when a request is fulfilled by an oracle |\r\n| [ChainlinkCancelled](#chainlinkcancelled) | Emitted from a Chainlinked contract when a request is cancelled              |\r\n\r\n### Modifiers\r\n\r\n| Name                                                      | Description                                                                                                                                              |\r\n| :-------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [recordChainlinkFulfillment](#recordchainlinkfulfillment) | Used on fulfillment callbacks to ensure that the caller and requestId are valid. This is the modifier equivalent of the method validateChainlinkCallback |\r\n\r\n### Constants\r\n\r\n| Name                                    | Description                                                                       |\r\n| :-------------------------------------- | --------------------------------------------------------------------------------- |\r\n| [LINK_DIVISIBILITY](#link_divisibility) | Helper uint256 to represent the divisibility of a LINK token. Equivalent to 10^18 |\r\n\r\n### Structs\r\n\r\n| Name                                   | Description                                                          |\r\n| :------------------------------------- | -------------------------------------------------------------------- |\r\n| [Chainlink.Request](#chainlinkrequest) | All of the parameters that can be passed over in a Chainlink request |\r\n\r\n## Methods\r\n\r\nBelow you'll find each helper explained in greater detail alongside respective implementation examples to help you leverage these methods once you start building your own Chainlinked contract.\r\n\r\nAfter the function signature and a short description, two code examples are provided, one focusing on the exact usage of the method and one where the helper is presented in the context of a full contract.\r\n\r\n### setChainlinkOracle\r\n\r\n```solidity\r\nfunction setChainlinkOracle(\r\n  address _oracle\r\n)\r\n```\r\n\r\nSets a private storage variable provided for convenience if your contract only needs to talk to one oracle and you do not want to specify it on every request. Once an oracle is set with `setChainlinkOracle` that is the address used with [sendChainlinkRequest](#sendchainlinkrequest).\r\n\r\nRetrieve the oracle address using [chainlinkOracleAddress](#chainlinkoracleaddress). These getters and setters are provided to enforce that changes to the oracle are explicitly made in the code.\r\n\r\n```solidity example\r\nconstructor(address _oracle)\r\n{\r\n  setChainlinkOracle(_oracle);\r\n}\r\n```\r\n\r\n### setChainlinkToken\r\n\r\n```solidity example\r\nsetChainlinkToken(\r\n  address _link\r\n)\r\n```\r\n\r\nSets the stored address for the LINK token which is used to send requests to Oracles. There are different token addresses on different network. See [LINK Token Contracts](/docs/link-token-contracts/) for the address of the LINK token on the network you're deploying to.\r\n\r\n```solidity example\r\nconstructor(address _link)\r\n  public\r\n{\r\n  setChainlinkToken(_link);\r\n}\r\n```\r\n\r\n### buildChainlinkRequest\r\n\r\n:::note[ Use `buildOperatorRequest` [function](#buildoperatorrequest) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity example\r\nfunction buildChainlinkRequest(\r\n    bytes32 _jobId,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunctionSignature\r\n) returns (Chainlink.Request memory request)\r\n```\r\n\r\nInstantiates a Request from the Chainlink contract. A [Request](#chainlinkrequest) is a struct which contains the necessary parameters to be sent to the oracle contract. The `buildChainlinkRequest` function takes an ID, which can be a [Job ID](/docs/jobs/), a callback address to receive the resulting data, and a callback function signature to call on the callback address.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  bytes32 jobId = \"493610cff14346f786f88ed791ab7704\";\r\n  bytes4 selector = this.myCallback.selector;\r\n  // build a request that calls the myCallback function defined\r\n  //   below by specifying the address of this contract and the function\r\n  //   selector of the myCallback\r\n  Chainlink.Request memory request = buildChainlinkRequest(\r\n    jobId,\r\n    address(this),\r\n    selector);\r\n}\r\n```\r\n\r\n### buildOperatorRequest\r\n\r\n:::note[ This function is similar to `buildChainlinkRequest`[function](#buildchainlinkrequest). One major difference is that `buildOperatorRequest` does not allow setting up the address of the callback. The callback address is set to the address of the calling contract.]\r\nIt is recommended to use `buildOperatorRequest` but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity example\r\nfunction buildOperatorRequest(\r\n    bytes32 _jobId,\r\n    bytes4 _callbackFunctionSignature\r\n) returns (Chainlink.Request memory request)\r\n```\r\n\r\nInstantiates a _Request_ from the Chainlink contract. A [Request](#chainlinkrequest) is a struct that contains the necessary parameters to be sent to the oracle contract. The `buildOperatorRequest` function takes an ID, which can be a [Job ID](/docs/jobs/), and a callback function signature to call on the calling contract address.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  bytes32 jobId = \"493610cff14346f786f88ed791ab7704\";\r\n  bytes4 selector = this.myCallback.selector;\r\n  // build a request that calls the myCallback function defined\r\n  //   below by specifying the function selector of myCallback\r\n  Chainlink.Request memory request = buildOperatorRequest(\r\n    jobId,\r\n    selector);\r\n}\r\n```\r\n\r\n### sendChainlinkRequest\r\n\r\n:::note[ Use `sendOperatorRequest` [function](#sendoperatorrequest) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequest(\r\n    Chainlink.Request memory _req,\r\n    uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSends the request payload to the stored oracle address. It takes a [Chainlink.Request](#chainlinkrequest) and the amount of LINK to send amount as parameters. The request is serialized and calls `oracleRequest` on the address stored in `chainlinkOracleAddress` via the LINK token's `transferAndCall` method.\r\n\r\n`sendChainlinkRequest` returns the ID of the request. If your application needs to, your contract can store that ID, but you don't need to. The ChainlinkClient helpers will store the ID under the hood, along with the oracle address, and use them when you call `recordChainlinkFulfillment` in your callback function to make sure only that the address you want can call your Chainlink callback function.\r\n\r\n`sendChainlinkRequest` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID, if you would like to use it in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.callback.selector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY / 10; // Equivalent to 0.1 LINK\r\n\r\n  // send the request that you just built\r\n  sendChainlinkRequest(request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendChainlinkRequestTo\r\n\r\n:::note[ Use `sendOperatorRequestTo` [function](#sendoperatorrequestto) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequestTo(\r\n  address _oracle,\r\n  Chainlink.Request memory _req,\r\n  uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSimilar to [sendChainlinkRequest](#sendchainlinkrequest), `sendChainlinkRequestTo` sends a [Request](#chainlinkrequest) but allows the target oracle to be specified. It requires an address, a Request, and an amount, and returns the `requestId`. This allows a requesting contract to create and track requests sent to multiple oracle contract addresses.\r\n\r\n`sendChainlinkRequestTo` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID, if you would like to use it in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPriceFrom(address _oracle)\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.callback.callbackSelector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY; // = 1 LINK\r\n\r\n  // send the request that you just built to a specified oracle\r\n  sendChainlinkRequestTo(_oracle, request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendOperatorRequest\r\n\r\n:::note[ This function is similar to `sendChainlinkRequest`[function](#sendchainlinkrequest).]\r\nIt is recommended to use `sendOperatorRequest` but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendOperatorRequest(\r\n    Chainlink.Request memory _req,\r\n    uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nThe `sendOperatorRequest` function sends the request payload to the stored oracle address. It takes a [Chainlink.Request](#chainlinkrequest) and the amount of LINK to send amount as parameters. The request is serialized and calls `operatorRequest` on the address stored in `chainlinkOracleAddress` using the LINK token's `transferAndCall` method.\r\n\r\n`sendOperatorRequest` returns the ID of the request. Optionally, your contract can store the ID if your application needs it. The `ChainlinkClient` helpers store the ID and the oracle address and use them when you call `recordChainlinkFulfillment` in your callback function. This ensures that only the specified address can call your Chainlink callback function.\r\n\r\n`sendOperatorRequest` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID that you can use in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildOperatorRequest(jobId, this.callback.selector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY / 10; // Equivalent to 0.1 LINK\r\n\r\n  // send the request that you just built\r\n  sendOperatorRequest(request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendOperatorRequestTo\r\n\r\n:::note[ This function is similar to `sendChainlinkRequestTo`[function](#sendchainlinkrequestto).]\r\nIt is recommended to use `sendOperatorRequestTo`, but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequestTo(\r\n  address _oracle,\r\n  Chainlink.Request memory _req,\r\n  uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSimilar to [sendOperatorRequest](#sendoperatorrequest), `sendOperatorRequestTo` sends a [Request](#chainlinkrequest) but allows the target oracle to be specified. It requires an address, a Request, and an amount, and returns the `requestId`. This allows a requesting contract to create and track requests sent to multiple oracle contract addresses.\r\n\r\n`sendOperatorRequestTo` emits a [ChainlinkRequested](#chainlinkrequested) event containing a request ID that you can use in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPriceFrom(address _oracle)\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildOperatorRequest(jobId, this.callback.callbackSelector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY; // = 1 LINK\r\n\r\n  // send the request that you just built to a specified oracle\r\n  sendOperatorRequestTo(_oracle, request, paymentAmount);\r\n}\r\n```\r\n\r\n### validateChainlinkCallback\r\n\r\n```solidity\r\nfunction validateChainlinkCallback(\r\n    bytes32 _requestId\r\n)\r\n```\r\n\r\nUsed on fulfillment callbacks to ensure that the caller and `requestId` are valid. They protect ChainlinkClient callbacks from being called by malicious callers. `validateChainlinkCallback` allows for a request to be called\r\n\r\nThis is the method equivalent of the modifier `recordChainlinkFulfillment`. Either `validateChainlinkCallback` or `recordChainlinkFulfillment` should be used on all fulfillment functions to ensure that the caller and `requestId` are valid. Use the modifier or the method, not both.\r\n\r\n`validateChainlinkCallback` emits a [ChainlinkFulfilled](#chainlinkfulfilled) event.\r\n\r\n```solidity example\r\nfunction myCallback(bytes32 _requestId, uint256 _price)\r\n  public\r\n{\r\n  validateChainlinkCallback(_requestId);\r\n  currentPrice = _price;\r\n}\r\n```\r\n\r\n:::caution[ Do not call multiple times]\r\n\r\nDo not call `validateChainlinkCallback` multiple times. The nature of validating the callback is to ensure the response is only received once and not replayed. Calling a second time with the same method ID will trigger a revert. Similarly, your callback should validate using either `validateChainlinkCallback` or `recordChainlinkFulfillment`, not both.\r\n\r\n:::\r\n\r\n### addChainlinkExternalRequest\r\n\r\n```solidity\r\nfunction addChainlinkExternalRequest(\r\n  address _oracle,\r\n  bytes32 _requestId\r\n)\r\n```\r\n\r\n`addChainlinkExternalRequest` allows a Chainlink contract to track unfulfilled requests that it hasn't created itself. For example, contract A creates a request and sets the callback for contract B. Contract B needs to know about the request created by contract A so that it can validate the callback when it is executed.\r\n\r\n```solidity example\r\nfunction expectResponseFor(bytes32 _requestId)\r\n  public\r\n{\r\n  addChainlinkExternalRequest(chainlinkOracleAddress(), _requestId);\r\n}\r\n```\r\n\r\n:::caution[ Be careful adding external requests]\r\n\r\nBeing able to change a request means that you can change the data fed into a contract. Permissioning someone to make external requests can allow them to change the outcome of your contract. You should be sure to make sure that they are a trusted to do so. If they are not trusted to do so, you should put the request making logic on-chain where it is auditable and tamperproof.\r\n\r\n:::\r\n\r\n### cancelChainlinkRequest\r\n\r\n```solidity\r\nfunction cancelChainlinkRequest(bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunc,\r\n    uint256 _expiration\r\n)\r\n```\r\n\r\nIn case an oracle node does not respond, it may be necessary to retrieve the LINK used to pay for the unfulfilled request. The `cancelChainlinkRequest` will send the cancel request to the address used for the request, which transfers the amount of LINK back to the requesting contract, and delete it from the tracked requests.\r\n\r\nThe default expiration for a request is five minutes, after which it can be cancelled. The cancellation must be sent by the address which was specified as the callback location of the contract.\r\n\r\nFor the sake of efficient gas usage, only a hash of the request's parameters are stored on-chain. In order to validate the terms of the request and that it can be calculated, the request parameters must be provided. Additionally, cancellation must be called by the address which the callback would otherwise have been called on.\r\n\r\n`cancelChainlinkRequest` emits a [ChainlinkCancelled](#chainlinkcancelled) event.\r\n\r\n```solidity example\r\nfunction cancelRequest(\r\n    bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunc,\r\n    uint256 _expiration\r\n) public {\r\n  cancelChainlinkRequest(_requestId, _payment, _callbackFunc, _expiration);\r\n}\r\n```\r\n\r\n### useChainlinkWithENS\r\n\r\n```solidity\r\nfunction useChainlinkWithENS(\r\n  address _ens,\r\n  bytes32 _node\r\n)\r\n```\r\n\r\nAllows a Chainlink contract to store the addresses of the LINK token and oracle contract addresses without supplying the addresses themselves. We use ENS where available to resolve these addresses. It requires the address of the ENS contract and the node (which is a hash) for the domain.\r\n\r\nIf your Oracle provider supports using ENS for rolling upgrades to their oracle contract, once you've pointed your Chainlinked contract to the ENS records then you can update the records using [updateChainlinkOracleWithENS](#updatechainlinkoraclewithens).\r\n\r\n```solidity example\r\naddress constant ROPSTEN_ENS = 0x112234455C3a32FD11230C42E7Bccd4A84e02010;\r\nbytes32 constant ROPSTEN_CHAINLINK_ENS = 0xead9c0180f6d685e43522fcfe277c2f0465fe930fb32b5b415826eacf9803727;\r\n\r\nconstructor(){\r\n  useChainlinkWithENS(ROPSTEN_ENS, ROPSTEN_CHAINLINK_ENS);\r\n}\r\n```\r\n\r\n:::caution[ Updating oracle addresses]\r\n\r\nIf an oracle provider supports listing their oracle on ENS, that provides the added security of being able to update any issues that may arise. The tradeoff here is that by using their ENS record, you are allowing whoever controls that record and the corresponding code it points to. If your contract does this, you must either audit the updated code and make sure it matches [Oracle.sol](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/Oracle.sol) or trust whoever can update the records.\r\n\r\n:::\r\n\r\n### updateChainlinkOracleWithENS\r\n\r\n```solidity\r\nfunction updateChainlinkOracleWithENS()\r\n```\r\n\r\nUpdates the stored oracle contract address with the latest address resolved through the ENS contract. This requires the oracle provider to support listing their address on ENS.\r\n\r\nThis method only works after [useChainlinkWithENS](#usechainlinkwithens) has been called on the contract.\r\n\r\n```solidity example\r\nfunction updateOracleAddressToLatest() public {\r\n  updateChainlinkOracleWithENS();\r\n}\r\n```\r\n\r\n:::caution[ Updating oracle addresses]\r\n\r\nIf an oracle provider supports listing their oracle on ENS, that provides the added security of being able to update any issues that may arise. The tradeoff here is that by using their ENS record, you are allowing whoever controls that record and the corresponding code it points to. If your contract does this, you must either audit the updated code and make sure it matches [Oracle.sol](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.4/Oracle.sol) or trust whoever can update the records.\r\n\r\n:::\r\n\r\n### chainlinkTokenAddress\r\n\r\n```solidity\r\nfunction chainlinkTokenAddress() returns (address)\r\n```\r\n\r\nThe `chainlinkTokenAddress` function is a helper used to return the stored address of the Chainlink token. This variable is protected and so only made available through getters and setters.\r\n\r\n```solidity example\r\nfunction withdrawLink() public {\r\n  LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\r\n\r\n  require(link.transfer(msg.sender, link.balanceOf(address(this))), \"Unable to transfer\");\r\n}\r\n```\r\n\r\n### chainlinkOracleAddress\r\n\r\nThe `chainlinkOracleAddress` function is a helper used to return the stored address of the oracle contract.\r\n\r\n```solidity example\r\nfunction getOracle() public view returns (address) {\r\n  return chainlinkOracleAddress();\r\n}\r\n\r\n```\r\n\r\n## Events\r\n\r\n### ChainlinkRequested\r\n\r\n```solidity\r\nevent ChainlinkRequested(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [sendChainlinkRequest](#sendchainlinkrequest) and [sendChainlinkRequestTo](#sendchainlinkrequestto) are called. Includes the request ID as an event topic.\r\n\r\n### ChainlinkFulfilled\r\n\r\n```solidity\r\nevent ChainlinkFulfilled(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [validateChainlinkCallback](#validatechainlinkcallback) or [recordChainlinkFulfillment](#recordchainlinkfulfillment) are called. Includes the request ID as an event topic.\r\n\r\n### ChainlinkCancelled\r\n\r\n```solidity\r\nevent ChainlinkCancelled(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [cancelChainlinkRequest](#cancelchainlinkrequest) is called. Includes the request ID as an event topic.\r\n\r\n## Constants\r\n\r\n### LINK_DIVISIBILITY\r\n\r\n`LINK_DIVISIBILITY` is a uint256 constant to represent one whole unit of the LINK token (1000000000000000000). It can be used with another value to specify payment in an easy-to-read format, instead of hardcoding magic numbers.\r\n\r\n```solidity example\r\nuint256 constant private ORACLE_PAYMENT = 100 * LINK_DIVISIBILITY; // = 100 LINK\r\n```\r\n\r\n## Modifiers\r\n\r\n### recordChainlinkFulfillment\r\n\r\n`recordChainlinkFulfillment` is used on fulfillment callbacks to ensure that the caller and `requestId` are valid. This is the method equivalent of the method `validateChainlinkCallback`.\r\n\r\nEither `validateChainlinkCallback` or `recordChainlinkFulfillment` should be used on all Chainlink callback functions to ensure that the sender and `requestId` are valid. They protect ChainlinkClient callbacks from being called by malicious callers. Do not call both of them, or your callback may revert before you can record the reported response.\r\n\r\n```solidity example\r\nfunction myCallback(bytes32 _requestId, uint256 _price)\r\n  public\r\n  recordChainlinkFulfillment(_requestId) // always validate callbacks\r\n{\r\n  currentPrice = _price;\r\n}\r\n```\r\n\r\n## Chainlink.Request\r\n\r\n```solidity\r\nlibrary Chainlink {\r\n  struct Request {\r\n    bytes32 id;\r\n    address callbackAddress;\r\n    bytes4 callbackFunctionId;\r\n    uint256 nonce;\r\n    Buffer.buffer buf;\r\n  }\r\n}\r\n```\r\n\r\nThe Chainlink Request struct encapsulates all of the fields needed for a Chainlink request and its corresponding response callback.\r\n\r\nThe Chainlink protocol aims to be flexible and not restrict application developers. The Solidity Chainlink Request model is a great example of that. It is exceptionally flexible, given the limitations of Solidity. The request can contain an arbitrary amount of keys and values to be passed off-chain to the oracles for each request. It does so by converting the parameters into CBOR, and then storing them in a buffer. This allows for any number of parameters all of different types to be encoded on-chain.\r\n\r\nThe request's ID is generated by hashing the sender's address and the request's nonce. This scheme ensures that only the requester can generate their request ID, and no other contract can trigger a response from an oracle with that ID. New requests whose IDs match an unfulfilled request ID will not be accepted by the oracle.\r\n\r\n:::caution[ Intended for memory]\r\n\r\nThe Request object was intended to be stored in memory. If you have a reason to persist the struct in storage, it is recommended that you do so by copying each attribute over and explicitly copying the bytes in the buffer.\r\n\r\n:::\r\n\r\n### Attributes\r\n\r\n| Name               | Description                                                                                             |\r\n| ------------------ | :------------------------------------------------------------------------------------------------------ |\r\n| id                 | Identifier for the request                                                                              |\r\n| callbackAddress    | Address that the response will be sent to upon fulfillment                                              |\r\n| callbackFunctionId | Selector of the function on the callbackAddress that will be invoked with the response upon fulfillment |\r\n| nonce              | Used to generate the request ID                                                                         |\r\n| buf                | Buffer that stores additional user defined parameters as CBOR                                           |\r\n\r\n### Methods\r\n\r\n| Name                              | Description                                                      |\r\n| :-------------------------------- | ---------------------------------------------------------------- |\r\n| [add](#add)                       | Add a string value to the run request parameters                 |\r\n| [addBytes](#addbytes)             | Add a bytes value to the run request parameters                  |\r\n| [addInt](#addint)                 | Add an integer value to the run request parameters               |\r\n| [addUint](#adduint)               | Add an unsigned integer to the run request parameters            |\r\n| [addStringArray](#addstringarray) | Add an array of strings as a value in the run request parameters |\r\n| [setBuffer](#setbuffer)           | Directly set the CBOR of the run request parameters              |\r\n\r\n#### add\r\n\r\n```solidity\r\nfunction add(\r\n  Request memory self,\r\n  string _key,\r\n  string _value\r\n)\r\n```\r\n\r\nAdd a string value to the run request parameters. Commonly used for `get` with jobs using `httpGet` tasks.\r\n\r\n```solidity example\r\nfunction requestEthereumPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.add(\"get\", \"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD,EUR,JPY\");\r\n\r\n  sendChainlinkRequest(req, 1 * LINK_DIVISIBILITY); // =1 LINK\r\n}\r\n```\r\n\r\n#### addBytes\r\n\r\n```solidity\r\nfunction addBytes(\r\n  Request memory self,\r\n  string _key,\r\n  bytes _value\r\n)\r\n```\r\n\r\nAdd a CBOR bytes type value to the run request parameters.\r\n\r\n```solidity example\r\nfunction requestEmojiPopularity(bytes _unicode)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addBytes(\"emojiUnicode\", _unicode);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\nNote that this can also be used as a workaround to pass other data types like arrays or addresses. For instance, to add an _address_, one would first encode it using `abi.encode` then pass the result to `addBytes`:\r\n\r\n```solidity\r\nChainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\nreq.addBytes(\"address\", abi.encode(msg.sender)); // msg.sender used in this example. Replace it with your address\r\n\r\n```\r\n\r\n#### addInt\r\n\r\n```solidity\r\nfunction addInt(\r\n  Request memory self,\r\n  string _key,\r\n  int256 _value\r\n)\r\n```\r\n\r\nAdd a CBOR signed integer type value to the run request parameters. Commonly used with the `times` parameter of any job using a `multiply` task.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addInt(\"times\", 100);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\n#### addUint\r\n\r\n```solidity\r\nfunction addUint(\r\n  Request memory self,\r\n  string _key,\r\n  uint256 _value\r\n)\r\n```\r\n\r\nAdd a CBOR unsigned integer type value to the run request parameters. Commonly used with the `times` parameter of any job using a `multiply` task.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addUint(\"times\", 100);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\n#### addStringArray\r\n\r\n```solidity\r\nfunction addStringArray(\r\n  Request memory self,\r\n  string _key,\r\n  string[] memory _values\r\n)\r\n```\r\n\r\nAdd a CBOR array of strings to the run request parameters. Commonly used with the `path` parameter for any job including a `jsonParse` task.\r\n\r\n```solidity example\r\nfunction requestPrice(string _currency)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(JOB_ID, this, this.myCallback.selector);\r\n  string[] memory path = new string[](2);\r\n  path[0] = _currency;\r\n  path[1] = \"recent\";\r\n\r\n  // specify templated fields in a job specification\r\n  req.addStringArray(\"path\", path);\r\n\r\n  sendChainlinkRequest(req, PAYMENT);\r\n}\r\n```\r\n\r\n#### setBuffer\r\n\r\n```solidity\r\nfunction setBuffer(\r\n  Request memory self,\r\n  bytes _data\r\n)\r\n```\r\n\r\nSet the CBOR payload directly on the request object, avoiding the cost of encoding the parameters in CBOR. This can be helpful when reading the bytes from storage or having them passed in from off-chain where they were pre-encoded.\r\n\r\n```solidity example\r\nfunction requestPrice(bytes _cbor)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(JOB_ID, this, this.myCallback.selector);\r\n\r\n  req.setBuffer(_cbor);\r\n\r\n  sendChainlinkRequest(req, PAYMENT);\r\n}\r\n```\r\n\r\n:::caution[ Be careful setting the request buffer directly]\r\n\r\nMoving the CBOR encoding logic off-chain can save some gas, but it also opens up the opportunity for people to encode parameters that not all parties agreed to. Be sure that whoever is permissioned to call `setBuffer` is trusted or auditable.\r\n\r\n:::\r\n"
    },
    {
      "title": "DNS Ownership Oracle",
      "headings": [
        {
          "depth": 2,
          "slug": "requirements",
          "text": "Requirements"
        },
        {
          "depth": 2,
          "slug": "dns-ownership-contract",
          "text": "DNS Ownership Contract"
        },
        {
          "depth": 2,
          "slug": "network-details",
          "text": "Network Details"
        },
        {
          "depth": 4,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 4,
          "slug": "ethereum-kovan-testnet",
          "text": "Ethereum Kovan Testnet"
        },
        {
          "depth": 4,
          "slug": "bnb-chain-mainnet",
          "text": "BNB Chain Mainnet"
        },
        {
          "depth": 4,
          "slug": "polygon-matic-mainnet",
          "text": "Polygon (Matic) Mainnet"
        },
        {
          "depth": 2,
          "slug": "job",
          "text": "Job"
        }
      ],
      "url": "/any-api/data-providers/dns-ownership",
      "section": "ethereum",
      "content": "\r\nThis oracle checks Google’s DNS service to determine if a given domain is owned by a given blockchain address. Each address is stored in a _TXT record_.\r\nThis guide explains how to call the _DNS ownership oracle_ and verify that a given address owns a specific domain. For instance, we will confirm that the address _0xf75519f611776c22275474151a04183665b7feDe_ owns _www5.infernos.io_. **Note** that the source of data is [google dns](https://dns.google/resolve?name=www5.infernos.io&type=TXT).\r\n\r\n## Requirements\r\n\r\nThis guide assumes that you know how to create and deploy smart contracts on the Kovan Testnet using the following tools:\r\n\r\n- [The Remix IDE](https://remix.ethereum.org/)\r\n- [MetaMask](https://metamask.io/)\r\n- [Kovan Link tokens](/docs/link-token-contracts/#kovan-testnet-deprecated)\r\n\r\nYou should be familiar with the [Chainlink Basic Request Model](/docs/architecture-request-model/). If you are new to developing smart contracts on Ethereum, see the [Getting Started](/docs/conceptual-overview/) guide to learn the basics.\r\n\r\n## DNS Ownership Contract\r\n\r\nThis example operates using the following steps:\r\n\r\n1. When you deploy the contract, the `constructor()` initializes the address of `oracle`, the `jobId`, and the fees `oraclePayment`. The code example is configured for the _Kovan testnet_. Check the [Network Details section](#network-details) for other networks.\r\n1. Fund the contract with LINK tokens. Each request requires 0.1 LINK.\r\n1. Run the `requestProof()` function to check that an address owns a domain name. For this example, you can use `www5.infernos.io` for the `_name` and `0xf75519f611776c22275474151a04183665b7feDe` for the `_record`. Notice how these parameters are used to build the Chainlink request. The selector of the `fulfill()` function is also passed so that the oracle knows which function to call back with the `proof`.\r\n1. After few seconds, check the value of `proof`. It should return `true`.\r\n\r\n::solidity-remix[samples/DataProviders/DnsOwnership.sol]\r\n\r\n## Network Details\r\n\r\nThe [DNS Ownership Contract example](#dns-ownership-contract) works on the _Kovan Testnet_. Below are the configuration for other chains.\r\n\r\n#### Ethereum Mainnet\r\n\r\nPayment Amount: 2 LINK  \r\nLINK Token Address: `{{variables.MAINNET_LINK_TOKEN}}`\r\nOracle Address: `0x240BaE5A27233Fd3aC5440B5a598467725F7D1cd`  \r\nJobID: `6ca2e68622bd421d98c648f056ee7c76`\r\n\r\n#### Ethereum Kovan Testnet\r\n\r\nPayment Amount: 0.1 LINK  \r\nLINK Token Address: `{{variables.KOVAN_LINK_TOKEN}}`\r\nOracle Address: `0xff07c97631ff3bab5e5e5660cdf47aded8d4d4fd`  \r\nJobID: `791bd73c8a1349859f09b1cb87304f71`\r\n\r\n#### BNB Chain Mainnet\r\n\r\nPayment Amount: 0.1 LINK  \r\nLINK Token address:`{{variables.BINANCE_MAINNET_LINK_TOKEN}}`\r\nOracle Address: `0x63B72AF260E8b40A7b89E238FeB53448A97b03D2`  \r\nJobID: `fb06afd5a9df4e6cb156f6b797b63a24`\r\n\r\n#### Polygon (Matic) Mainnet\r\n\r\nPayment Amount: 0.1 LINK  \r\nLINK Token Address: `{{variables.MATIC_MAINNET_LINK_TOKEN}}`\r\nOracle Address: `0x63B72AF260E8b40A7b89E238FeB53448A97b03D2`  \r\nJobID: `f3daed2990114e98906aaf21c4172da3`\r\n\r\n## Job\r\n\r\nThe _DNS Ownership_ node uses a [Chainlink v2 direct-request job](/docs/jobs/types/direct-request/). It is composed by the following taks:\r\n\r\n- [ETH ABI Decode Log](/docs/jobs/task-types/eth-abi-decode-log/)\r\n- [CBOR Parse](/docs/jobs/task-types/cborparse/)\r\n- [DNS Proof external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/dns-query#dns-proof-endpoint)\r\n- [JSON Parse](/docs/jobs/task-types/jsonparse/)\r\n- [ETH ABI Encode](/docs/jobs/task-types/eth-abi-encode/)\r\n- [EthTx](/docs/jobs/task-types/eth-tx/)\r\n\r\n```jpv2\r\ntype = \"directrequest\"\r\nschemaVersion = 1\r\ncontractAddress = \"0x0000000000000000000000000000000000000000\"\r\nmaxTaskDuration = \"0s\"\r\nobservationSource = \"\"\"\r\n    decode_log          [type=ethabidecodelog\r\n                         abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\r\n                         data=\"$(jobRun.logData)\"\r\n                         topics=\"$(jobRun.logTopics)\"]\r\n\r\n    decode_cbor         [type=cborparse data=\"$(decode_log.data)\"]\r\n\r\n    dnsproof            [type=bridge\r\n                         name=\"dnsproof\"\r\n                         requestData=\"{\\\\\"data\\\\\": {\\\\\"endpoint\\\\\": \\\\\"dnsProof\\\\\", \\\\\"name\\\\\": $(decode_cbor.name), \\\\\"record\\\\\": $(decode_cbor.record)}}\"]\r\n\r\n\r\n    result_parse        [type=jsonparse data=\"$(dnsproof)\" path=\"result\"]\r\n\r\n    encode_data         [type=ethabiencode\r\n                         abi=\"(bool _result)\"\r\n                         data=\"{\\\\\"_requestId\\\\\": $(decode_log.requestId),\\\\\"_result\\\\\": $(result_parse)}\"]\r\n\r\n    encode_tx           [type=ethabiencode\r\n                         abi=\"fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)\"\r\n                         data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId),\\\\\"payment\\\\\": $(decode_log.payment),\\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr),\\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId),\\\\\"expiration\\\\\": $(decode_log.cancelExpiration),\\\\\"data\\\\\": $(encode_data)}\"]\r\n\r\n    submit_tx           [type=ethtx to=\"0x0000000000000000000000000000000000000000\" data=\"$(encode_tx)\" minConfirmations=\"2\"]\r\n\r\n    decode_log -> decode_cbor -> dnsproof -> result_parse -> encode_data -> encode_tx -> submit_tx\r\n\"\"\"\r\n```\r\n"
    },
    {
      "title": "Finage Global Market Data Oracle",
      "headings": [
        {
          "depth": 2,
          "slug": "steps-for-using-this-oracle",
          "text": "Steps For Using This Oracle"
        },
        {
          "depth": 2,
          "slug": "network-details",
          "text": "Network Details"
        },
        {
          "depth": 4,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 4,
          "slug": "ethereum-kovan-testnet",
          "text": "Ethereum Kovan Testnet"
        },
        {
          "depth": 4,
          "slug": "bnb-chain-mainnet",
          "text": "BNB Chain Mainnet"
        },
        {
          "depth": 2,
          "slug": "create-your-contract",
          "text": "Create Your Contract"
        },
        {
          "depth": 1,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 1,
          "slug": "request-parameters",
          "text": "Request Parameters"
        },
        {
          "depth": 3,
          "slug": "symbol",
          "text": "symbol"
        },
        {
          "depth": 4,
          "slug": "solidity-example",
          "text": "Solidity Example"
        },
        {
          "depth": 1,
          "slug": "chainlink-examples",
          "text": "Chainlink Examples"
        },
        {
          "depth": 3,
          "slug": "requestdata-function",
          "text": "requestData function"
        },
        {
          "depth": 3,
          "slug": "fulfill-function",
          "text": "fulfill function"
        },
        {
          "depth": 2,
          "slug": "documentation-and-support",
          "text": "Documentation and Support"
        }
      ],
      "url": "/any-api/data-providers/finage-global-market-data",
      "section": "ethereum",
      "content": "\r\nFinage is a leading real-time stock, forex, and cryptocurrency data provider. They offer market data for 60,000+ securities, and a broad selection of data such as financial statements, Ownership, News Sentiments, Earning Call Transcripts and Mergers and Acquisitions. This oracle will initially provide a given stock’s performance relative to its sector’s performance.\r\n\r\n## Steps For Using This Oracle\r\n\r\n- Write and deploy your contract using the network details below\r\n- Fund it with [LINK](/docs/link-token-contracts/)\r\n- Call your [request method](./#chainlink-examples)\r\n\r\n## Network Details\r\n\r\n#### Ethereum Mainnet\r\n\r\nPayment Amount: 1 LINK  \r\nLINK Token Address: `{{variables.MAINNET_LINK_TOKEN}}`\r\nOracle Address: `0xE98dFc0C36408b54326Fa11235D573574B1e8eC3`  \r\nJobID: `3e478404a3ca4cf5abd2820efe7c1913`\r\n\r\n#### Ethereum Kovan Testnet\r\n\r\nPayment Amount: 0.1 LINK\r\nLINK Token Address: `{{variables.KOVAN_LINK_TOKEN}}`\r\nOracle Address: `0x56dd6586DB0D08c6Ce7B2f2805af28616E082455`\r\nJobID: `955810d193e144abb85ae2edea65344d`\r\n\r\n#### BNB Chain Mainnet\r\n\r\nPayment Amount: 0.1 LINK\r\nLINK Token address:`{{variables.BINANCE_MAINNET_LINK_TOKEN}}`\r\nOracle Address: `0xa80bEAEBf1955D8AA9B5f741388e5A43Ba309935`\r\nJobID: `55d23024c541439ca28b456044d01304`\r\n\r\n## Create Your Contract\r\n\r\nImport `ChainlinkClient.sol` into your contract so you can inherit the Chainlink behavior.\r\n\r\n```solidity Solidity 4\r\npragma solidity ^0.4.24;\r\n\r\nimport \"@chainlink/contracts/v0.4/ChainlinkClient.sol\";\r\n\r\ncontract FinageChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    setChainlinkToken(0xa36085F69e2889c224210F603D836748e7dC0088);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n```solidity Solidity 5\r\npragma solidity ^0.5.0;\r\n\r\nimport \"@chainlink/contracts/v0.5/ChainlinkClient.sol\";\r\n\r\ncontract FinageChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    setChainlinkToken(0xa36085F69e2889c224210F603D836748e7dC0088);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n```solidity Solidity 6\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@chainlink/contracts/v0.6/ChainlinkClient.sol\";\r\n\r\ncontract FinageChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    setChainlinkToken(0xa36085F69e2889c224210F603D836748e7dC0088);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n<div class=\"remix-callout\">\r\n    <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/DataProviders/Finage.sol\" target=\"_blank\" >Open in Remix</a>\r\n    <a href=\"/docs/conceptual-overview/#what-is-remix\" >What is Remix?</a>\r\n</div>\r\n\r\n# Tasks\r\n\r\n- [Finage external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/finage)\r\n- [Copy](/docs/core-adapters/#copy)\r\n- [Multiply](/docs/core-adapters/#multiply)\r\n- [EthInt256](/docs/core-adapters/#ethint256)\r\n- [EthTx](/docs/core-adapters/#ethtx)\r\n\r\n# Request Parameters\r\n\r\n### `symbol`\r\n\r\n- The symbol of the stock to query\r\n\r\n#### Solidity Example\r\n\r\n`req.add(\"symbol\", \"AAPL\");`\r\n\r\n# Chainlink Examples\r\n\r\nThe examples below show how to create a request for the Chainlink node.\r\n\r\n### `requestData` function\r\n\r\n```solidity\r\nfunction requestData\r\n(\r\n  address _oracle,\r\n  bytes32 _jobId,\r\n  string memory _symbol\r\n)\r\n  public\r\n  onlyOwner\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(_jobId, this, this.fulfill.selector);\r\n  req.add(\"symbol\", _symbol);\r\n  sendChainlinkRequestTo(_oracle, req, oraclePayment);\r\n}\r\n```\r\n\r\n### `fulfill` function\r\n\r\n```solidity\r\nint256 public data;\r\n\r\nfunction fulfill(bytes32 _requestId, int256 _data)\r\n  public\r\n  recordChainlinkFulfillment(_requestId)\r\n{\r\n  data = _data;\r\n}\r\n```\r\n\r\n## Documentation and Support\r\n\r\n- The `Finage Relative Stock Performance` job depends on calls to the Finage <a href=\"https://finage.co.uk/docs/api/stock-market-aggregates-api\" target=\"_blank\">Stock Market Aggregates API</a> and the <a href=\"https://finage.co.uk/docs/api/stock-market-details-api\" target=\"_blank\">Stock Market Details API</a>\r\n- For assistance, reach out to Finage using <a href=\"https://finage.co.uk/consultation\" target=\"_blank\">this form</a>\r\n"
    },
    {
      "title": "Google Weather Oracle",
      "headings": [
        {
          "depth": 2,
          "slug": "parameters-and-external-adapters-details",
          "text": "Parameters and External Adapters Details"
        },
        {
          "depth": 2,
          "slug": "chainlink-network-details",
          "text": "Chainlink Network Details"
        },
        {
          "depth": 3,
          "slug": "kovan",
          "text": "Kovan"
        },
        {
          "depth": 3,
          "slug": "mainnet",
          "text": "Mainnet"
        },
        {
          "depth": 2,
          "slug": "steps-for-using-this-oracle",
          "text": "Steps For Using This Oracle"
        },
        {
          "depth": 2,
          "slug": "create-your-chainlinked-contract",
          "text": "Create your Chainlinked contract"
        },
        {
          "depth": 2,
          "slug": "jobs",
          "text": "Jobs"
        },
        {
          "depth": 2,
          "slug": "rain-bergen-norway",
          "text": "Rain (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "hail-bergen-norway",
          "text": "Hail (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks-1",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "average-temperature-bergen-norway",
          "text": "Average Temperature (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks-2",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "generic-any-location",
          "text": "Generic (Any Location)"
        },
        {
          "depth": 3,
          "slug": "tasks-3",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "input-parameters",
          "text": "Input Parameters"
        }
      ],
      "url": "/any-api/data-providers/google-weather",
      "section": "ethereum",
      "content": "\r\nYou can use Chainlink to digest weather information using [Google Cloud Public Datasets](https://cloud.google.com/public-datasets). We have a sample brownie repo showing how to interact with the contracts available in our [gcp-weather brownie repo](https://github.com/PatrickAlphaC/gcp-weather). More information on this oracle can be found in the following [Google Cloud article](https://medium.com/google-cloud/hedging-against-bad-weather-with-cloud-datasets-and-blockchain-oracles-7ba3e0150304).\r\n\r\n## Parameters and External Adapters Details\r\n\r\nThese jobs are using a custom external adapter. Please see the [Google weather external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather) to see information about parameters that can be used with these jobs.\r\n\r\n## Chainlink Network Details\r\n\r\nYou will need to use the following LINK token address, oracle address, and JobSpec IDs in order to create the Chainlink request to this oracle.\r\n\r\n### Kovan\r\n\r\n| Parameter                 | Value                                                                                                                       |\r\n| :------------------------ | :-------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID`            | `42`                                                                                                                        |\r\n| ChainLink Token Address   | [0xa36085F69e2889c224210F603D836748e7dC0088](\"https://kovan.etherscan.io/token/0xa36085F69e2889c224210F603D836748e7dC0088\") |\r\n| Oracle                    | `0xbe79b86e93d09d6dda636352a06491ec8e7bdf12`                                                                                |\r\n| Rain JobID                | `3c7838a5810c4aeea140134d10a6d0c3`                                                                                          |\r\n| Hail JobID                | `7633f5d84840486a961ee281f96378f7`                                                                                          |\r\n| Average Temperature JobID | `93b72982721945268cf3ba75894f773e`                                                                                          |\r\n| Generic JobID             | `c414aab46673419697cad866b33c7921`                                                                                          |\r\n| Fee                       | `100000000000000000` (0.1 LINK)                                                                                             |\r\n| Node Operator             | `0x4ABabAA8Cb1f340443d90CbAd98faBe394D1Cf24`                                                                                |\r\n\r\n### Mainnet\r\n\r\n| Parameter                 | Value                                                                                                                 |\r\n| :------------------------ | :-------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID`            | `1`                                                                                                                   |\r\n| ChainLink Token Address   | [0x514910771af9ca656af840dff83e8264ecf986ca](\"https://etherscan.io/token/0x514910771af9ca656af840dff83e8264ecf986ca\") |\r\n| Oracle                    | `0x92c08A635C7525505123F0F8e327C6Fa66E09a18`                                                                          |\r\n| Rain JobID                | `e9c41111b74f454695abd471806d9c6f`                                                                                    |\r\n| Hail JobID                | `941cb4bdd6e746cd933a37c8e92f2f98`                                                                                    |\r\n| Average Temperature JobID | `c6f853860b4f479fbda0910350d695b6`                                                                                    |\r\n| Generic JobID             | `0606a7c2811e4dbab659be400ecd41f9`                                                                                    |\r\n| Fee                       | `1000000000000000000` (1 LINK)                                                                                        |\r\n| Node Operator             | `0x6767eDa1C1d0070cEbdFE1CB3a55e4B63FA02C3E`                                                                          |\r\n\r\n## Steps For Using This Oracle\r\n\r\n- Write and deploy your contract using the network details above.\r\n- Fund it with [LINK](/docs/link-token-contracts/)\r\n- Call your request method\r\n\r\n## Create your Chainlinked contract\r\n\r\nImport `ChainlinkClient.sol` into your contract so you can inherit the `ChainlinkClient` behavior. Below is a sample that can call the hail, rain, and average temperature jobs to fetch weather data from Bergen, Norway.\r\n\r\n::solidity-remix[samples/DataProviders/GoogleWeather.sol]\r\n\r\n## Jobs\r\n\r\n## Rain (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters:\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Point\",\r\n          \"coordinates\": [5.325622558593749, 60.3887552979679]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `multiply`: Multiples the output - set to `1000000000000000000`\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Hail (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Polygon\",\r\n          \"coordinates\": [\r\n            {\r\n              \"0\": [5.2796173095703125, 60.40673218057448],\r\n              \"1\": [5.164947509765625, 60.383665698324926],\r\n              \"2\": [5.17730712890625, 60.211509994185604],\r\n              \"3\": [5.401153564453124, 60.27694067255946],\r\n              \"4\": [5.6188201904296875, 60.436558668419984],\r\n              \"5\": [5.526123046875, 60.42842688461354],\r\n              \"6\": [5.3002166748046875, 60.5387098888639],\r\n              \"7\": [5.238418579101562, 60.4951151199491],\r\n              \"8\": [5.2796173095703125, 60.40673218057448]\r\n            }\r\n          ]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `ethuint256`: Turns the result into a `uint256`\r\n3. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Average Temperature (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters:\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Polygon\",\r\n          \"coordinates\": [\r\n            {\r\n              \"0\": [5.2796173095703125, 60.40673218057448],\r\n              \"1\": [5.164947509765625, 60.383665698324926],\r\n              \"2\": [5.17730712890625, 60.211509994185604],\r\n              \"3\": [5.401153564453124, 60.27694067255946],\r\n              \"4\": [5.6188201904296875, 60.436558668419984],\r\n              \"5\": [5.526123046875, 60.42842688461354],\r\n              \"6\": [5.3002166748046875, 60.5387098888639],\r\n              \"7\": [5.238418579101562, 60.4951151199491],\r\n              \"8\": [5.2796173095703125, 60.40673218057448]\r\n            }\r\n          ]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `multiply`: Multiples the output - set to `1000000000000000000`\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Generic (Any Location)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n2. `multiply`: Multiples the output\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Input Parameters\r\n\r\n| Required? |    Name    |                                                                                    Description                                                                                     |                                                                  Options                                                                  | Defaults to |\r\n| :-------: | :--------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------------------------------------: | :---------: |\r\n|    ✅     | `geoJson`  |                                                                A GeoJSON object containing the geographies to query                                                                |                                                                                                                                           |             |\r\n|    ✅     | `dateFrom` |                                                             The date to query data from (inclusive) in ISO 8601 format                                                             |                                                                                                                                           |             |\r\n|    ✅     |  `dateTo`  |                                                              The date to query data to (inclusive) in ISO 8601 format                                                              |                                                                                                                                           |             |\r\n|    ✅     |  `method`  |                                                                      Which method to use to aggregate data in                                                                      |                                                        `AVG`, `SUM`, `MIN`, `MAX`                                                         |             |\r\n|    ✅     |  `field`   |                                                                          Which column to fetch data from                                                                           | [Data available](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather#data-available) |             |\r\n|           |  `units`   | What unit system to return the result in ([conversions](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather#unit-conversion)) |                                                           `imperial`, `metric`                                                            | `imperial`  |\r\n\r\nPlease see the [Google weather external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather) to see information about parameters that can be used with these jobs.\r\n"
    },
    {
      "title": "Data Provider Nodes",
      "headings": [
        {
          "depth": 1,
          "slug": "data-provider-nodes-list",
          "text": "Data Provider Nodes List"
        }
      ],
      "url": "/any-api/data-providers/introduction",
      "section": "ethereum",
      "content": "\r\nChainlink has facilitated the launch of several new oracle data services that allow dApps to access rich data from external data sources. These oracles expand the types of data available on Chainlink and include data and use cases that do not fit into the traditional Chainlink feed model.\r\n\r\nData provider nodes allow customizable, on-demand API calls and the ability to deliver different data points on each request. This enables use cases where each requestor requires a different piece of data.\r\n\r\n:::caution[Select quality data feeds]\r\nBe aware of the quality of the data that you use. [Learn more about making responsible data quality decisions.](/docs/selecting-data-feeds/)\r\n:::\r\n\r\n# Data Provider Nodes List\r\n\r\n| Data Category | Name                                                                                             | Supported Blockchains        |\r\n| ------------- | ------------------------------------------------------------------------------------------------ | ---------------------------- |\r\n| Crypto        | [Kraken Rates Oracle Node](/docs/any-api/data-providers/kraken-rates/)                           | Ethereum                     |\r\n| DNS Lookup    | [DNS Ownership Oracle](/docs/any-api/data-providers/dns-ownership/)                              | Ethereum, BNB Chain, Polygon |\r\n| Equities      | [dxFeed Price Oracle](https://market.link/nodes/dxFeed/integrations)                             | Ethereum, BNB Chain          |\r\n| Equities      | [Finage Global Market Data Oracle](https://market.link/nodes/Finage/integrations)                | Ethereum, BNB Chain          |\r\n| Equities      | [Tiingo EOD Stock Price Oracle](https://market.link/nodes/Tiingo/integrations)                   | Ethereum, BNB Chain          |\r\n| Equities      | [TraderMade Real Time CFD and Index Oracle](https://market.link/nodes/TraderMade/integrations)   | Ethereum, BNB Chain          |\r\n| Equities      | [Twelve Data Real Time Asset Price Oracle](https://market.link/nodes/Twelve%20Data/integrations) | Ethereum, Polygon            |\r\n| Equities      | [T3 Index Node](https://market.link/nodes/Twelve%20Data/integrations)                            | Ethereum, BNB Chain          |\r\n| Identity      | [CipherTrace DeFi Compli Oracle](https://market.link/nodes/CipherTrace/integrations)             | Ethereum, BNB Chain, Polygon |\r\n| Real Estate   | [ProspectNow Real Estate Data Oracle](https://market.link/nodes/ProspectNow/integrations)        | Ethereum, Polygon            |\r\n| Real Estate   | [SmartZip Real Estate AVM Oracle](https://market.link/nodes/SmartZip/integrations)               | Ethereum, BNB Chain          |\r\n| Sports        | [SportMonks Sports Data Oracle](https://market.link/nodes/SportMonks/integrations)               | Ethereum, BNB Chain          |\r\n| Sports        | [SportsDataIO Oracle](https://market.link/nodes/SportsDataIO/integrations)                       | Ethereum, Polygon            |\r\n| Sports        | [TheRunDown Oracle Node](https://market.link/nodes/TheRundown/integrations)                      | Ethereum, Polygon            |\r\n| Weather       | [Google Weather Oracle](/docs/any-api/data-providers/google-weather/)                            | Ethereum                     |\r\n"
    },
    {
      "title": "Kraken Rates Oracle Node",
      "headings": [
        {
          "depth": 1,
          "slug": "steps-for-using-this-oracle",
          "text": "Steps for using this oracle"
        },
        {
          "depth": 1,
          "slug": "network-details",
          "text": "Network Details"
        },
        {
          "depth": 4,
          "slug": "rinkeby",
          "text": "Rinkeby"
        },
        {
          "depth": 4,
          "slug": "kovan",
          "text": "Kovan"
        },
        {
          "depth": 4,
          "slug": "mainnet",
          "text": "Mainnet"
        },
        {
          "depth": 2,
          "slug": "create-your-contract",
          "text": "Create your contract"
        },
        {
          "depth": 1,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "request-parameters",
          "text": "Request Parameters"
        },
        {
          "depth": 3,
          "slug": "arguments",
          "text": "Arguments"
        },
        {
          "depth": 4,
          "slug": "solidity-example",
          "text": "Solidity example"
        },
        {
          "depth": 3,
          "slug": "times",
          "text": "times"
        },
        {
          "depth": 4,
          "slug": "solidity-example-1",
          "text": "Solidity example"
        },
        {
          "depth": 1,
          "slug": "chainlink-examples",
          "text": "Chainlink Examples"
        }
      ],
      "url": "/any-api/data-providers/kraken-rates",
      "section": "ethereum",
      "content": "\r\nThis Chainlink has a dedicated connection to <a href=\"https://blog.cfbenchmarks.com/rest-api/\" target=\"_blank\">Kraken's Prices</a> API.\r\n\r\n# Steps for using this oracle\r\n\r\n- Write and deploy your contract using the network details below\r\n- Fund it with [LINK](/docs/link-token-contracts/)\r\n- Call your [request method](./#chainlink-examples)\r\n\r\n# Network Details\r\n\r\nYou will need to use the following LINK token address, oracle address, and Job ID in order to create the Chainlink request.\r\n\r\n#### Rinkeby\r\n\r\nPayment amount: 1 LINK\r\nLINK Token address: `{{variables.RINKEBY_LINK_TOKEN}}`\r\nOracle address: `{{variables.RINKEBY_CHAINLINK_ORACLE}}`\r\nJobID: `49ea116156cd44be997e7670a5dde80d`\r\n\r\n#### Kovan\r\n\r\nPayment amount: 1 LINK\r\nLINK Token address: `{{variables.KOVAN_LINK_TOKEN}}`\r\nOracle address: `{{variables.KOVAN_CHAINLINK_ORACLE}}`\r\nJobID: `8f4eeda1a8724077a0560ee84eb006b4`\r\n\r\n#### Mainnet\r\n\r\nPayment amount: 0.5 LINK\r\nLINK Token address: `{{variables.MAINNET_LINK_TOKEN}}`\r\nOracle address: `{{variables.MAINNET_CHAINLINK_ORACLE}}`\r\nJobID: contact `dataproviders@chain.link` for details\r\n\r\n## Create your contract\r\n\r\nImport `ChainlinkClient.sol` into your contract so you can inherit the Chainlink behavior.\r\n\r\n```solidity Solidity 4\r\npragma solidity ^0.4.24;\r\n\r\nimport \"@chainlink/contracts/v0.4/ChainlinkClient.sol\";\r\n\r\ncontract KrakenChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    // Rinkeby LINK Token Contract\r\n    setChainlinkToken(0x01BE23585060835E02B77ef475b0Cc51aA1e0709);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n```solidity Solidity 5\r\npragma solidity ^0.5.0;\r\n\r\nimport \"@chainlink/contracts/v0.5/ChainlinkClient.sol\";\r\n\r\ncontract KrakenChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    // Rinkeby LINK Token Contract\r\n    setChainlinkToken(0x01BE23585060835E02B77ef475b0Cc51aA1e0709);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n```solidity Solidity 6\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@chainlink/contracts/v0.6/ChainlinkClient.sol\";\r\n\r\ncontract KrakenChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    // Rinkeby LINK Token Contract\r\n    setChainlinkToken(0x01BE23585060835E02B77ef475b0Cc51aA1e0709);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/DataProviders/Kraken.sol\" target=\"_blank\" >Open in Remix</a>\r\n  <a href=\"/docs/conceptual-overview/#what-is-remix\" >What is Remix?</a>\r\n</div>\r\n\r\n# Tasks\r\n\r\n- [Kraken](/docs/external-adapters/)\r\n- [Multiply](/docs/core-adapters/#multiply)\r\n- [EthUint256](/docs/core-adapters/#ethuint256)\r\n- [EthTx](/docs/core-adapters/#ethtx)\r\n\r\n## Request Parameters\r\n\r\n### Arguments\r\n\r\nUse the `index` parameter to request the desired index from Kraken.\r\n\r\n#### Solidity example\r\n\r\nTo obtain KXBTUSD index, use the `DEFI_KXBTUSD` identifier.\r\n\r\n```solidity\r\nreq.add(\"index\", \"DEFI_KXBTUSD\");\r\n```\r\n\r\nIndex identifiers include:\r\n\r\n- DEFI_KXBTUSD\r\n- DEFI_KETHUSD\r\n- DEFI_KBCHUSD\r\n- DEFI_KXRPUSD\r\n- DEFI_KLTCUSD\r\n- DEFI_KLINKUSD\r\n- DEFI_KEOSUSD\r\n- DEFI_KXTZUSD\r\n- DEFI_KXLMUSD\r\n- DEFI_KPAXGUSD\r\n- DEFI_KALGOUSD\r\n- DEFI_KATOMUSD\r\n- DEFI_KOMGUSD\r\n- DEFI_KOXTUSD\r\n- DEFI_KXBTEUR\r\n- DEFI_KETHEUR\r\n\r\n### times\r\n\r\nThe amount to multiply the result by (since Solidity does not handle decimals).\r\n\r\n#### Solidity example\r\n\r\n```solidity\r\nreq.addInt(\"times\", 100);\r\n```\r\n\r\n# Chainlink Examples\r\n\r\nThe examples below show how to create a request for the Chainlink node.\r\n\r\n```solidity\r\nfunction requestPrice\r\n(\r\n  address _oracle,\r\n  bytes32 _jobId,\r\n  string _index\r\n)\r\n  public\r\n  onlyOwner\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(_jobId, address(this), this.fulfill.selector);\r\n  req.add(\"index\", _index);\r\n  req.addInt(\"times\", 100);\r\n  sendChainlinkRequestTo(_oracle, req, oraclePayment);\r\n}\r\n```\r\n\r\nHere is an example of the fulfill method:\r\n\r\n```solidity\r\nuint256 public currentPrice;\r\n\r\nfunction fulfill(bytes32 _requestId, uint256 _price)\r\n  public\r\n  recordChainlinkFulfillment(_requestId)\r\n{\r\n  currentPrice = _price;\r\n}\r\n```\r\n"
    },
    {
      "title": "Find Existing Jobs",
      "headings": [
        {
          "depth": 2,
          "slug": "introduction-to-oracles",
          "text": "Introduction to Oracles"
        },
        {
          "depth": 2,
          "slug": "oracle-jobs-and-types-of-data-available",
          "text": "Oracle Jobs and Types of Data Available"
        },
        {
          "depth": 3,
          "slug": "data-provider-nodes",
          "text": "Data provider nodes"
        },
        {
          "depth": 3,
          "slug": "find-a-job",
          "text": "Find a job"
        },
        {
          "depth": 4,
          "slug": "community-node-operators",
          "text": "Community node operators"
        },
        {
          "depth": 4,
          "slug": "alternatives-on-testnets",
          "text": "Alternatives on testnets"
        }
      ],
      "url": "/any-api/find-oracle",
      "section": "ethereum",
      "content": "\r\nThis page explains how to find an existing Oracle Job to suit the needs of your API call.\r\n\r\n## Introduction to Oracles\r\n\r\nOracles enable smart contracts to retrieve data from the outside world. Each oracle node can be configured to perform a wide range of tasks depending on the adapters it supports. For example, if your contract needs to make an HTTP GET request, it needs to use an oracle that supports the HTTP GET adapter.\r\n\r\nOracles [jobs](/docs/jobs/) can be specialized even further by implementing the configuration using [External Adapters](/docs/external-adapters/). For example, an Oracle job could implement URL, parameters, and conversion to Solidity compatible data, to retrieve a very specific piece of data from a specific API endpoint. This process is demonstrated in [Make an Existing Job Request](/docs/any-api/get-request/examples/existing-job-request/).\r\n\r\n## Oracle Jobs and Types of Data Available\r\n\r\n### Data provider nodes\r\n\r\nChainlink has facilitated the launch of several oracle data services that allow dApps to access rich data from external data sources through provider-owned nodes. The full list of such provider nodes is available here:\r\n\r\n- [Data Provider Node List](/docs/any-api/data-providers/introduction/#data-provider-nodes-list)\r\n\r\n### Find a job\r\n\r\n#### Community node operators\r\n\r\nTo find an Oracle Job that is pre-configured for your use case and available on the right network, join the [Chainlink operator-requests discord channel](https://discord.gg/eGcxsdZzKR) to directly communicate with community node operators.\r\n\r\n#### Alternatives on testnets\r\n\r\nOn testnets, several alternatives are provided:\r\n\r\n- The Chainlink Development Relations team maintains [Testnet Oracles](/docs/any-api/testnet-oracles/) that you can use to test implementations. If you don't find a suitable job for your needs, join [Chainlink operator-requests discord channel](https://discord.gg/eGcxsdZzKR) or check the other alternatives below.\r\n- You can also deploy testnet nodes and external adapters on [naas.link](https://naas.link/). You must write your own [jobs](/docs/jobs/): To help you get started, each [ANY API tutorial](/docs/any-api/get-request/introduction/) has a corresponding job attached to it. **Note:** [naas.link](https://naas.link) is managed by [linkpool.io](https://linkpool.io/). Refer to the contact section at the bottom of the page for more assistance.\r\n- Run your own testnet nodes as explained [here](/docs/running-a-chainlink-node/). You must write your own [jobs](/docs/jobs/): To help you get started, each [ANY API tutorial](/docs/any-api/get-request/introduction/) has a corresponding job attached to it.\r\n"
    },
    {
      "title": "Array Response",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/array-response",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API, that returns a _json_ array, from a smart contract, using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle and then receive the needed data from the array.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Call an API that returns a JSON array.\r\n- Fetch a specific information from the response.\r\n\r\n[Coingecko _GET /coins/markets/_ API](https://www.coingecko.com/en/api/documentation) returns a list of coins and their market data such as price, market cap, and volume. To check the response, you can directly paste the following URL in your browser `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": \"bitcoin\",\r\n    \"symbol\": \"btc\",\r\n    \"name\": \"Bitcoin\",\r\n    \"image\": \"https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579\",\r\n    \"current_price\": 42097,\r\n    \"market_cap\": 802478449872,\r\n    ...\r\n  },\r\n  {\r\n    ...\r\n  }\r\n]\r\n```\r\n\r\nFetch the _id_ of the first element. To consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/FetchFromArray.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/FetchFromArray.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the _id_ is a _string_ data type, so you must call a job that calls an API and returns a _string_. We will be using a generic **_GET>string_** job that can be found [here](/docs/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `id` function to confirm that the `id` state variable is not set.\r\n\r\n1. Run the `requestFirstId` function. This builds the `Chainlink.Request` using the correct parameters. The `req.add(\"path\", \"0,id\")` request parameter tells the oracle node to fetch the id at index 0 of the array returned by the GET request. It uses [JSONPath expression](https://jsonpath.com/) with comma `,` delimited string for nested objects, for example: `'0,id'`.\r\n\r\n1. After few seconds, call the `id` function. You should get a non-empty response: _bitcoin_\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Existing Job Request",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/existing-job-request",
      "section": "ethereum",
      "description": "Learn how to utilize existing Chainlink external adapters to make calls to APIs from smart contracts.",
      "content": "\r\nUsing an _existing_ Oracle Job makes your smart contract code more succinct. This page explains how to retrieve the gas price from an existing Chainlink job that calls [etherscan gas tracker API](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle).\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nIn [Single Word Response Example](/docs/any-api/get-request/examples/single-word-response/), the example contract code declared which URL to use, where to find the data in the response, and how to convert it so that it can be represented on-chain.\r\n\r\nThis example uses an existing job that is pre-configured to make requests to get [the gas price](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle). Using specialized jobs makes your contracts succinct and more simple.\r\n\r\n[Etherscan gas oracle](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle) returns the current Safe, Proposed and Fast gas prices. To check the response, you can directly paste the following URL in your browser `https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"status\": \"1\",\r\n  \"result\": {\r\n    \"LastBlock\": \"14653286\",\r\n    \"SafeGasPrice\": \"33\",\r\n    \"ProposeGasPrice\": \"33\",\r\n    \"FastGasPrice\": \"35\",\r\n    \"suggestBaseFee\": \"32.570418457\",\r\n    \"gasUsedRatio\": \"0.366502543599508,0.15439818258491,0.9729006,0.4925609,0.999657066666667\"\r\n  }\r\n}\r\n```\r\n\r\nFor this example, we created a job that leverages the [EtherScan External Adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/etherscan) to fetch the _SafeGasPrice_ , _ProposeGasPrice_ and _FastGasPrice_. You can learn more about External Adapters [here](/docs/external-adapters/).\r\nTo consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/GetGasPrice.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/GetGasPrice.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the job is very specific to the use case as it returns the gas prices. You can find the job spec for the Chainlink node [here](/docs/direct-request-existing-job/).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` functions to confirm that the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` state variables are equal to zero.\r\n\r\n1. Run the `requestGasPrice` function. This builds the `Chainlink.Request`. Note how succinct the request is.\r\n\r\n1. After few seconds, call the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` functions. You should get a non-zero responses.\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Large Responses",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/large-responses",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract, using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle and then receive large responses.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Call an API and fetch the response that is an arbitrary-length raw byte data.\r\n\r\n[IPFS](https://docs.ipfs.io/) is a decentralized file system for storing and accessing files, websites, applications, and data. For this example, we stored in IPFS a _JSON_ file that contains arbitrary-length raw byte data. To check the response, directly paste the following URL in your browser: `https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json` Alternatively, run the following command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"image\": \"0x68747470733a2f2f697066732e696f2f697066732f516d5358416257356b716e3259777435444c336857354d736a654b4a4839724c654c6b51733362527579547871313f66696c656e616d653d73756e2d636861696e6c696e6b2e676966\"\r\n}\r\n```\r\n\r\nFetch the value of _image_. To consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/GenericBigWord.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/GenericBigWord.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the _data_ is a _bytes_ data type, so you must call a job that calls an API and returns _bytes_. We will be using a generic **_GET>bytes_** job that can be found [here](/docs/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `data` and `image_url` functions to confirm that the `data` and `image_url` state variables are not set.\r\n\r\n1. Run the `requestBytes` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"get\", \"<url>\")` request parameter provides the oracle node with the [url](https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json) where to fetch the response.\r\n   - The `req.add('path', 'image')` request parameter tells the oracle node how to parse the response.\r\n\r\n1. After few seconds, call the `data` and `image_url` functions. You should get non-empty responses.\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Multi-Variable Responses",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/multi-variable-responses",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract, using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle and then receive multiple responses.\r\nThis is known as **multi-variable** or **multi-word** responses.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Fetch several responses in one single call.\r\n\r\n[Cryptocompare GET /data/price/ API](https://min-api.cryptocompare.com/documentation?key=Price&cat=SingleSymbolPriceEndpoint) returns the current price of any cryptocurrency in any other currency that you need. To check the response, you can directly paste the following URL in your browser `https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"BTC\": 0.07297\r\n}\r\n```\r\n\r\nThe request above shows how to get the price of _ETH_ against _BTC_. Now let say we want the price of _ETH_ against several currencies: _BTC_, _USD_, and _EUR_. Our contract will have to support receiving multiple responses.\r\nTo consume an API with multiple responses, your contract should inherit from [ChainlinkClient](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct called `Chainlink.Request`, which your contract should use to build the API request. The request should include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\nAssume that a user wants to obtain the ETH price quoted against three different currencies: _BTC_ , _USD_ and _EUR_. If they use only a single-word job, it would require three different requests. For a comparison, see the [Single Word Response](/docs/any-api/get-request/examples/single-word-response/) example. To make these requests more efficient, use multi-word responses to do it all in a single request as shown in the following example:\r\n\r\n::solidity-remix[samples/APIRequests/MultiWordConsumer.sol]\r\n\r\nTo use this contract:\r\n\r\n1. [Open the contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/MultiWordConsumer.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, you must call a job that is specifically configured to return _ETH_ price against _BTC_, _USD_ and _EUR_. You can find the job spec for the Chainlink node [here](/docs/direct-request-multi-word/).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `btc`, `usd` , and `eur` functions to confirm that the respective `btc`, `usd` , and `eur` state variables are equal to _zero_.\r\n\r\n1. Run the `requestMultipleParameters` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"urlBTC\", \"<cryptocompareETHBTCURL>\")` request parameter provides the oracle node with the [url](https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC) where to fetch the _ETH-BTC_ price. Same logic for `req.add(\"urlEUR\", \"<cryptocompareETHEURURL>\")` and `req.add(\"urlUSD\", \"<cryptocompareETHUSDURL>\")`.\r\n   - THe `req.add('pathBTC', 'BTC')` request parameter tells the oracle node where to fetch the _ETH-BTC_ price in the _json_ response. Same logic for `req.add('pathUSD', 'EUR')` and `req.add('pathEUR', 'USD')`.\r\n     Because you provide the URLs and paths, the `MultiWordConsumer` in the example can call any public API as long as the URLs and paths are correct.\r\n\r\n1. After few seconds, call the `btc`, `usd` , and `eur` functions. You should get a non-zero responses.\r\n   The job spec for the Chainlink node in this example can be found [here](/docs/direct-request-multi-word/).\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Single Word Response",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/single-word-response",
      "section": "ethereum",
      "description": "Learn how to make a GET request to an API from a smart contract, using Chainlink.",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle and receive a single response.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Fetch a single word response in a single call.\r\n\r\nThe [Cryptocompare GET /data/pricemultifull API](https://min-api.cryptocompare.com/documentation?key=Price&cat=multipleSymbolsFullPriceEndpoint) returns the current trading info (price, vol, open, high, low) of any list of cryptocurrencies in any other currency that you need. To check the response, you can directly paste the following URL in your browser `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following example:\r\n\r\n```json\r\n{\r\n  \"RAW\": {\r\n    \"ETH\": {\r\n      \"USD\": {\r\n        \"TYPE\": \"5\",\r\n        \"MARKET\": \"CCCAGG\",\r\n        \"FROMSYMBOL\": \"ETH\",\r\n        \"TOSYMBOL\": \"USD\",\r\n        \"FLAGS\": \"2049\",\r\n        \"PRICE\": 2867.04,\r\n        \"LASTUPDATE\": 1650896942,\r\n        \"MEDIAN\": 2866.2,\r\n        \"LASTVOLUME\": 0.16533939,\r\n        \"LASTVOLUMETO\": 474.375243849,\r\n        \"LASTTRADEID\": \"1072154517\",\r\n        \"VOLUMEDAY\": 195241.78281014622,\r\n        \"VOLUMEDAYTO\": 556240560.4621655,\r\n        \"VOLUME24HOUR\": 236248.94641103,\r\n        ...\r\n}\r\n```\r\n\r\nTo consume an API with multiple responses, your contract must import [ChainlinkClient](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct called `Chainlink.Request`, which your contract should use to build the API request. The request should include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\nAssume that a user wants to call the API above and retrieve only the 24h ETH trading volume from the response.\r\n\r\n::solidity-remix[samples/APIRequests/APIConsumer.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/APIConsumer.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, you must call a job that is configured to call a public API, parse a number from the response and remove any decimals from it. We are going to use a generic **_GET>uint256_** job that can be found [here](/docs/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `volume` function to confirm that the `volume` state variable is equal to _zero_.\r\n\r\n1. Run the `requestVolumeData` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"get\", \"<cryptocompareURL>\")` request parameter provides the oracle node with the [URL](https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD) from which to fetch _ETH-USD_ trading info.\r\n   - The `req.add('path', 'RAW,ETH,USD,VOLUME24HOUR')` request parameter tells the oracle node where to fetch the 24h ETH volume in the _json_ response. It uses a [JSONPath expression](https://jsonpath.com/) with comma(,) delimited string for nested objects. For example: `'RAW,ETH,USD,VOLUME24HOUR'`.\r\n   - The `req.addInt('times', timesAmount)` request parameter provides the oracle node with the multiplier `timesAmount` by which the fetched volume is multiplied. Use this to remove any decimals from the volume. **_Note_**: The `times` parameter is mandatory. If the API that you call returns a number without any decimals then provide `1`as `timesAmount`.\r\n     The `APIConsumer` in the example above is flexible enough to call any public API as long as the URL in _get_, _path_, and _timesAmounnt_ are correct.\r\n\r\n1. After few seconds, call the `volume` function. You should get a non-zero response.\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Make a GET Request",
      "headings": [
        {
          "depth": 2,
          "slug": "examples",
          "text": "Examples"
        },
        {
          "depth": 3,
          "slug": "single-word-response",
          "text": "Single Word Response"
        },
        {
          "depth": 3,
          "slug": "multi-variable-responses",
          "text": "Multi-Variable Responses"
        },
        {
          "depth": 3,
          "slug": "fetch-data-from-an-array",
          "text": "Fetch data from an Array"
        },
        {
          "depth": 3,
          "slug": "large-responses",
          "text": "Large Responses"
        },
        {
          "depth": 3,
          "slug": "make-an-existing-job-request",
          "text": "Make an Existing Job Request"
        }
      ],
      "url": "/any-api/get-request/introduction",
      "section": "ethereum",
      "description": "Learn how to make a GET request to an API from a smart contract, using Chainlink.",
      "content": "\r\nThis series of guides explains how to make HTTP GET requests to external APIs from smart contracts, using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle.\r\n\r\n<AnyApiCommonCallout />\r\n\r\n## Examples\r\n\r\n### Single Word Response\r\n\r\nThis [guide](/docs/any-api/get-request/examples/single-word-response/) explains how to make an HTTP GET request and parse the _json_ response to retrieve the value of one single attribute.\r\n\r\n### Multi-Variable Responses\r\n\r\nThis [guide](/docs/any-api/get-request/examples/multi-variable-responses/) explains how to make an HTTP GET request and parse the _json_ response to retrieve the values of multiple attributes.\r\n\r\n### Fetch data from an Array\r\n\r\nThis [guide](/docs/any-api/get-request/examples/api-array-response/) explains how to make an HTTP GET request that returns a _json_ array and parse it to retrieve the target element's value.\r\n\r\n### Large Responses\r\n\r\nThis [guide](/docs/any-api/get-request/examples/large-responses/) explains how to make an HTTP Get request that returns a _json_ containing an arbitrary-length raw byte data and parse it to return the data as _bytes_ data type.\r\n\r\n### Make an Existing Job Request\r\n\r\nThis [guide](/docs/any-api/get-request/examples/existing-job-request/) explains how to call a job that leverages [External adapters](/docs/external-adapters/) and returns the relevant data to the smart contract. This allows building succinct smart contracts that do not need to comprehend the URL or the response format of the target API.\r\n"
    },
    {
      "title": "Introduction to Using Any API",
      "headings": [
        {
          "depth": 2,
          "slug": "getting-started",
          "text": "Getting Started"
        },
        {
          "depth": 3,
          "slug": "requesting-off-chain-data",
          "text": "Requesting Off-chain Data"
        },
        {
          "depth": 3,
          "slug": "building-external-adapters",
          "text": "Building External Adapters"
        }
      ],
      "url": "/any-api/introduction",
      "section": "ethereum",
      "description": "Chainlink provides your smart contract with access to any external API. Learn how to integration any API into your smart contract.",
      "content": "\r\n![Chainlink Any API](/files/8c35025-Request__Receive_Data.png)\r\n\r\nChainlink enables your contracts to access to _any_ external data source through our decentralized oracle network.\r\n\r\nWhether your contract requires sports results, the latest weather, or any other publicly available data, the [Chainlink contract library](https://github.com/smartcontractkit/chainlink/tree/master/contracts) provides the tools required for your contract to consume it.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n:::note[ Note on Price Feed Data]\r\n\r\nIf your smart contracts need access to price feed data, try using [Chainlink Data Feeds](/docs/using-chainlink-reference-contracts/).\r\n\r\n:::\r\n\r\n## Getting Started\r\n\r\nWe understand making smart contracts compatible with off-chain data adds to the complexity of building smart contracts. We created a framework with minimal requirements, yet unbounded flexibility, so developers can focus more on the functionality of smart contracts rather than what feeds them.\r\n\r\nChainlink’s decentralized oracle network provides smart contracts with the ability to push and pull data, facilitating the interoperability between on-chain and off-chain applications.\r\n\r\n### Requesting Off-chain Data\r\n\r\nOutlined below are multiple ways developers can connect smart contracts to off-chain data feeds. Click a request type to learn more about it:\r\n\r\n| Request Type                                                                                      | Description                                                                                                                                                                                                                                                                            |\r\n| ------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [HTTP GET Single Word Response](/docs/any-api/get-request/examples/single-word-response/)         | This guide explains how to make an HTTP GET request and parse the _json_ response to retrieve the value of one single attribute.                                                                                                                                                       |\r\n| [HTTP GET Multi-Variable Responses](/docs/any-api/get-request/examples/multi-variable-responses/) | This guide explains how to make an HTTP GET request and parse the _json_ response to retrieve the values of multiple attributes.                                                                                                                                                       |\r\n| [HTTP GET Element in Array Response](/docs/any-api/get-request/examples/api-array-response/)      | This guide explains how to make an HTTP GET request that returns a _json_ array and parse it to retrieve the target element's value.                                                                                                                                                   |\r\n| [HTTP GET Large Reponses](/docs/any-api/get-request/examples/large-responses/)                    | This guide explains how to make an HTTP Get request that returns a _json_ containing an arbitrary-length raw byte data and parse it to return the data as _bytes_ data type.                                                                                                           |\r\n| [Existing Job Request](/docs/any-api/get-request/examples/existing-job-request/)                  | This guide explains how to call a job that leverages [External adapters](/docs/external-adapters/) and returns the relevant data to the smart contract. This allows building succinct smart contracts that do not need to comprehend the URL or the response format of the target API. |\r\n\r\n### Building External Adapters\r\n\r\nTo learn more about building external adapters and adding them to nodes, refer to the [External Adapters](/docs/external-adapters/) documentation.\r\n\r\nTo understand different use cases for using any API, refer to [Other Tutorials](/docs/other-tutorials/).\r\n"
    },
    {
      "title": "Testnet Oracles",
      "headings": [
        {
          "depth": 2,
          "slug": "operator-contracts",
          "text": "Operator Contracts"
        },
        {
          "depth": 2,
          "slug": "jobs",
          "text": "Jobs"
        },
        {
          "depth": 3,
          "slug": "job-ids",
          "text": "Job IDs"
        },
        {
          "depth": 3,
          "slug": "examples",
          "text": "Examples"
        },
        {
          "depth": 4,
          "slug": "get--bytes",
          "text": "Get > bytes"
        },
        {
          "depth": 5,
          "slug": "request-method",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--uint256",
          "text": "Get > uint256"
        },
        {
          "depth": 5,
          "slug": "request-method-1",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-1",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--int256",
          "text": "Get > int256"
        },
        {
          "depth": 5,
          "slug": "request-method-2",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-2",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--bool",
          "text": "Get > bool"
        },
        {
          "depth": 5,
          "slug": "request-method-3",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-3",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--string",
          "text": "Get > string"
        },
        {
          "depth": 5,
          "slug": "request-method-4",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-4",
          "text": "Callback method"
        }
      ],
      "url": "/any-api/testnet-oracles",
      "section": "ethereum",
      "description": "Example Chainlink testnet oracles that you can use for development",
      "content": "\r\nThe Chainlink Developer Relations team maintains several testnet oracles that you can use to test your implementation quickly.\r\n\r\n:::tip[Link token address and Faucet details]\r\n\r\nTo retrieve the LINK token address or get faucet details for your testnet of choice, see the [LINK Token Contracts](/docs/link-token-contracts/) page.\r\n\r\n:::\r\n\r\n## Operator Contracts\r\n\r\nTestnet [Operator contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) are deployed and maintained on the following networks:\r\n\r\n| Testnet          | Oracle Address                                                                                                                     |\r\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\r\n| Ethereum Goerli  | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://goerli.etherscan.io/address/0xcc79157eb46f5624204f47ab42b3906caa40eab7)     |\r\n| Ethereum Rinkeby | [`0xf3FBB7f3391F62C8fe53f89B41dFC8159EE9653f`](https://rinkeby.etherscan.io/address/0xf3FBB7f3391F62C8fe53f89B41dFC8159EE9653f)    |\r\n| Ethereum Kovan   | [`0xf702d6de1945993D5e7d15df870eE9f2523fbcC5`](https://kovan.etherscan.io/address/0xf702d6de1945993D5e7d15df870eE9f2523fbcC5)      |\r\n| Avalanche Fuji   | [`0x022EEA14A6010167ca026B32576D6686dD7e85d2`](https://testnet.snowtrace.io/address/0x022eea14a6010167ca026b32576d6686dd7e85d2)    |\r\n| Polygon Mumbai   | [`0x40193c8518BB267228Fc409a613bDbD8eC5a97b3`](https://mumbai.polygonscan.com/address/0x40193c8518BB267228Fc409a613bDbD8eC5a97b3)  |\r\n| Binance Testnet  | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://testnet.bscscan.com/address/0xCC79157eb46F5624204f47AB42b3906cAA40eaB7)     |\r\n| Fantom Testnet   | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://testnet.ftmscan.com/address/0xcc79157eb46f5624204f47ab42b3906caa40eab7)     |\r\n| Klaytn Testnet   | [`0xfC3BdAbD8a6A73B40010350E2a61716a21c87610`](https://baobab.scope.klaytn.com/account/0xfC3BdAbD8a6A73B40010350E2a61716a21c87610) |\r\n\r\n## Jobs\r\n\r\n### Job IDs\r\n\r\nTo make testing simple, jobs are configured with the following properties:\r\n\r\n- Each request on testnets costs 0.1 LINK.\r\n- Each oracle will wait for 1 confirmation before processing a request.\r\n- Jobs have the same IDs accross testnets.\r\n- Parameters are required. See [examples](#examples) for code snippets.\r\n\r\n<br>\r\n\r\n| Purpose                                                                                                                                                                                                                                                      | Tasks                                                                                                                                                                                        | Job ID                             | Required&nbspParameters                                                                                                                                  |\r\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| **_GET>bytes_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return arbitrary-length raw byte data **_bytes_**. <br>The job specs can be found [here](/docs/direct-request-get-bytes/)                                     | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/)                                                | `7da2702f37fd48e5b1b9a5715e3509b6` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n| **_GET>uint256_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the reponse <br>multiply the result by a multiplier <br>return an unsigned integer **_uint256_** . <br> The job specs can be found [here](/docs/direct-request-get-uint256/) | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Multiply](/docs/jobs/task-types/multiply/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/) | `ca98366cc7314957b8c012c72f05aeeb` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li><li>`times`: int</li></ul> |\r\n| **_GET>int256_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>multiply the result by a multiplier <br>return a signed integer **_int256_**. <br> The job specs can be found [here](/docs/direct-request-get-int256/)       | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Multiply](/docs/jobs/task-types/multiply/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/) | `fcf4140d696d44b687012232948bdd5d` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li><li>`times`: int</li></ul> |\r\n| **_GET>bool_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return a boolean **_bool_**. <br> The job specs can be found [here](/docs/direct-request-get-bool/)                                                            | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/)                                                | `c1c5e92880894eb6b27d3cae19670aa3` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n| **_GET>string_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return a sequence of characters **_string_**. <br> The job specs can be found [here](/docs/direct-request-get-string/)                                       | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/)                                                | `7d80a6386ef543a3abb52817f6707e3b` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n\r\n### Examples\r\n\r\n#### Get > bytes\r\n\r\nA full example can be found [here](/docs/any-api/get-request/examples/large-responses/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('7da2702f37fd48e5b1b9a5715e3509b6', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json'\r\n  );\r\n  req.add('path', 'image');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nbytes public data;\r\nstring public imageUrl;\r\nfunction fulfill(bytes32 requestId, bytes memory bytesData) public recordChainlinkFulfillment(requestId) {\r\n    data = bytesData;\r\n    imageUrl = string(data);\r\n}\r\n```\r\n\r\n#### Get > uint256\r\n\r\nA full example can be found [here](/docs/any-api/get-request/examples/single-word-response/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('ca98366cc7314957b8c012c72f05aeeb', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD'\r\n  );\r\n  req.add('path', 'RAW,ETH,USD,VOLUME24HOUR');\r\n  req.addInt('times', 10**18); // Multiply by times value to remove decimals. Parameter required so pass '1' if the number returned doesn't have decimals\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nuint256 public volume;\r\nfunction fulfill(bytes32 _requestId, uint256 _volume) public recordChainlinkFulfillment(_requestId) {\r\n  volume = _volume;\r\n}\r\n```\r\n\r\n#### Get > int256\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('fcf4140d696d44b687012232948bdd5d', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD'\r\n  );\r\n  req.add('path', 'RAW,ETH,USD,VOLUME24HOUR');\r\n  req.addInt('times', 10**18); // Multiply by times value to remove decimals. Parameter required so pass '1' if the number returned doesn't have decimals\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nint256 public volume;\r\nfunction fulfill(bytes32 _requestId, int256 _volume) public recordChainlinkFulfillment(_requestId) {\r\n  volume = _volume;\r\n}\r\n```\r\n\r\n#### Get > bool\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('c1c5e92880894eb6b27d3cae19670aa3', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://app.proofi.com/api/verify/eip155/0xCB5085214B6318aF3dd0FBbb5E74fbF6bf332151?contract=0x2f7f7E44ca1e2Ca1A54db4222cF97ab47EE026F1'\r\n  );\r\n  req.add('path', 'approved');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nbool public approved;\r\nfunction fulfill(bytes32 _requestId, bool _approved) public recordChainlinkFulfillment(_requestId) {\r\n  approved = _approved;\r\n}\r\n```\r\n\r\n#### Get > string\r\n\r\nA full example can be found [here](/docs/any-api/get-request/examples/api-array-response/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('7d80a6386ef543a3abb52817f6707e3b', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&per_page=10'\r\n  );\r\n  req.add('path', '0,id');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nstring public id;\r\nfunction fulfill(bytes32 _requestId, string memory _id) public recordChainlinkFulfillment(_requestId) {\r\n  id = _id;\r\n}\r\n```\r\n"
    },
    {
      "title": "Chainlink Keepers Architecture",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "keeper-contracts",
          "text": "Keeper Contracts"
        },
        {
          "depth": 2,
          "slug": "how-it-works",
          "text": "How it works"
        },
        {
          "depth": 2,
          "slug": "internal-monitoring",
          "text": "Internal monitoring"
        },
        {
          "depth": 2,
          "slug": "supported-networks-and-cost",
          "text": "Supported Networks and Cost"
        }
      ],
      "url": "/chainlink-keepers/overview",
      "section": "ethereum",
      "content": "\r\n## Overview\r\n\r\nChainlink Keepers enable you to execute smart contract functions based on conditions that you specify without having to create and maintain your own centralized stack. Chainlink Keepers is highly reliable and decentralized, supported by an industry leading team, and enables developers to deploy applications faster.\r\n\r\nThere are three main actors in the ecosystem:\r\n\r\n- **Upkeeps**: These are the jobs or tasks that you execute on-chain. For example, you can call a smart contract function if a specific set of conditions are met.\r\n- **Keepers registry**: The contract that you use to [register](../register-upkeep/) and manage **upkeeps**.\r\n- **Keepers**: Nodes in the Keepers Network that service registered and funded upkeeps in the Keepers registry. Keepers use the same Node Operators as Chainlink Data Feeds.\r\n\r\nThe following diagram describes the architecture of the Keeper network. The Chainlink Keepers Registry governs the actors on the network and compensates Keepers for performing successful upkeeps. Developers can register their Upkeeps, and Node Operators can register as Keepers.\r\n\r\n![keeper-overview](/images/contract-devs/keeper/keeper-overview.png)\r\n\r\n## Keeper Contracts\r\n\r\nKeepers use these contracts. You can find them in the [Chainlink repository](https://github.com/smartcontractkit/chainlink/tree/develop/contracts/src/v0.8). For details about how to use them, see the [Keepers-compatible Contracts](../compatible-contracts/) page.\r\n\r\n- `KeeperCompatible.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperCompatible.sol): Imports the following contracts:\r\n  - `KeeperBase.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperBase.sol): Enables the use of the `cannotExecute` modifier. Import this contract if you need for this modifier. See the [`checkUpkeep` function](/docs/chainlink-keepers/compatible-contracts#checkupkeep-function) for details.\r\n  - `KeeperCompatibleInterface.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol): The interface to be implemented in order to make your contract Keepers-compatible. Import this contract for type safety.\r\n- `KeeperRegistry.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperRegistry.sol): The registry contract that tracks all registered Upkeeps and the Keepers that can perform them.\r\n- `KeeperRegistrar.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperRegistrar.sol): The Registrar contract coverns the registration of new Upkeeps on the associated `KeeperRegistry` contract. Users who want to register Upkeeps by directly calling the deployed contract have to call the Transfer-and-Call function on the respective ERC-677 LINK contract configured on the Registrar and ensure they pass the correct encoded function call and inputs.\r\n\r\n## How it works\r\n\r\nKeepers follow a turn-taking algorithm to service upkeeps. A turn is a number of blocks and you can find the block count per turn for your network in the [configuration](../supported-networks/#configurations) section. During a turn a Upkeeps on the registry are randomly split, ordered into buckets, and assigned to a keeper to service them. Even if a Keeper goes down, the network has built-in redundancy and your Upkeep will be performed by the next keeper in line.\r\n\r\nDuring every block, the keeper reviews all of the upkeeps in its bucket to determine which upkeeps are eligible. This check is done off-chain using a geth simulation. The keeper checks both the `checkUpkeep` and `performUpkeep` conditions independently using simulation. If both are true (eligible), and the upkeep is funded, the keeper proceeds to execute the transaction on-chain.\r\n\r\nWhile only one Keeper monitors an upkeep at any point during a turn, an upkeep can have multiple on-chain transaction executions per turn. This is accomplished with a buddy-system. After a transaction is confirmed, the next keeper in the line monitors the upkeep. After a new transaction is confirmed, the previous keeper steps in again to monitor the upkeep until the end of the turn or until another transaction confirmation is complete. This creates a system that is secure and highly available. If a node becomes faulty and executes a transaction that is not eligible, the next node does not execute a transaction, which breaks the process.\r\n\r\nKeepers use the same transaction manager mechanism built and used by Chainlink Data Feeds. This creates a hyper-reliable automation service that can execute and confirm transactions even during intense gas spikes or on chains with significant reorgs. This mechanism has been in use in Chainlink Labs for multiple years, is battle hardened, and the team continuously improves on it.\r\n\r\n## Internal monitoring\r\n\r\nInternally, Chainlink Keepers also uses its own monitoring and alerting mechanisms to maintain a health network and ensure developers get the reliability that they expect.\r\n\r\n## Supported Networks and Cost\r\n\r\nFor a list of blockchains that is supported by Chainlink Keepers, please review the [supported networks page](./supported-networks). To learn more about the cost of using Chainlink Keepers, please review the [Keepers economics](./keeper-economics) page.\r\n"
    },
    {
      "title": "Register a Custom Logic Upkeep",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "register-an-upkeep-using-the-keepers-app",
          "text": "Register an Upkeep using the Keepers App"
        },
        {
          "depth": 2,
          "slug": "register-an-upkeep-using-your-own-deployed-contract",
          "text": "Register an Upkeep using your own deployed contract"
        },
        {
          "depth": 3,
          "slug": "prerequisites",
          "text": "Prerequisites"
        },
        {
          "depth": 3,
          "slug": "code-example",
          "text": "Code example"
        },
        {
          "depth": 3,
          "slug": "registerandpredictid-parameters",
          "text": "registerAndPredictID Parameters"
        },
        {
          "depth": 3,
          "slug": "registry-and-registrar-addresses",
          "text": "Registry and Registrar Addresses"
        }
      ],
      "url": "/chainlink-keepers/register-upkeep",
      "section": "ethereum",
      "content": "\r\n## Overview\r\n\r\nThis guide explains how to register a Custom logic Upkeep that uses a [Keepers-compatible contract](../compatible-contracts). You can either register it from the Keepers App, or from within a contract that you have deployed.\r\n\r\n**Topics**\r\n\r\n- [Register an Upkeep using the Keepers App](#register-an-upkeep-using-the-keepers-app)\r\n- [Register an Upkeep using your own deployed contract](#register-an-upkeep-using-your-own-deployed-contract)\r\n\r\n## Register an Upkeep using the Keepers App\r\n\r\n<div class=\"remix-callout\">\r\n    <a href=\"https://keepers.chain.link\" >Open the Chainlink Keepers App</a>\r\n</div>\r\n\r\n1. **Connect your wallet** using the button in the top right corner and choose a network. For a list of supported networks, see the [Supported Blockchain Networks](../supported-networks) section. The Chainlink Keepers App also lists the currently supported networks.\r\n   ![Connect With Metamask](/images/contract-devs/keeper/keeper-metamask.png)\r\n\r\n1. **Click the Register New Upkeep button**\r\n   ![Click Register New Upkeep](/images/contract-devs/keeper/keeper-register.png)\r\n\r\n1. **Select the custom logic trigger**\r\n\r\n1. **Provide the address of your [Keepers-compatible contract](../compatible-contracts)** You do not need to verify the contract on-chain, but it must be [Keepers-compatible](../compatible-contracts/).\r\n\r\n1. **Complete the required details:**\r\n\r\n   - **Upkeep name**: This will be publicly visible in the Keepers app.\r\n   - **Gas limit**: This is the maximum amount of gas that your transaction requires to execute on chain. This limit cannot exceed the `performGasLimit` value configured on the [registry](/docs/chainlink-keepers/supported-networks/#configurations). Before the network executes your transaction on chain, it simulates the transaction. If the gas required to execute your transaction exceeds the gas limit that you specified, your transaction will not be confirmed. Developers also have the ability to update `performGasLimit` for an upkeep. Consider running your function on a testnet to see how much gas it uses before you select a gas limit. This can be changed afterwards.\r\n   - **Starting balance (LINK)**: Specify a LINK starting balance to fund your upkeep. See the [LINK Token Contracts](/docs/link-token-contracts/) page to find the correct contract address and access faucets for testnet LINK. This field is required. You must have LINK before you can use the Keepers service.\r\n   - **Check data**: This field is provided as an input for when your `checkUpkeep` function is simulated. Either leave this field blank or specify a hexadecimal value starting with `0x`. To learn how to make flexible upkeeps using `checkData`, see the [Flexible Upkeeps](../flexible-upkeeps) guide.\r\n   - **Your email address**: This email address will be encrypted and is used to send you an email when your upkeep is underfunded.\r\n\r\n   :::caution[ Funding Upkeep]\r\n\r\n   You should fund your contract with more LINK that you anticipate you will need. The network will not check or perform your Upkeep if your balance is too low based on current exchange rates. View the [Keepers economics](../keeper-economics) page to learn more about the cost of using Keepers.\r\n\r\n   :::\r\n\r\n   :::caution[ ERC677 Link]\r\n\r\n   Fund your Upkeep with more LINK than you anticipate you will need. The network will not check or perform your upkeep if your balance is too low based on current exchange rates. View the [Keepers Economics](../keeper-economics) page to learn more about the cost of using Keepers.\r\n\r\n   :::\r\n\r\n   :::caution[ Testing and best practices]\r\n\r\n   Follow the [best practices](../compatible-contracts/#best-practices) when creating a Keepers-compatible contract and test your Upkeep on a testnet before deploying it to a mainnet.\r\n\r\n   :::\r\n\r\n1. **Click `Register upkeep`** and confirm the transaction in MetaMask.\r\n   ![Upkeep Registration Success Message](/images/contract-devs/keeper/keeper-registration-submitted.png)\r\n\r\nYour Upkeeps will be displayed in your list of Active Upkeeps. You must monitor the balance of your Upkeep. If the balance drops below the **minimum balance**, the Keepers Network will not perform the Upkeep. See [Manage Your Upkeeps](../manage-upkeeps) to learn how to manage your Upkeeps.\r\n\r\n## Register an Upkeep using your own deployed contract\r\n\r\nYou can dynamically create and manage Upkeeps from within your own dApp. To do this you will need to keep track of the Upkeep ID as your contract will use this to subsequently interact with the Keepers registry. The following example displays a smart contract that can create an Upkeep and determine the Upkeep ID. Note your contract should be Keepers-compatible you will need [ERC-677 LINK](../../link-token-contracts/) to fund the Upkeep. You can also program your Upkeep to check its own balance and fund itself by interacting with the registry.\r\n\r\n### Prerequisites\r\n\r\nFind the following addresses for your network:\r\n\r\n- Correct [LINK token contract](../../link-token-contracts/)\r\n- [Registry and registrar addresses for your network](#registry-and-registrar-addresses)\r\n\r\nOptionally, you can fetch the LINK address and registrar address from the intended registry at run-time.\r\n\r\n:::note[ Make sure your contract has enough [ERC-677 LINK](../../link-token-contracts/) to fund the Upkeep at creation. _The minimum amount is 5 LINK._]\r\n\r\n:::\r\n\r\n### Code example\r\n\r\n::solidity-remix[samples/Keepers/UpkeepIDConsumerExample.sol]\r\n\r\n<div class=\"remix-callout\">\r\n    <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/Keepers/UpkeepIDConsumerExample.sol\" >Open in Remix</a>\r\n    <a href=\"/docs/conceptual-overview/#what-is-remix\" > What is Remix?</a>\r\n</div>\r\n\r\n### `registerAndPredictID` Parameters\r\n\r\n| Name             | Description                                                                                                                          |\r\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `name`           | Name of Upkeep                                                                                                                       |\r\n| `encryptedEmail` | Not in use in programmatic registration. Please specify with `0x`                                                                    |\r\n| `upkeepContract` | Address of Keepers-compatible contract that will be automated                                                                        |\r\n| `gasLimit`       | The maximum amount of gas that will be used to execute your function on-chain                                                        |\r\n| `adminAddress`   | Address for Upkeep administrator. Upkeep administrator can fund contract.                                                            |\r\n| `checkData`      | ABI-encoded fixed and specified at Upkeep registration and used in every checkUpkeep. Can be empty (0x)                              |\r\n| `amount`         | The amount of LINK (in Wei) to fund your Upkeep. The minimum amount is 5 LINK. To fund 5 LINK please set this to 5000000000000000000 |\r\n| `source`         | Not in use in programmatic registration. Please specify with `0`.                                                                    |\r\n\r\n### Registry and Registrar Addresses\r\n\r\n| Name                         | Registry Address                                                                                                                | Registrar Address                                                                                                               |\r\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\r\n| Ethereum Mainnet             | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://etherscan.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)           | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://etherscan.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)           |\r\n| Goerli Testnet               | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://goerli.etherscan.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)    | [0x9806cf6fBc89aBF286e8140C42174B94836e36F2](https://goerli.etherscan.io/address/0x9806cf6fBc89aBF286e8140C42174B94836e36F2)    |\r\n| Rinkeby Testnet (Deprecated) | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://rinkeby.etherscan.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)   | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://rinkeby.etherscan.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)   |\r\n| Kovan Testnet (Deprecated)   | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://kovan.etherscan.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)     | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://kovan.etherscan.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)     |\r\n| Polygon Mainnet              | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://polygonscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)        | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://polygonscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)        |\r\n| Polygon Mumbai Testnet       | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://mumbai.polygonscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6) | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://mumbai.polygonscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d) |\r\n| BNB Chain Mainnet            | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://bscscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)            | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://bscscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)            |\r\n| BNB Chain Testnet            | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://testnet.bscscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)    | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://testnet.bscscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)    |\r\n| Avalanche Mainnet            | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://snowtrace.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)           | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://snowtrace.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)           |\r\n| Avalanche Fuji Testnet       | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://testnet.snowtrace.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)   | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://testnet.snowtrace.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)   |\r\n| Fantom Mainnet               | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://ftmscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)            | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://ftmscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)            |\r\n| Fantom Testnet               | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://testnet.ftmscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)    | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://testnet.ftmscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)    |\r\n"
    },
    {
      "title": "Arbitrum Price Feeds",
      "headings": [],
      "url": "/feeds-arbitrum",
      "section": "ethereum",
      "content": ""
    },
    {
      "title": "Solana Price Feeds",
      "headings": [],
      "url": "/feeds-solana",
      "section": "solana",
      "content": ""
    },
    {
      "title": "Ethereum Price Feeds",
      "headings": [],
      "url": "/feeds",
      "section": "ethereum",
      "content": ""
    },
    {
      "title": "Chainlink Overview",
      "headings": [
        {
          "depth": 1,
          "slug": "lookup",
          "text": "Lookup"
        },
        {
          "depth": 1,
          "slug": "manual-lookup",
          "text": "Manual Lookup"
        },
        {
          "depth": 1,
          "slug": "naming-structure",
          "text": "Naming Structure"
        },
        {
          "depth": 2,
          "slug": "subdomains",
          "text": "Subdomains"
        },
        {
          "depth": 1,
          "slug": "architecture",
          "text": "Architecture"
        },
        {
          "depth": 2,
          "slug": "resolver",
          "text": "Resolver"
        },
        {
          "depth": 2,
          "slug": "listening-for-address-changes",
          "text": "Listening for Address Changes"
        },
        {
          "depth": 1,
          "slug": "obtaining-addresses",
          "text": "Obtaining Addresses"
        },
        {
          "depth": 2,
          "slug": "javascript",
          "text": "Javascript"
        },
        {
          "depth": 2,
          "slug": "solidity",
          "text": "Solidity"
        }
      ],
      "url": "/ens",
      "section": "gettingStarted",
      "description": "Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.",
      "content": "---\nlayout: ../layouts/MainLayout.astro\nsection: gettingStarted\ndate: Last Modified\ntitle: \"Chainlink Overview\"\nexcerpt: \"Smart Contracts and Chainlink\"\nwhatsnext:\n  {\n    \"Deploy Your First Smart Contract\": \"/docs/deploy-your-first-contract/\",\n    \"Consuming Data Feeds\": \"/docs/consuming-data-feeds/\",\n  }\nmetadata:\n  title: \"Conceptual Overview\"\n  description: \"Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.\"\n  image:\n    0: \"/files/1a63254-link.png\"\n---\n\nimport { EnsLookupForm } from \"../features/ens/components/EnsLookupForm.tsx\"\nimport { EnsManualLookupForm } from \"../features/ens/components/EnsManualLookupForm.tsx\"\n\n# Lookup\n\n<EnsLookupForm client:idle />\n\n# Manual Lookup\n\n<EnsManualLookupForm client:idle />\n\n# Naming Structure\n\nChainlink data feeds fall under the `data.eth` naming suffix. To obtain a specific feed address, prefix this with the assets in the feed, separated by a dash (-).\n\n| Pair      | ENS Domain Name    |\n| :-------- | :----------------- |\n| ETH / USD | `eth-usd.data.eth` |\n| BTC / USD | `btc-usd.data.eth` |\n| ...       | `...`              |\n\n## Subdomains\n\nBy default, the base name structure (`eth-usd.data.eth`) returns the proxy address for that feed. However, subdomains enable callers to retrieve other associated contract addresses, as shown in the following table.\n\n| Contract Addresses    | Subdomain Prefix | Example                       |\n| :-------------------- | :--------------- | :---------------------------- |\n| Proxy                 | `proxy`          | `proxy.eth-usd.data.eth`      |\n| Underlying aggregator | `aggregator`     | `aggregator.eth-usd.data.eth` |\n| Proposed aggregator   | `proposed`       | `proposed.eth-usd.data.eth`   |\n\n# Architecture\n\n## Resolver\n\nFor each network, there is a single Chainlink resolver, which does not change. Its address can be obtained using the `data.eth` domain. This resolver manages the subdomains associated with `data.eth`.\n\n| Network          | Resolver Address                                                                                                                                       |\n| :--------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Ethereum Mainnet | <a href=\"https://app.ens.domains/address/0x122eb74f9d0F1a5ed587F43D120C1c2BbDb9360B/\" target=\"_blank\">`0x122eb74f9d0F1a5ed587F43D120C1c2BbDb9360B`</a> |\n\n## Listening for Address Changes\n\nWhen a new aggregator is deployed for a specific feed, it is first proposed, and when accepted becomes the aggregator for that feed. During this process, the `proposed` and `aggregator` subdomains for that feed will change. With each change, the resolver emits an `AddrChanged` event, using the feed subdomain (for example: `eth-usd.data.eth`) as the indexed parameter.\n\n**Example**: If you want to listen for when the aggregator of the ETH / USD feed changes, set up a listener to track the `AddrChanged` event on the resolver, using a filter like this: `ethers.utils.namehash('aggregator.eth-usd.data.eth')`.\n\n# Obtaining Addresses\n\n> 🚧 Reverse Lookup\n>\n> Reverse lookup is not supported.\n\n:::warning[Reverse Lookup]\n\nReverse lookup is not supported.\n\n:::\n\n## Javascript\n\nThe example below uses Javascript Web3 library to interact with ENS. See the <a href=\"https://docs.ens.domains/dapp-developer-guide/resolving-names\" target=\"_blank\">ENS documentation</a> for the full list of languages and libraries libraries that support ENS.\n\nThis example logs the address of the data feed on the Ethereum mainnet for ETH / USD prices.\n\n```javascript\n{% include 'samples/PriceFeeds/ENSConsumer.js' %}\n```\n\n## Solidity\n\nIn Solidity, the address of the ENS registry must be known. According to <a href=\"https://docs.ens.domains/ens-deployments\" target=\"_blank\">ENS documentation</a>, this address is the same across Mainnet, Ropsten, Rinkeby and Goerli networks:\n\nENS registry address: <a href=\"https://etherscan.io/address/0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\" target=\"_blank\">`0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e`</a>.\n\nAlso, instead of using readable string names like `eth-usd.data.eth`, resolvers accept bytes32 hash IDs for names. Hash IDs can be retrieved from <a href=\"https://thegraph.com/explorer/subgraph/ensdomains/ens\" target=\"_blank\">this subgraph</a> or via this npm package <a href=\"https://www.npmjs.com/package/@ensdomains/eth-ens-namehash\" target=\"_blank\">eth-ens-namehash</a>.\n\n\"ETH / USD\" hash: `0xf599f4cd075a34b92169cf57271da65a7a936c35e3f31e854447fbb3e7eb736d`\n\n::solidity-remix[/samples/PriceFeeds/ENSConsumer.sol]\n"
    },
    {
      "title": "Chainlink Overview",
      "headings": [
        {
          "depth": 1,
          "slug": "mdx",
          "text": "MDX"
        },
        {
          "depth": 2,
          "slug": "features",
          "text": "Features"
        },
        {
          "depth": 2,
          "slug": "commands-cheatsheet",
          "text": "Commands Cheatsheet"
        },
        {
          "depth": 2,
          "slug": "new-to-astro",
          "text": "New to Astro?"
        },
        {
          "depth": 2,
          "slug": "customize-this-theme",
          "text": "Customize This Theme"
        },
        {
          "depth": 3,
          "slug": "site-metadata",
          "text": "Site metadata"
        },
        {
          "depth": 3,
          "slug": "css-styling",
          "text": "CSS styling"
        },
        {
          "depth": 2,
          "slug": "page-metadata",
          "text": "Page metadata"
        },
        {
          "depth": 3,
          "slug": "sidebar-navigation",
          "text": "Sidebar navigation"
        },
        {
          "depth": 3,
          "slug": "multiple-languages-support",
          "text": "Multiple Languages support"
        },
        {
          "depth": 3,
          "slug": "what-if-i-dont-plan-to-support-multiple-languages",
          "text": "What if I don’t plan to support multiple languages?"
        },
        {
          "depth": 3,
          "slug": "search-powered-by-algolia",
          "text": "Search (Powered by Algolia)"
        }
      ],
      "url": "/rc",
      "section": "gettingStarted",
      "description": "Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.",
      "content": "---\nlayout: ../layouts/MainLayout.astro\nsection: gettingStarted\ndate: Last Modified\ntitle: \"Chainlink Overview\"\nexcerpt: \"Smart Contracts and Chainlink\"\nwhatsnext:\n  {\n    \"Deploy Your First Smart Contract\": \"/docs/deploy-your-first-contract/\",\n    \"Consuming Data Feeds\": \"/docs/consuming-data-feeds/\",\n  }\nmetadata:\n  title: \"Conceptual Overview\"\n  description: \"Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.\"\n  image:\n    0: \"/files/1a63254-link.png\"\n---\n\n# MDX\n\n```bash\nnpm init astro -- --template docs\n```\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/docs)\n\n## Features\n\n- ✅ **Full Markdown support**\n- ✅ **Responsive mobile-friendly design**\n- ✅ **Sidebar navigation**\n- ✅ **Search (powered by Algolia)**\n- ✅ **Multi-language i18n**\n- ✅ **Automatic table of contents**\n- ✅ **Automatic list of contributors**\n- ✅ (and, best of all) **dark mode**\n\n## Commands Cheatsheet\n\nAll commands are run from the root of the project, from a terminal:\n\n| Command           | Action                                       |\n| :---------------- | :------------------------------------------- |\n| `npm install`     | Installs dependencies                        |\n| `npm run dev`     | Starts local dev server at `localhost:3000`  |\n| `npm run build`   | Build your production site to `./dist/`      |\n| `npm run preview` | Preview your build locally, before deploying |\n\nTo deploy your site to production, check out our [Deploy an Astro Website](https://docs.astro.build/guides/deploy) guide.\n\n## New to Astro?\n\nWelcome! Check out [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).\n\n## Customize This Theme\n\n### Site metadata\n\n`src/config.ts` contains several data objects that describe metadata about your site like title, description, default language, and Open Graph details. You can customize these to match your project.\n\n### CSS styling\n\nThe theme's look and feel is controlled by a few key variables that you can customize yourself. You'll find them in the `public/theme.css` CSS file.\n\nIf you've never worked with CSS variables before, give [MDN's guide on CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) a quick read.\n\nThis theme uses a \"cool blue\" accent color by default. To customize this for your project, change the `--theme-accent` variable to whatever color you'd like:\n\n```diff\n/* public/theme.css */\n:root {\n  color-scheme: light;\n-  --theme-accent: hsla(var(--color-blue), 1);\n+  --theme-accent: hsla(var(--color-red), 1);   /* or: hsla(#FF0000, 1); */\n```\n\n## Page metadata\n\nAstro uses frontmatter in Markdown pages to choose layouts and pass properties to those layouts. If you are using the default layout, you can customize the page in many different ways to optimize SEO and other things. For example, you can use the `title` and `description` properties to set the document title, meta title, meta description, and Open Graph description.\n\n```markdown\n---\ntitle: Example title\ndescription: Really cool docs example that uses Astro\nlayout: ../../layouts/MainLayout.astro\n---\n\n# Page content...\n```\n\nFor more SEO related properties, look at `src/components/HeadSEO.astro`\n\n### Sidebar navigation\n\nThe sidebar navigation is controlled by the `SIDEBAR` variable in your `src/config.ts` file. You can customize the sidebar by modifying this object. A default, starter navigation has already been created for you.\n\n```ts\nexport const SIDEBAR = {\n  en: [\n    { text: \"Section Header\", header: true },\n    { text: \"Introduction\", link: \"en/introduction\" },\n    { text: \"Page 2\", link: \"en/page-2\" },\n    { text: \"Page 3\", link: \"en/page-3\" },\n\n    { text: \"Another Section\", header: true },\n    { text: \"Page 4\", link: \"en/page-4\" },\n  ],\n}\n```\n\nNote the top-level `en` key: This is needed for multi-language support. You can change it to whatever language you'd like, or add new languages as you go. More details on this below.\n\n### Multiple Languages support\n\nThe Astro docs template supports multiple langauges out of the box. The default theme only shows `en` documentation, but you can enable multi-language support features by adding a second language to your project.\n\nTo add a new language to your project, you'll want to extend the current `src/pages/[lang]/...` layout:\n\n```diff\n 📂 src/pages\n ┣ 📂 en\n ┃ ┣ 📜 page-1.md\n ┃ ┣ 📜 page-2.md\n ┃ ┣ 📜 page-3.astro\n+ ┣ 📂 es\n+ ┃ ┣ 📜 page-1.md\n+ ┃ ┣ 📜 page-2.md\n+ ┃ ┣ 📜 page-3.astro\n```\n\nYou'll also need to add the new language name to the `KNOWN_LANGUAGES` map in your `src/config.ts` file. This will enable your new language switcher in the site header.\n\n```diff\n// src/config.ts\nexport const KNOWN_LANGUAGES = {\n  English: 'en',\n+  Spanish: 'es',\n};\n```\n\nLast step: you'll need to add a new entry to your sidebar, to create the table of contents for that language. While duplicating every page might not sound ideal to everyone, this extra control allows you to create entirely custom content for every language.\n\n> Make sure the sidebar `link` value points to the correct language!\n\n```diff\n// src/config.ts\nexport const SIDEBAR = {\n  en: [\n    { text: 'Section Header', header: true, },\n    { text: 'Introduction', link: 'en/introduction' },\n    // ...\n  ],\n+  es: [\n+    { text: 'Encabezado de sección', header: true, },\n+    { text: 'Introducción', link: 'es/introduction' },\n+    // ...\n+  ],\n};\n\n// ...\n```\n\nIf you plan to use Spanish as the the default language, you just need to modify the redirect path in `src/pages/index.astro`:\n\n```diff\n<script>\n- window.location.pathname = `/en/introduction`;\n+ window.location.pathname = `/es/introduction`;\n</script>\n```\n\nYou can also remove the above script and write a landing page in Spanish instead.\n\n### What if I don't plan to support multiple languages?\n\nThat's totally fine! Not all projects need (or can support) multiple languages. You can continue to use this theme without ever adding a second language.\n\nIf that single language is not English, you can just replace `en` in directory layouts and configurations with the preferred language.\n\n### Search (Powered by Algolia)\n\n[Algolia](https://www.algolia.com/) offers a free service to qualified open source projects called [DocSearch](https://docsearch.algolia.com/). If you are accepted to the DocSearch program, provide your API Key & index name in `src/config.ts` and a search box will automatically appear in your site header.\n\nNote that Aglolia and Astro are not affiliated. We have no say over acceptance to the DocSearch program.\n\nIf you'd prefer to remove Algolia's search and replace it with your own, check out the `src/components/Header.astro` component to see where the component is added.\n"
    }
  ]
}