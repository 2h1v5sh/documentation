{
  "index": [
    {
      "title": "README",
      "headings": [
        {
          "depth": 2,
          "slug": "using-directives",
          "text": "Using Directives"
        },
        {
          "depth": 3,
          "slug": "callouts",
          "text": "Callouts"
        },
        {
          "depth": 3,
          "slug": "solidity-remix",
          "text": "Solidity Remix"
        },
        {
          "depth": 2,
          "slug": "using-variables",
          "text": "Using variables"
        },
        {
          "depth": 3,
          "slug": "usage",
          "text": "Usage"
        },
        {
          "depth": 2,
          "slug": "code-tabs",
          "text": "Code Tabs"
        },
        {
          "depth": 3,
          "slug": "network-tab",
          "text": "Network Tab"
        },
        {
          "depth": 4,
          "slug": "usage-1",
          "text": "Usage"
        },
        {
          "depth": 3,
          "slug": "package-manager-tabs",
          "text": "Package Manager Tabs"
        },
        {
          "depth": 4,
          "slug": "usage-2",
          "text": "Usage"
        },
        {
          "depth": 3,
          "slug": "custom-tabs",
          "text": "Custom tabs"
        }
      ],
      "url": "/README",
      "section": "gettingStarted",
      "description": "Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.",
      "content": "\n## Using Directives\n\nCustom markdown is written using directives. Theres two type of directives, `nodeDirectives` like the ones used in the callouts:\n\n```\n// usage\n:::directiveName[title]\ncontent\n:::\n\n//example\n:::tip[did you know?]\ntip\n:::\n```\n\nAnd `leafDirectives` like the ones used for solidityRemix examples\n\n```\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n```\n\n### Callouts\n\n:::tip[did you know?]\ntip\n:::\n\n:::danger[did you know?]\ndanger\n:::\n\n:::caution[did you know?]\ninfo\n:::\n\n:::note[did you know?]\nwarning\n:::\n\n```\n:::tip[did you know?]\ntip\n:::\n\n:::danger[did you know?]\ndanger\n:::\n\n:::caution[did you know?]\ninfo\n:::\n\n:::note[did you know?]\nwarning\n:::\n```\n\n### Solidity Remix\n\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n\n```\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n```\n\n## Using variables\n\nYou can use variables by importing the variables object into the current page\n\n<Tabs client:visible>\n<Fragment slot=\"tab.1\">Usage in .md</Fragment>\n<Fragment slot=\"tab.2\">Usage in .mdx</Fragment>\n<Fragment slot=\"panel.1\">\n```\nsetup: |\n  import { variables } from \"@variables\"\n```\n</Fragment>\n<Fragment slot=\"panel.2\">\n```\nimport { variables } from \"@variables\"\n```\n</Fragment>\n</Tabs>\n\n### Usage\n\n{variables.GOERLI_LINK_TOKEN}\n\n```\n{variables.GOERLI_LINK_TOKEN}\n```\n\n## Code Tabs\n\nCodetabs use nanostores to sync up throughout the page.\n\nIdeally we will create components such as the `<CodeTabs />` component or the `<NetworkTabs />` component, which use a `sharedStore` to change all tabs to the same value throughout the page.\n\n<Tabs client:visible>\n<Fragment slot=\"tab.1\">Usage in .md</Fragment>\n<Fragment slot=\"tab.2\">Usage in .mdx</Fragment>\n<Fragment slot=\"panel.1\">\n```markdown\nsetup: |\nimport Tabs from \"@components/Tabs/Tabs.tsx\"\nimport { NetworkTabs, PackageManagerTabs } from \"@components\"\n  ```\n</Fragment>\n<Fragment slot=\"panel.2\">\n```markdown\nimport Tabs from \"@components/Tabs/Tabs.tsx\"\nimport { NetworkTabs, PackageManagerTabs } from \"@components\"\n```\n</Fragment>\n</Tabs>\n\n### Network Tab\n\nCreate a local directory to persist the data:\n\n<NetworkTabs>\n  <Fragment slot=\"Goerli\">\n  ```shell Goerli\n  mkdir ~/.geth-goerli\n  ```\n  </Fragment>\n  <Fragment slot=\"Mainnet\">\n  ```shell Mainnet\n  mkdir ~/.geth\n  ```\n  </Fragment>\n</NetworkTabs>\n\nRun the container:\n\n<NetworkTabs>\n  <Fragment slot=\"Goerli\">\n  ```shell Goerli\n  docker run --name eth -p 8546:8546 -v ~/.geth-goerli:/geth -it \\\n          ethereum/client-go --goerli --ws --ipcdisable \\\n          --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n  ```\n  </Fragment>\n  <Fragment slot=\"Mainnet\">\n  ```shell Mainnet\n  docker run --name eth -p 8546:8546 -v ~/.geth:/geth -it \\\n          ethereum/client-go --ws --ipcdisable \\\n          --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n  ```\n  </Fragment>\n</NetworkTabs>\n\n#### Usage\n\n````\nCreate a local directory to persist the data:\n\n<NetworkTabs>\n  <Fragment slot=\"Goerli\">\n  ```shell Goerli\n  mkdir ~/.geth-goerli\n  ```\n  </Fragment>\n  <Fragment slot=\"Mainnet\">\n  ```shell Mainnet\n  mkdir ~/.geth\n  ```\n  </Fragment>\n</NetworkTabs>\n\nRun the container:\n\n<NetworkTabs>\n  <Fragment slot=\"Goerli\">\n  ```shell Goerli\n  docker run --name eth -p 8546:8546 -v ~/.geth-goerli:/geth -it \\\n          ethereum/client-go --goerli --ws --ipcdisable \\\n          --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n  ```\n  </Fragment>\n  <Fragment slot=\"Mainnet\">\n  ```shell Mainnet\n  docker run --name eth -p 8546:8546 -v ~/.geth:/geth -it \\\n          ethereum/client-go --ws --ipcdisable \\\n          --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n  ```\n  </Fragment>\n</NetworkTabs>\n````\n\n### Package Manager Tabs\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```\n  npm i -g @chainlink/solana-sdk\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```\n  yarn add @chainlink/solana-sdk\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n#### Usage\n\n````\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```\n  npm i -g @chainlink/solana-sdk\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```\n  yarn add @chainlink/solana-sdk\n  ```\n  </Fragment>\n</PackageManagerTabs>\n````\n\n### Custom tabs\n\nWe can still use the tabs without creating an Astro component or without the sharedStore property.\n\n:::note\nTo create a custom tab we _MUST_ import it from `import Tabs from \"@components/Tabs/Tabs.tsx\"` and not from `@components`\n:::\n\n```\n\n// whithout shared store\n<Tabs client:visible>\n<Fragment slot=\"tab.1\">Tab 1</Fragment>\n<Fragment slot=\"tab.2\">Tab 2</Fragment>\n<Fragment slot=\"panel.1\">Content 1</Fragment>\n<Fragment slot=\"panel.2\">Content 2</Fragment>\n</Tabs>\n\n// with sharedStore (syncs up all tabs in the page)\n<Tabs sharedStore=\"networks\" client:visible>\n<Fragment slot=\"tab.1\">Tab 1</Fragment>\n<Fragment slot=\"tab.2\">Tab 2</Fragment>\n<Fragment slot=\"panel.1\">Content 1</Fragment>\n<Fragment slot=\"panel.2\">Content 2</Fragment>\n</Tabs>\n\n```\n"
    },
    {
      "title": "ChainlinkClient API Reference",
      "headings": [
        {
          "depth": 2,
          "slug": "index",
          "text": "Index"
        },
        {
          "depth": 3,
          "slug": "methods",
          "text": "Methods"
        },
        {
          "depth": 3,
          "slug": "events",
          "text": "Events"
        },
        {
          "depth": 3,
          "slug": "modifiers",
          "text": "Modifiers"
        },
        {
          "depth": 3,
          "slug": "constants",
          "text": "Constants"
        },
        {
          "depth": 3,
          "slug": "structs",
          "text": "Structs"
        },
        {
          "depth": 2,
          "slug": "methods-1",
          "text": "Methods"
        },
        {
          "depth": 3,
          "slug": "setchainlinkoracle",
          "text": "setChainlinkOracle"
        },
        {
          "depth": 3,
          "slug": "setchainlinktoken",
          "text": "setChainlinkToken"
        },
        {
          "depth": 3,
          "slug": "buildchainlinkrequest",
          "text": "buildChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "buildoperatorrequest",
          "text": "buildOperatorRequest"
        },
        {
          "depth": 3,
          "slug": "sendchainlinkrequest",
          "text": "sendChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "sendchainlinkrequestto",
          "text": "sendChainlinkRequestTo"
        },
        {
          "depth": 3,
          "slug": "sendoperatorrequest",
          "text": "sendOperatorRequest"
        },
        {
          "depth": 3,
          "slug": "sendoperatorrequestto",
          "text": "sendOperatorRequestTo"
        },
        {
          "depth": 3,
          "slug": "validatechainlinkcallback",
          "text": "validateChainlinkCallback"
        },
        {
          "depth": 3,
          "slug": "addchainlinkexternalrequest",
          "text": "addChainlinkExternalRequest"
        },
        {
          "depth": 3,
          "slug": "cancelchainlinkrequest",
          "text": "cancelChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "usechainlinkwithens",
          "text": "useChainlinkWithENS"
        },
        {
          "depth": 3,
          "slug": "updatechainlinkoraclewithens",
          "text": "updateChainlinkOracleWithENS"
        },
        {
          "depth": 3,
          "slug": "chainlinktokenaddress",
          "text": "chainlinkTokenAddress"
        },
        {
          "depth": 3,
          "slug": "chainlinkoracleaddress",
          "text": "chainlinkOracleAddress"
        },
        {
          "depth": 2,
          "slug": "events-1",
          "text": "Events"
        },
        {
          "depth": 3,
          "slug": "chainlinkrequested",
          "text": "ChainlinkRequested"
        },
        {
          "depth": 3,
          "slug": "chainlinkfulfilled",
          "text": "ChainlinkFulfilled"
        },
        {
          "depth": 3,
          "slug": "chainlinkcancelled",
          "text": "ChainlinkCancelled"
        },
        {
          "depth": 2,
          "slug": "constants-1",
          "text": "Constants"
        },
        {
          "depth": 3,
          "slug": "link_divisibility",
          "text": "LINK_DIVISIBILITY"
        },
        {
          "depth": 2,
          "slug": "modifiers-1",
          "text": "Modifiers"
        },
        {
          "depth": 3,
          "slug": "recordchainlinkfulfillment",
          "text": "recordChainlinkFulfillment"
        },
        {
          "depth": 2,
          "slug": "chainlinkrequest",
          "text": "Chainlink.Request"
        },
        {
          "depth": 3,
          "slug": "attributes",
          "text": "Attributes"
        },
        {
          "depth": 3,
          "slug": "methods-2",
          "text": "Methods"
        },
        {
          "depth": 4,
          "slug": "add",
          "text": "add"
        },
        {
          "depth": 4,
          "slug": "addbytes",
          "text": "addBytes"
        },
        {
          "depth": 4,
          "slug": "addint",
          "text": "addInt"
        },
        {
          "depth": 4,
          "slug": "adduint",
          "text": "addUint"
        },
        {
          "depth": 4,
          "slug": "addstringarray",
          "text": "addStringArray"
        },
        {
          "depth": 4,
          "slug": "setbuffer",
          "text": "setBuffer"
        }
      ],
      "url": "/any-api/api-reference",
      "section": "ethereum",
      "content": "\r\n:::note[ API reference for `ChainlinkClient` [contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol).]\r\n\r\n`ChainlinkClient` contracts can communicate with legacy `Oracle` [contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.4/Oracle.sol) or `Operator` [contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n## Index\r\n\r\n### Methods\r\n\r\n| Name                                                          | Description                                                                                                                                                                                                                        |\r\n| :------------------------------------------------------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [setChainlinkOracle](#setchainlinkoracle)                     | Sets the stored address for the oracle contract                                                                                                                                                                                    |\r\n| [setChainlinkToken](#setchainlinktoken)                       | Sets the stored address for the LINK token                                                                                                                                                                                         |\r\n| [buildChainlinkRequest](#buildchainlinkrequest)               | Instantiates a Request object with the required parameters                                                                                                                                                                         |\r\n| [buildOperatorRequest](#buildoperatorrequest)                 | Instantiates a Request object with the required parameters. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol)                       |\r\n| [sendChainlinkRequest](#sendchainlinkrequest)                 | Sends the request payload to the stored address stored as chainlinkOracleAddress                                                                                                                                                   |\r\n| [sendChainlinkRequestTo](#sendchainlinkrequestto)             | Sends a request to the oracle address specified                                                                                                                                                                                    |\r\n| [sendOperatorRequest](#sendoperatorrequest)                   | Sends the request payload to the stored address stored as chainlinkOracleAddress. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) |\r\n| [sendOperatorRequestTo](#sendoperatorrequestto)               | Sends a request to the oracle address specified. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol)                                  |\r\n| [validateChainlinkCallback](#validatechainlinkcallback)       | Secures the fulfillment callback to make sure it is only called by permissioned senders                                                                                                                                            |\r\n| [addChainlinkExternalRequest](#addchainlinkexternalrequest)   | Allows a Chainlinked contract to track unfulfilled requests that it hasn't created itself                                                                                                                                          |\r\n| [cancelChainlinkRequest](#cancelchainlinkrequest)             | Cancels Chainlink requests attempting to contact an unresponsive node                                                                                                                                                              |\r\n| [useChainlinkWithENS](#usechainlinkwithens)                   | Looks up the addresses of the LINK token and Oracle contract through ENS                                                                                                                                                           |\r\n| [updateChainlinkOracleWithENS](#updatechainlinkoraclewithens) | Updates the stored oracle address with the latest address resolved through ENS                                                                                                                                                     |\r\n| [chainlinkTokenAddress](#chainlinktokenaddress)               | Returns the stored address of the LINK token                                                                                                                                                                                       |\r\n| [chainlinkOracleAddress](#chainlinkoracleaddress)             | Returns the stored address of the oracle contract                                                                                                                                                                                  |\r\n\r\n### Events\r\n\r\n| Name                                      | Description                                                                  |\r\n| :---------------------------------------- | ---------------------------------------------------------------------------- |\r\n| [ChainlinkRequested](#chainlinkrequested) | Emitted from a Chainlinked contract when a request is sent to an oracle      |\r\n| [ChainlinkFulfilled](#chainlinkfulfilled) | Emitted from a Chainlinked contract when a request is fulfilled by an oracle |\r\n| [ChainlinkCancelled](#chainlinkcancelled) | Emitted from a Chainlinked contract when a request is cancelled              |\r\n\r\n### Modifiers\r\n\r\n| Name                                                      | Description                                                                                                                                              |\r\n| :-------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [recordChainlinkFulfillment](#recordchainlinkfulfillment) | Used on fulfillment callbacks to ensure that the caller and requestId are valid. This is the modifier equivalent of the method validateChainlinkCallback |\r\n\r\n### Constants\r\n\r\n| Name                                    | Description                                                                       |\r\n| :-------------------------------------- | --------------------------------------------------------------------------------- |\r\n| [LINK_DIVISIBILITY](#link_divisibility) | Helper uint256 to represent the divisibility of a LINK token. Equivalent to 10^18 |\r\n\r\n### Structs\r\n\r\n| Name                                   | Description                                                          |\r\n| :------------------------------------- | -------------------------------------------------------------------- |\r\n| [Chainlink.Request](#chainlinkrequest) | All of the parameters that can be passed over in a Chainlink request |\r\n\r\n## Methods\r\n\r\nBelow you'll find each helper explained in greater detail alongside respective implementation examples to help you leverage these methods once you start building your own Chainlinked contract.\r\n\r\nAfter the function signature and a short description, two code examples are provided, one focusing on the exact usage of the method and one where the helper is presented in the context of a full contract.\r\n\r\n### setChainlinkOracle\r\n\r\n```solidity\r\nfunction setChainlinkOracle(\r\n  address _oracle\r\n)\r\n```\r\n\r\nSets a private storage variable provided for convenience if your contract only needs to talk to one oracle and you do not want to specify it on every request. Once an oracle is set with `setChainlinkOracle` that is the address used with [sendChainlinkRequest](#sendchainlinkrequest).\r\n\r\nRetrieve the oracle address using [chainlinkOracleAddress](#chainlinkoracleaddress). These getters and setters are provided to enforce that changes to the oracle are explicitly made in the code.\r\n\r\n```solidity example\r\nconstructor(address _oracle)\r\n{\r\n  setChainlinkOracle(_oracle);\r\n}\r\n```\r\n\r\n### setChainlinkToken\r\n\r\n```solidity example\r\nsetChainlinkToken(\r\n  address _link\r\n)\r\n```\r\n\r\nSets the stored address for the LINK token which is used to send requests to Oracles. There are different token addresses on different network. See [LINK Token Contracts](/docs/link-token-contracts/) for the address of the LINK token on the network you're deploying to.\r\n\r\n```solidity example\r\nconstructor(address _link)\r\n  public\r\n{\r\n  setChainlinkToken(_link);\r\n}\r\n```\r\n\r\n### buildChainlinkRequest\r\n\r\n:::note[ Use `buildOperatorRequest` [function](#buildoperatorrequest) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity example\r\nfunction buildChainlinkRequest(\r\n    bytes32 _jobId,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunctionSignature\r\n) returns (Chainlink.Request memory request)\r\n```\r\n\r\nInstantiates a Request from the Chainlink contract. A [Request](#chainlinkrequest) is a struct which contains the necessary parameters to be sent to the oracle contract. The `buildChainlinkRequest` function takes an ID, which can be a [Job ID](/docs/jobs/), a callback address to receive the resulting data, and a callback function signature to call on the callback address.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  bytes32 jobId = \"493610cff14346f786f88ed791ab7704\";\r\n  bytes4 selector = this.myCallback.selector;\r\n  // build a request that calls the myCallback function defined\r\n  //   below by specifying the address of this contract and the function\r\n  //   selector of the myCallback\r\n  Chainlink.Request memory request = buildChainlinkRequest(\r\n    jobId,\r\n    address(this),\r\n    selector);\r\n}\r\n```\r\n\r\n### buildOperatorRequest\r\n\r\n:::note[ This function is similar to `buildChainlinkRequest`[function](#buildchainlinkrequest). One major difference is that `buildOperatorRequest` does not allow setting up the address of the callback. The callback address is set to the address of the calling contract.]\r\nIt is recommended to use `buildOperatorRequest` but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity example\r\nfunction buildOperatorRequest(\r\n    bytes32 _jobId,\r\n    bytes4 _callbackFunctionSignature\r\n) returns (Chainlink.Request memory request)\r\n```\r\n\r\nInstantiates a _Request_ from the Chainlink contract. A [Request](#chainlinkrequest) is a struct that contains the necessary parameters to be sent to the oracle contract. The `buildOperatorRequest` function takes an ID, which can be a [Job ID](/docs/jobs/), and a callback function signature to call on the calling contract address.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  bytes32 jobId = \"493610cff14346f786f88ed791ab7704\";\r\n  bytes4 selector = this.myCallback.selector;\r\n  // build a request that calls the myCallback function defined\r\n  //   below by specifying the function selector of myCallback\r\n  Chainlink.Request memory request = buildOperatorRequest(\r\n    jobId,\r\n    selector);\r\n}\r\n```\r\n\r\n### sendChainlinkRequest\r\n\r\n:::note[ Use `sendOperatorRequest` [function](#sendoperatorrequest) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequest(\r\n    Chainlink.Request memory _req,\r\n    uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSends the request payload to the stored oracle address. It takes a [Chainlink.Request](#chainlinkrequest) and the amount of LINK to send amount as parameters. The request is serialized and calls `oracleRequest` on the address stored in `chainlinkOracleAddress` via the LINK token's `transferAndCall` method.\r\n\r\n`sendChainlinkRequest` returns the ID of the request. If your application needs to, your contract can store that ID, but you don't need to. The ChainlinkClient helpers will store the ID under the hood, along with the oracle address, and use them when you call `recordChainlinkFulfillment` in your callback function to make sure only that the address you want can call your Chainlink callback function.\r\n\r\n`sendChainlinkRequest` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID, if you would like to use it in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.callback.selector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY / 10; // Equivalent to 0.1 LINK\r\n\r\n  // send the request that you just built\r\n  sendChainlinkRequest(request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendChainlinkRequestTo\r\n\r\n:::note[ Use `sendOperatorRequestTo` [function](#sendoperatorrequestto) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequestTo(\r\n  address _oracle,\r\n  Chainlink.Request memory _req,\r\n  uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSimilar to [sendChainlinkRequest](#sendchainlinkrequest), `sendChainlinkRequestTo` sends a [Request](#chainlinkrequest) but allows the target oracle to be specified. It requires an address, a Request, and an amount, and returns the `requestId`. This allows a requesting contract to create and track requests sent to multiple oracle contract addresses.\r\n\r\n`sendChainlinkRequestTo` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID, if you would like to use it in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPriceFrom(address _oracle)\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.callback.callbackSelector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY; // = 1 LINK\r\n\r\n  // send the request that you just built to a specified oracle\r\n  sendChainlinkRequestTo(_oracle, request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendOperatorRequest\r\n\r\n:::note[ This function is similar to `sendChainlinkRequest`[function](#sendchainlinkrequest).]\r\nIt is recommended to use `sendOperatorRequest` but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendOperatorRequest(\r\n    Chainlink.Request memory _req,\r\n    uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nThe `sendOperatorRequest` function sends the request payload to the stored oracle address. It takes a [Chainlink.Request](#chainlinkrequest) and the amount of LINK to send amount as parameters. The request is serialized and calls `operatorRequest` on the address stored in `chainlinkOracleAddress` using the LINK token's `transferAndCall` method.\r\n\r\n`sendOperatorRequest` returns the ID of the request. Optionally, your contract can store the ID if your application needs it. The `ChainlinkClient` helpers store the ID and the oracle address and use them when you call `recordChainlinkFulfillment` in your callback function. This ensures that only the specified address can call your Chainlink callback function.\r\n\r\n`sendOperatorRequest` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID that you can use in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildOperatorRequest(jobId, this.callback.selector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY / 10; // Equivalent to 0.1 LINK\r\n\r\n  // send the request that you just built\r\n  sendOperatorRequest(request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendOperatorRequestTo\r\n\r\n:::note[ This function is similar to `sendChainlinkRequestTo`[function](#sendchainlinkrequestto).]\r\nIt is recommended to use `sendOperatorRequestTo`, but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequestTo(\r\n  address _oracle,\r\n  Chainlink.Request memory _req,\r\n  uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSimilar to [sendOperatorRequest](#sendoperatorrequest), `sendOperatorRequestTo` sends a [Request](#chainlinkrequest) but allows the target oracle to be specified. It requires an address, a Request, and an amount, and returns the `requestId`. This allows a requesting contract to create and track requests sent to multiple oracle contract addresses.\r\n\r\n`sendOperatorRequestTo` emits a [ChainlinkRequested](#chainlinkrequested) event containing a request ID that you can use in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPriceFrom(address _oracle)\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildOperatorRequest(jobId, this.callback.callbackSelector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY; // = 1 LINK\r\n\r\n  // send the request that you just built to a specified oracle\r\n  sendOperatorRequestTo(_oracle, request, paymentAmount);\r\n}\r\n```\r\n\r\n### validateChainlinkCallback\r\n\r\n```solidity\r\nfunction validateChainlinkCallback(\r\n    bytes32 _requestId\r\n)\r\n```\r\n\r\nUsed on fulfillment callbacks to ensure that the caller and `requestId` are valid. They protect ChainlinkClient callbacks from being called by malicious callers. `validateChainlinkCallback` allows for a request to be called\r\n\r\nThis is the method equivalent of the modifier `recordChainlinkFulfillment`. Either `validateChainlinkCallback` or `recordChainlinkFulfillment` should be used on all fulfillment functions to ensure that the caller and `requestId` are valid. Use the modifier or the method, not both.\r\n\r\n`validateChainlinkCallback` emits a [ChainlinkFulfilled](#chainlinkfulfilled) event.\r\n\r\n```solidity example\r\nfunction myCallback(bytes32 _requestId, uint256 _price)\r\n  public\r\n{\r\n  validateChainlinkCallback(_requestId);\r\n  currentPrice = _price;\r\n}\r\n```\r\n\r\n:::caution[ Do not call multiple times]\r\n\r\nDo not call `validateChainlinkCallback` multiple times. The nature of validating the callback is to ensure the response is only received once and not replayed. Calling a second time with the same method ID will trigger a revert. Similarly, your callback should validate using either `validateChainlinkCallback` or `recordChainlinkFulfillment`, not both.\r\n\r\n:::\r\n\r\n### addChainlinkExternalRequest\r\n\r\n```solidity\r\nfunction addChainlinkExternalRequest(\r\n  address _oracle,\r\n  bytes32 _requestId\r\n)\r\n```\r\n\r\n`addChainlinkExternalRequest` allows a Chainlink contract to track unfulfilled requests that it hasn't created itself. For example, contract A creates a request and sets the callback for contract B. Contract B needs to know about the request created by contract A so that it can validate the callback when it is executed.\r\n\r\n```solidity example\r\nfunction expectResponseFor(bytes32 _requestId)\r\n  public\r\n{\r\n  addChainlinkExternalRequest(chainlinkOracleAddress(), _requestId);\r\n}\r\n```\r\n\r\n:::caution[ Be careful adding external requests]\r\n\r\nBeing able to change a request means that you can change the data fed into a contract. Permissioning someone to make external requests can allow them to change the outcome of your contract. You should be sure to make sure that they are a trusted to do so. If they are not trusted to do so, you should put the request making logic on-chain where it is auditable and tamperproof.\r\n\r\n:::\r\n\r\n### cancelChainlinkRequest\r\n\r\n```solidity\r\nfunction cancelChainlinkRequest(bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunc,\r\n    uint256 _expiration\r\n)\r\n```\r\n\r\nIn case an oracle node does not respond, it may be necessary to retrieve the LINK used to pay for the unfulfilled request. The `cancelChainlinkRequest` will send the cancel request to the address used for the request, which transfers the amount of LINK back to the requesting contract, and delete it from the tracked requests.\r\n\r\nThe default expiration for a request is five minutes, after which it can be cancelled. The cancellation must be sent by the address which was specified as the callback location of the contract.\r\n\r\nFor the sake of efficient gas usage, only a hash of the request's parameters are stored on-chain. In order to validate the terms of the request and that it can be calculated, the request parameters must be provided. Additionally, cancellation must be called by the address which the callback would otherwise have been called on.\r\n\r\n`cancelChainlinkRequest` emits a [ChainlinkCancelled](#chainlinkcancelled) event.\r\n\r\n```solidity example\r\nfunction cancelRequest(\r\n    bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunc,\r\n    uint256 _expiration\r\n) public {\r\n  cancelChainlinkRequest(_requestId, _payment, _callbackFunc, _expiration);\r\n}\r\n```\r\n\r\n### useChainlinkWithENS\r\n\r\n```solidity\r\nfunction useChainlinkWithENS(\r\n  address _ens,\r\n  bytes32 _node\r\n)\r\n```\r\n\r\nAllows a Chainlink contract to store the addresses of the LINK token and oracle contract addresses without supplying the addresses themselves. We use ENS where available to resolve these addresses. It requires the address of the ENS contract and the node (which is a hash) for the domain.\r\n\r\nIf your Oracle provider supports using ENS for rolling upgrades to their oracle contract, once you've pointed your Chainlinked contract to the ENS records then you can update the records using [updateChainlinkOracleWithENS](#updatechainlinkoraclewithens).\r\n\r\n```solidity example\r\naddress constant ROPSTEN_ENS = 0x112234455C3a32FD11230C42E7Bccd4A84e02010;\r\nbytes32 constant ROPSTEN_CHAINLINK_ENS = 0xead9c0180f6d685e43522fcfe277c2f0465fe930fb32b5b415826eacf9803727;\r\n\r\nconstructor(){\r\n  useChainlinkWithENS(ROPSTEN_ENS, ROPSTEN_CHAINLINK_ENS);\r\n}\r\n```\r\n\r\n:::caution[ Updating oracle addresses]\r\n\r\nIf an oracle provider supports listing their oracle on ENS, that provides the added security of being able to update any issues that may arise. The tradeoff here is that by using their ENS record, you are allowing whoever controls that record and the corresponding code it points to. If your contract does this, you must either audit the updated code and make sure it matches [Oracle.sol](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/Oracle.sol) or trust whoever can update the records.\r\n\r\n:::\r\n\r\n### updateChainlinkOracleWithENS\r\n\r\n```solidity\r\nfunction updateChainlinkOracleWithENS()\r\n```\r\n\r\nUpdates the stored oracle contract address with the latest address resolved through the ENS contract. This requires the oracle provider to support listing their address on ENS.\r\n\r\nThis method only works after [useChainlinkWithENS](#usechainlinkwithens) has been called on the contract.\r\n\r\n```solidity example\r\nfunction updateOracleAddressToLatest() public {\r\n  updateChainlinkOracleWithENS();\r\n}\r\n```\r\n\r\n:::caution[ Updating oracle addresses]\r\n\r\nIf an oracle provider supports listing their oracle on ENS, that provides the added security of being able to update any issues that may arise. The tradeoff here is that by using their ENS record, you are allowing whoever controls that record and the corresponding code it points to. If your contract does this, you must either audit the updated code and make sure it matches [Oracle.sol](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.4/Oracle.sol) or trust whoever can update the records.\r\n\r\n:::\r\n\r\n### chainlinkTokenAddress\r\n\r\n```solidity\r\nfunction chainlinkTokenAddress() returns (address)\r\n```\r\n\r\nThe `chainlinkTokenAddress` function is a helper used to return the stored address of the Chainlink token. This variable is protected and so only made available through getters and setters.\r\n\r\n```solidity example\r\nfunction withdrawLink() public {\r\n  LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\r\n\r\n  require(link.transfer(msg.sender, link.balanceOf(address(this))), \"Unable to transfer\");\r\n}\r\n```\r\n\r\n### chainlinkOracleAddress\r\n\r\nThe `chainlinkOracleAddress` function is a helper used to return the stored address of the oracle contract.\r\n\r\n```solidity example\r\nfunction getOracle() public view returns (address) {\r\n  return chainlinkOracleAddress();\r\n}\r\n\r\n```\r\n\r\n## Events\r\n\r\n### ChainlinkRequested\r\n\r\n```solidity\r\nevent ChainlinkRequested(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [sendChainlinkRequest](#sendchainlinkrequest) and [sendChainlinkRequestTo](#sendchainlinkrequestto) are called. Includes the request ID as an event topic.\r\n\r\n### ChainlinkFulfilled\r\n\r\n```solidity\r\nevent ChainlinkFulfilled(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [validateChainlinkCallback](#validatechainlinkcallback) or [recordChainlinkFulfillment](#recordchainlinkfulfillment) are called. Includes the request ID as an event topic.\r\n\r\n### ChainlinkCancelled\r\n\r\n```solidity\r\nevent ChainlinkCancelled(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [cancelChainlinkRequest](#cancelchainlinkrequest) is called. Includes the request ID as an event topic.\r\n\r\n## Constants\r\n\r\n### LINK_DIVISIBILITY\r\n\r\n`LINK_DIVISIBILITY` is a uint256 constant to represent one whole unit of the LINK token (1000000000000000000). It can be used with another value to specify payment in an easy-to-read format, instead of hardcoding magic numbers.\r\n\r\n```solidity example\r\nuint256 constant private ORACLE_PAYMENT = 100 * LINK_DIVISIBILITY; // = 100 LINK\r\n```\r\n\r\n## Modifiers\r\n\r\n### recordChainlinkFulfillment\r\n\r\n`recordChainlinkFulfillment` is used on fulfillment callbacks to ensure that the caller and `requestId` are valid. This is the method equivalent of the method `validateChainlinkCallback`.\r\n\r\nEither `validateChainlinkCallback` or `recordChainlinkFulfillment` should be used on all Chainlink callback functions to ensure that the sender and `requestId` are valid. They protect ChainlinkClient callbacks from being called by malicious callers. Do not call both of them, or your callback may revert before you can record the reported response.\r\n\r\n```solidity example\r\nfunction myCallback(bytes32 _requestId, uint256 _price)\r\n  public\r\n  recordChainlinkFulfillment(_requestId) // always validate callbacks\r\n{\r\n  currentPrice = _price;\r\n}\r\n```\r\n\r\n## Chainlink.Request\r\n\r\n```solidity\r\nlibrary Chainlink {\r\n  struct Request {\r\n    bytes32 id;\r\n    address callbackAddress;\r\n    bytes4 callbackFunctionId;\r\n    uint256 nonce;\r\n    Buffer.buffer buf;\r\n  }\r\n}\r\n```\r\n\r\nThe Chainlink Request struct encapsulates all of the fields needed for a Chainlink request and its corresponding response callback.\r\n\r\nThe Chainlink protocol aims to be flexible and not restrict application developers. The Solidity Chainlink Request model is a great example of that. It is exceptionally flexible, given the limitations of Solidity. The request can contain an arbitrary amount of keys and values to be passed off-chain to the oracles for each request. It does so by converting the parameters into CBOR, and then storing them in a buffer. This allows for any number of parameters all of different types to be encoded on-chain.\r\n\r\nThe request's ID is generated by hashing the sender's address and the request's nonce. This scheme ensures that only the requester can generate their request ID, and no other contract can trigger a response from an oracle with that ID. New requests whose IDs match an unfulfilled request ID will not be accepted by the oracle.\r\n\r\n:::caution[ Intended for memory]\r\n\r\nThe Request object was intended to be stored in memory. If you have a reason to persist the struct in storage, it is recommended that you do so by copying each attribute over and explicitly copying the bytes in the buffer.\r\n\r\n:::\r\n\r\n### Attributes\r\n\r\n| Name               | Description                                                                                             |\r\n| ------------------ | :------------------------------------------------------------------------------------------------------ |\r\n| id                 | Identifier for the request                                                                              |\r\n| callbackAddress    | Address that the response will be sent to upon fulfillment                                              |\r\n| callbackFunctionId | Selector of the function on the callbackAddress that will be invoked with the response upon fulfillment |\r\n| nonce              | Used to generate the request ID                                                                         |\r\n| buf                | Buffer that stores additional user defined parameters as CBOR                                           |\r\n\r\n### Methods\r\n\r\n| Name                              | Description                                                      |\r\n| :-------------------------------- | ---------------------------------------------------------------- |\r\n| [add](#add)                       | Add a string value to the run request parameters                 |\r\n| [addBytes](#addbytes)             | Add a bytes value to the run request parameters                  |\r\n| [addInt](#addint)                 | Add an integer value to the run request parameters               |\r\n| [addUint](#adduint)               | Add an unsigned integer to the run request parameters            |\r\n| [addStringArray](#addstringarray) | Add an array of strings as a value in the run request parameters |\r\n| [setBuffer](#setbuffer)           | Directly set the CBOR of the run request parameters              |\r\n\r\n#### add\r\n\r\n```solidity\r\nfunction add(\r\n  Request memory self,\r\n  string _key,\r\n  string _value\r\n)\r\n```\r\n\r\nAdd a string value to the run request parameters. Commonly used for `get` with jobs using `httpGet` tasks.\r\n\r\n```solidity example\r\nfunction requestEthereumPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.add(\"get\", \"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD,EUR,JPY\");\r\n\r\n  sendChainlinkRequest(req, 1 * LINK_DIVISIBILITY); // =1 LINK\r\n}\r\n```\r\n\r\n#### addBytes\r\n\r\n```solidity\r\nfunction addBytes(\r\n  Request memory self,\r\n  string _key,\r\n  bytes _value\r\n)\r\n```\r\n\r\nAdd a CBOR bytes type value to the run request parameters.\r\n\r\n```solidity example\r\nfunction requestEmojiPopularity(bytes _unicode)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addBytes(\"emojiUnicode\", _unicode);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\nNote that this can also be used as a workaround to pass other data types like arrays or addresses. For instance, to add an _address_, one would first encode it using `abi.encode` then pass the result to `addBytes`:\r\n\r\n```solidity\r\nChainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\nreq.addBytes(\"address\", abi.encode(msg.sender)); // msg.sender used in this example. Replace it with your address\r\n\r\n```\r\n\r\n#### addInt\r\n\r\n```solidity\r\nfunction addInt(\r\n  Request memory self,\r\n  string _key,\r\n  int256 _value\r\n)\r\n```\r\n\r\nAdd a CBOR signed integer type value to the run request parameters. Commonly used with the `times` parameter of any job using a `multiply` task.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addInt(\"times\", 100);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\n#### addUint\r\n\r\n```solidity\r\nfunction addUint(\r\n  Request memory self,\r\n  string _key,\r\n  uint256 _value\r\n)\r\n```\r\n\r\nAdd a CBOR unsigned integer type value to the run request parameters. Commonly used with the `times` parameter of any job using a `multiply` task.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addUint(\"times\", 100);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\n#### addStringArray\r\n\r\n```solidity\r\nfunction addStringArray(\r\n  Request memory self,\r\n  string _key,\r\n  string[] memory _values\r\n)\r\n```\r\n\r\nAdd a CBOR array of strings to the run request parameters. Commonly used with the `path` parameter for any job including a `jsonParse` task.\r\n\r\n```solidity example\r\nfunction requestPrice(string _currency)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(JOB_ID, this, this.myCallback.selector);\r\n  string[] memory path = new string[](2);\r\n  path[0] = _currency;\r\n  path[1] = \"recent\";\r\n\r\n  // specify templated fields in a job specification\r\n  req.addStringArray(\"path\", path);\r\n\r\n  sendChainlinkRequest(req, PAYMENT);\r\n}\r\n```\r\n\r\n#### setBuffer\r\n\r\n```solidity\r\nfunction setBuffer(\r\n  Request memory self,\r\n  bytes _data\r\n)\r\n```\r\n\r\nSet the CBOR payload directly on the request object, avoiding the cost of encoding the parameters in CBOR. This can be helpful when reading the bytes from storage or having them passed in from off-chain where they were pre-encoded.\r\n\r\n```solidity example\r\nfunction requestPrice(bytes _cbor)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(JOB_ID, this, this.myCallback.selector);\r\n\r\n  req.setBuffer(_cbor);\r\n\r\n  sendChainlinkRequest(req, PAYMENT);\r\n}\r\n```\r\n\r\n:::caution[ Be careful setting the request buffer directly]\r\n\r\nMoving the CBOR encoding logic off-chain can save some gas, but it also opens up the opportunity for people to encode parameters that not all parties agreed to. Be sure that whoever is permissioned to call `setBuffer` is trusted or auditable.\r\n\r\n:::\r\n"
    },
    {
      "title": "Google Weather Oracle",
      "headings": [
        {
          "depth": 2,
          "slug": "parameters-and-external-adapters-details",
          "text": "Parameters and External Adapters Details"
        },
        {
          "depth": 2,
          "slug": "chainlink-network-details",
          "text": "Chainlink Network Details"
        },
        {
          "depth": 3,
          "slug": "kovan",
          "text": "Kovan"
        },
        {
          "depth": 3,
          "slug": "mainnet",
          "text": "Mainnet"
        },
        {
          "depth": 2,
          "slug": "steps-for-using-this-oracle",
          "text": "Steps For Using This Oracle"
        },
        {
          "depth": 2,
          "slug": "create-your-chainlinked-contract",
          "text": "Create your Chainlinked contract"
        },
        {
          "depth": 2,
          "slug": "jobs",
          "text": "Jobs"
        },
        {
          "depth": 2,
          "slug": "rain-bergen-norway",
          "text": "Rain (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "hail-bergen-norway",
          "text": "Hail (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks-1",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "average-temperature-bergen-norway",
          "text": "Average Temperature (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks-2",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "generic-any-location",
          "text": "Generic (Any Location)"
        },
        {
          "depth": 3,
          "slug": "tasks-3",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "input-parameters",
          "text": "Input Parameters"
        }
      ],
      "url": "/any-api/data-providers/google-weather",
      "section": "ethereum",
      "content": "\r\nYou can use Chainlink to digest weather information using [Google Cloud Public Datasets](https://cloud.google.com/public-datasets). We have a sample brownie repo showing how to interact with the contracts available in our [gcp-weather brownie repo](https://github.com/PatrickAlphaC/gcp-weather). More information on this oracle can be found in the following [Google Cloud article](https://medium.com/google-cloud/hedging-against-bad-weather-with-cloud-datasets-and-blockchain-oracles-7ba3e0150304).\r\n\r\n## Parameters and External Adapters Details\r\n\r\nThese jobs are using a custom external adapter. Please see the [Google weather external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather) to see information about parameters that can be used with these jobs.\r\n\r\n## Chainlink Network Details\r\n\r\nYou will need to use the following LINK token address, oracle address, and JobSpec IDs in order to create the Chainlink request to this oracle.\r\n\r\n### Kovan\r\n\r\n| Parameter                 | Value                                                                                                                       |\r\n| :------------------------ | :-------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID`            | `42`                                                                                                                        |\r\n| ChainLink Token Address   | [0xa36085F69e2889c224210F603D836748e7dC0088](\"https://kovan.etherscan.io/token/0xa36085F69e2889c224210F603D836748e7dC0088\") |\r\n| Oracle                    | `0xbe79b86e93d09d6dda636352a06491ec8e7bdf12`                                                                                |\r\n| Rain JobID                | `3c7838a5810c4aeea140134d10a6d0c3`                                                                                          |\r\n| Hail JobID                | `7633f5d84840486a961ee281f96378f7`                                                                                          |\r\n| Average Temperature JobID | `93b72982721945268cf3ba75894f773e`                                                                                          |\r\n| Generic JobID             | `c414aab46673419697cad866b33c7921`                                                                                          |\r\n| Fee                       | `100000000000000000` (0.1 LINK)                                                                                             |\r\n| Node Operator             | `0x4ABabAA8Cb1f340443d90CbAd98faBe394D1Cf24`                                                                                |\r\n\r\n### Mainnet\r\n\r\n| Parameter                 | Value                                                                                                                 |\r\n| :------------------------ | :-------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID`            | `1`                                                                                                                   |\r\n| ChainLink Token Address   | [0x514910771af9ca656af840dff83e8264ecf986ca](\"https://etherscan.io/token/0x514910771af9ca656af840dff83e8264ecf986ca\") |\r\n| Oracle                    | `0x92c08A635C7525505123F0F8e327C6Fa66E09a18`                                                                          |\r\n| Rain JobID                | `e9c41111b74f454695abd471806d9c6f`                                                                                    |\r\n| Hail JobID                | `941cb4bdd6e746cd933a37c8e92f2f98`                                                                                    |\r\n| Average Temperature JobID | `c6f853860b4f479fbda0910350d695b6`                                                                                    |\r\n| Generic JobID             | `0606a7c2811e4dbab659be400ecd41f9`                                                                                    |\r\n| Fee                       | `1000000000000000000` (1 LINK)                                                                                        |\r\n| Node Operator             | `0x6767eDa1C1d0070cEbdFE1CB3a55e4B63FA02C3E`                                                                          |\r\n\r\n## Steps For Using This Oracle\r\n\r\n- Write and deploy your contract using the network details above.\r\n- Fund it with [LINK](/docs/link-token-contracts/)\r\n- Call your request method\r\n\r\n## Create your Chainlinked contract\r\n\r\nImport `ChainlinkClient.sol` into your contract so you can inherit the `ChainlinkClient` behavior. Below is a sample that can call the hail, rain, and average temperature jobs to fetch weather data from Bergen, Norway.\r\n\r\n::solidity-remix[samples/DataProviders/GoogleWeather.sol]\r\n\r\n## Jobs\r\n\r\n## Rain (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters:\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Point\",\r\n          \"coordinates\": [5.325622558593749, 60.3887552979679]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `multiply`: Multiples the output - set to `1000000000000000000`\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Hail (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Polygon\",\r\n          \"coordinates\": [\r\n            {\r\n              \"0\": [5.2796173095703125, 60.40673218057448],\r\n              \"1\": [5.164947509765625, 60.383665698324926],\r\n              \"2\": [5.17730712890625, 60.211509994185604],\r\n              \"3\": [5.401153564453124, 60.27694067255946],\r\n              \"4\": [5.6188201904296875, 60.436558668419984],\r\n              \"5\": [5.526123046875, 60.42842688461354],\r\n              \"6\": [5.3002166748046875, 60.5387098888639],\r\n              \"7\": [5.238418579101562, 60.4951151199491],\r\n              \"8\": [5.2796173095703125, 60.40673218057448]\r\n            }\r\n          ]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `ethuint256`: Turns the result into a `uint256`\r\n3. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Average Temperature (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters:\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Polygon\",\r\n          \"coordinates\": [\r\n            {\r\n              \"0\": [5.2796173095703125, 60.40673218057448],\r\n              \"1\": [5.164947509765625, 60.383665698324926],\r\n              \"2\": [5.17730712890625, 60.211509994185604],\r\n              \"3\": [5.401153564453124, 60.27694067255946],\r\n              \"4\": [5.6188201904296875, 60.436558668419984],\r\n              \"5\": [5.526123046875, 60.42842688461354],\r\n              \"6\": [5.3002166748046875, 60.5387098888639],\r\n              \"7\": [5.238418579101562, 60.4951151199491],\r\n              \"8\": [5.2796173095703125, 60.40673218057448]\r\n            }\r\n          ]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `multiply`: Multiples the output - set to `1000000000000000000`\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Generic (Any Location)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n2. `multiply`: Multiples the output\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Input Parameters\r\n\r\n| Required? |    Name    |                                                                                    Description                                                                                     |                                                                  Options                                                                  | Defaults to |\r\n| :-------: | :--------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------------------------------------: | :---------: |\r\n|    ✅     | `geoJson`  |                                                                A GeoJSON object containing the geographies to query                                                                |                                                                                                                                           |             |\r\n|    ✅     | `dateFrom` |                                                             The date to query data from (inclusive) in ISO 8601 format                                                             |                                                                                                                                           |             |\r\n|    ✅     |  `dateTo`  |                                                              The date to query data to (inclusive) in ISO 8601 format                                                              |                                                                                                                                           |             |\r\n|    ✅     |  `method`  |                                                                      Which method to use to aggregate data in                                                                      |                                                        `AVG`, `SUM`, `MIN`, `MAX`                                                         |             |\r\n|    ✅     |  `field`   |                                                                          Which column to fetch data from                                                                           | [Data available](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather#data-available) |             |\r\n|           |  `units`   | What unit system to return the result in ([conversions](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather#unit-conversion)) |                                                           `imperial`, `metric`                                                            | `imperial`  |\r\n\r\nPlease see the [Google weather external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather) to see information about parameters that can be used with these jobs.\r\n"
    },
    {
      "title": "Data Provider Nodes",
      "headings": [
        {
          "depth": 2,
          "slug": "data-provider-nodes-list",
          "text": "Data Provider Nodes List"
        }
      ],
      "url": "/any-api/data-providers/introduction",
      "section": "ethereum",
      "content": "\r\nChainlink has facilitated the launch of several new oracle data services that allow dApps to access rich data from external data sources. These oracles expand the types of data available on Chainlink and include data and use cases that do not fit into the traditional Chainlink feed model.\r\n\r\nData provider nodes allow customizable, on-demand API calls and the ability to deliver different data points on each request. This enables use cases where each requestor requires a different piece of data.\r\n\r\n:::caution[Select quality data feeds]\r\nBe aware of the quality of the data that you use. [Learn more about making responsible data quality decisions.](/docs/selecting-data-feeds/)\r\n:::\r\n\r\n## Data Provider Nodes List\r\n\r\n| Data Category | Name                                                                                             | Supported Blockchains        |\r\n| ------------- | ------------------------------------------------------------------------------------------------ | ---------------------------- |\r\n| Crypto        | [Kraken Rates Oracle Node](/docs/any-api/data-providers/kraken-rates/)                           | Ethereum                     |\r\n| DNS Lookup    | [DNS Ownership Oracle](/docs/any-api/data-providers/dns-ownership/)                              | Ethereum, BNB Chain, Polygon |\r\n| Equities      | [dxFeed Price Oracle](https://market.link/nodes/dxFeed/integrations)                             | Ethereum, BNB Chain          |\r\n| Equities      | [Finage Global Market Data Oracle](https://market.link/nodes/Finage/integrations)                | Ethereum, BNB Chain          |\r\n| Equities      | [Tiingo EOD Stock Price Oracle](https://market.link/nodes/Tiingo/integrations)                   | Ethereum, BNB Chain          |\r\n| Equities      | [TraderMade Real Time CFD and Index Oracle](https://market.link/nodes/TraderMade/integrations)   | Ethereum, BNB Chain          |\r\n| Equities      | [Twelve Data Real Time Asset Price Oracle](https://market.link/nodes/Twelve%20Data/integrations) | Ethereum, Polygon            |\r\n| Equities      | [T3 Index Node](https://market.link/nodes/Twelve%20Data/integrations)                            | Ethereum, BNB Chain          |\r\n| Identity      | [CipherTrace DeFi Compli Oracle](https://market.link/nodes/CipherTrace/integrations)             | Ethereum, BNB Chain, Polygon |\r\n| Real Estate   | [ProspectNow Real Estate Data Oracle](https://market.link/nodes/ProspectNow/integrations)        | Ethereum, Polygon            |\r\n| Real Estate   | [SmartZip Real Estate AVM Oracle](https://market.link/nodes/SmartZip/integrations)               | Ethereum, BNB Chain          |\r\n| Sports        | [SportMonks Sports Data Oracle](https://market.link/nodes/SportMonks/integrations)               | Ethereum, BNB Chain          |\r\n| Sports        | [SportsDataIO Oracle](https://market.link/nodes/SportsDataIO/integrations)                       | Ethereum, Polygon            |\r\n| Sports        | [TheRunDown Oracle Node](https://market.link/nodes/TheRundown/integrations)                      | Ethereum, Polygon            |\r\n| Weather       | [Google Weather Oracle](/docs/any-api/data-providers/google-weather/)                            | Ethereum                     |\r\n"
    },
    {
      "title": "Find Existing Jobs",
      "headings": [
        {
          "depth": 2,
          "slug": "introduction-to-oracles",
          "text": "Introduction to Oracles"
        },
        {
          "depth": 2,
          "slug": "oracle-jobs-and-types-of-data-available",
          "text": "Oracle Jobs and Types of Data Available"
        },
        {
          "depth": 3,
          "slug": "data-provider-nodes",
          "text": "Data provider nodes"
        },
        {
          "depth": 3,
          "slug": "find-a-job",
          "text": "Find a job"
        },
        {
          "depth": 4,
          "slug": "community-node-operators",
          "text": "Community node operators"
        },
        {
          "depth": 4,
          "slug": "alternatives-on-testnets",
          "text": "Alternatives on testnets"
        }
      ],
      "url": "/any-api/find-oracle",
      "section": "ethereum",
      "content": "\r\nThis page explains how to find an existing Oracle Job to suit the needs of your API call.\r\n\r\n## Introduction to Oracles\r\n\r\nOracles enable smart contracts to retrieve data from the outside world. Each oracle node can be configured to perform a wide range of tasks depending on the adapters it supports. For example, if your contract needs to make an HTTP GET request, it needs to use an oracle that supports the HTTP GET adapter.\r\n\r\nOracles [jobs](/docs/jobs/) can be specialized even further by implementing the configuration using [External Adapters](/docs/external-adapters/). For example, an Oracle job could implement URL, parameters, and conversion to Solidity compatible data, to retrieve a very specific piece of data from a specific API endpoint. This process is demonstrated in [Make an Existing Job Request](/docs/any-api/get-request/examples/existing-job-request/).\r\n\r\n## Oracle Jobs and Types of Data Available\r\n\r\n### Data provider nodes\r\n\r\nChainlink has facilitated the launch of several oracle data services that allow dApps to access rich data from external data sources through provider-owned nodes. The full list of such provider nodes is available here:\r\n\r\n- [Data Provider Node List](/docs/any-api/data-providers/introduction/#data-provider-nodes-list)\r\n\r\n### Find a job\r\n\r\n#### Community node operators\r\n\r\nTo find an Oracle Job that is pre-configured for your use case and available on the right network, join the [Chainlink operator-requests discord channel](https://discord.gg/eGcxsdZzKR) to directly communicate with community node operators.\r\n\r\n#### Alternatives on testnets\r\n\r\nOn testnets, several alternatives are provided:\r\n\r\n- The Chainlink Development Relations team maintains [Testnet Oracles](/docs/any-api/testnet-oracles/) that you can use to test implementations. If you don't find a suitable job for your needs, join [Chainlink operator-requests discord channel](https://discord.gg/eGcxsdZzKR) or check the other alternatives below.\r\n- You can also deploy testnet nodes and external adapters on [naas.link](https://naas.link/). You must write your own [jobs](/docs/jobs/): To help you get started, each [ANY API tutorial](/docs/any-api/get-request/introduction/) has a corresponding job attached to it. **Note:** [naas.link](https://naas.link) is managed by [linkpool.io](https://linkpool.io/). Refer to the contact section at the bottom of the page for more assistance.\r\n- Run your own testnet nodes as explained [here](/docs/running-a-chainlink-node/). You must write your own [jobs](/docs/jobs/): To help you get started, each [ANY API tutorial](/docs/any-api/get-request/introduction/) has a corresponding job attached to it.\r\n"
    },
    {
      "title": "Array Response",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/array-response",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API, that returns a _json_ array, from a smart contract, using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle and then receive the needed data from the array.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Call an API that returns a JSON array.\r\n- Fetch a specific information from the response.\r\n\r\n[Coingecko _GET /coins/markets/_ API](https://www.coingecko.com/en/api/documentation) returns a list of coins and their market data such as price, market cap, and volume. To check the response, you can directly paste the following URL in your browser `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": \"bitcoin\",\r\n    \"symbol\": \"btc\",\r\n    \"name\": \"Bitcoin\",\r\n    \"image\": \"https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579\",\r\n    \"current_price\": 42097,\r\n    \"market_cap\": 802478449872,\r\n    ...\r\n  },\r\n  {\r\n    ...\r\n  }\r\n]\r\n```\r\n\r\nFetch the _id_ of the first element. To consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/FetchFromArray.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/FetchFromArray.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the _id_ is a _string_ data type, so you must call a job that calls an API and returns a _string_. We will be using a generic **_GET>string_** job that can be found [here](/docs/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `id` function to confirm that the `id` state variable is not set.\r\n\r\n1. Run the `requestFirstId` function. This builds the `Chainlink.Request` using the correct parameters. The `req.add(\"path\", \"0,id\")` request parameter tells the oracle node to fetch the id at index 0 of the array returned by the GET request. It uses [JSONPath expression](https://jsonpath.com/) with comma `,` delimited string for nested objects, for example: `'0,id'`.\r\n\r\n1. After few seconds, call the `id` function. You should get a non-empty response: _bitcoin_\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Existing Job Request",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/existing-job-request",
      "section": "ethereum",
      "description": "Learn how to utilize existing Chainlink external adapters to make calls to APIs from smart contracts.",
      "content": "\r\nUsing an _existing_ Oracle Job makes your smart contract code more succinct. This page explains how to retrieve the gas price from an existing Chainlink job that calls [etherscan gas tracker API](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle).\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nIn [Single Word Response Example](/docs/any-api/get-request/examples/single-word-response/), the example contract code declared which URL to use, where to find the data in the response, and how to convert it so that it can be represented on-chain.\r\n\r\nThis example uses an existing job that is pre-configured to make requests to get [the gas price](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle). Using specialized jobs makes your contracts succinct and more simple.\r\n\r\n[Etherscan gas oracle](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle) returns the current Safe, Proposed and Fast gas prices. To check the response, you can directly paste the following URL in your browser `https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"status\": \"1\",\r\n  \"result\": {\r\n    \"LastBlock\": \"14653286\",\r\n    \"SafeGasPrice\": \"33\",\r\n    \"ProposeGasPrice\": \"33\",\r\n    \"FastGasPrice\": \"35\",\r\n    \"suggestBaseFee\": \"32.570418457\",\r\n    \"gasUsedRatio\": \"0.366502543599508,0.15439818258491,0.9729006,0.4925609,0.999657066666667\"\r\n  }\r\n}\r\n```\r\n\r\nFor this example, we created a job that leverages the [EtherScan External Adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/etherscan) to fetch the _SafeGasPrice_ , _ProposeGasPrice_ and _FastGasPrice_. You can learn more about External Adapters [here](/docs/external-adapters/).\r\nTo consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/GetGasPrice.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/GetGasPrice.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the job is very specific to the use case as it returns the gas prices. You can find the job spec for the Chainlink node [here](/docs/direct-request-existing-job/).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` functions to confirm that the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` state variables are equal to zero.\r\n\r\n1. Run the `requestGasPrice` function. This builds the `Chainlink.Request`. Note how succinct the request is.\r\n\r\n1. After few seconds, call the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` functions. You should get a non-zero responses.\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Large Responses",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/large-responses",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract, using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle and then receive large responses.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Call an API and fetch the response that is an arbitrary-length raw byte data.\r\n\r\n[IPFS](https://docs.ipfs.io/) is a decentralized file system for storing and accessing files, websites, applications, and data. For this example, we stored in IPFS a _JSON_ file that contains arbitrary-length raw byte data. To check the response, directly paste the following URL in your browser: `https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json` Alternatively, run the following command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"image\": \"0x68747470733a2f2f697066732e696f2f697066732f516d5358416257356b716e3259777435444c336857354d736a654b4a4839724c654c6b51733362527579547871313f66696c656e616d653d73756e2d636861696e6c696e6b2e676966\"\r\n}\r\n```\r\n\r\nFetch the value of _image_. To consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/GenericBigWord.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/GenericBigWord.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the _data_ is a _bytes_ data type, so you must call a job that calls an API and returns _bytes_. We will be using a generic **_GET>bytes_** job that can be found [here](/docs/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `data` and `image_url` functions to confirm that the `data` and `image_url` state variables are not set.\r\n\r\n1. Run the `requestBytes` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"get\", \"<url>\")` request parameter provides the oracle node with the [url](https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json) where to fetch the response.\r\n   - The `req.add('path', 'image')` request parameter tells the oracle node how to parse the response.\r\n\r\n1. After few seconds, call the `data` and `image_url` functions. You should get non-empty responses.\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Multi-Variable Responses",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/multi-variable-responses",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract, using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle and then receive multiple responses.\r\nThis is known as **multi-variable** or **multi-word** responses.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Fetch several responses in one single call.\r\n\r\n[Cryptocompare GET /data/price/ API](https://min-api.cryptocompare.com/documentation?key=Price&cat=SingleSymbolPriceEndpoint) returns the current price of any cryptocurrency in any other currency that you need. To check the response, you can directly paste the following URL in your browser `https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"BTC\": 0.07297\r\n}\r\n```\r\n\r\nThe request above shows how to get the price of _ETH_ against _BTC_. Now let say we want the price of _ETH_ against several currencies: _BTC_, _USD_, and _EUR_. Our contract will have to support receiving multiple responses.\r\nTo consume an API with multiple responses, your contract should inherit from [ChainlinkClient](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct called `Chainlink.Request`, which your contract should use to build the API request. The request should include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\nAssume that a user wants to obtain the ETH price quoted against three different currencies: _BTC_ , _USD_ and _EUR_. If they use only a single-word job, it would require three different requests. For a comparison, see the [Single Word Response](/docs/any-api/get-request/examples/single-word-response/) example. To make these requests more efficient, use multi-word responses to do it all in a single request as shown in the following example:\r\n\r\n::solidity-remix[samples/APIRequests/MultiWordConsumer.sol]\r\n\r\nTo use this contract:\r\n\r\n1. [Open the contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/MultiWordConsumer.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, you must call a job that is specifically configured to return _ETH_ price against _BTC_, _USD_ and _EUR_. You can find the job spec for the Chainlink node [here](/docs/direct-request-multi-word/).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `btc`, `usd` , and `eur` functions to confirm that the respective `btc`, `usd` , and `eur` state variables are equal to _zero_.\r\n\r\n1. Run the `requestMultipleParameters` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"urlBTC\", \"<cryptocompareETHBTCURL>\")` request parameter provides the oracle node with the [url](https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC) where to fetch the _ETH-BTC_ price. Same logic for `req.add(\"urlEUR\", \"<cryptocompareETHEURURL>\")` and `req.add(\"urlUSD\", \"<cryptocompareETHUSDURL>\")`.\r\n   - THe `req.add('pathBTC', 'BTC')` request parameter tells the oracle node where to fetch the _ETH-BTC_ price in the _json_ response. Same logic for `req.add('pathUSD', 'EUR')` and `req.add('pathEUR', 'USD')`.\r\n     Because you provide the URLs and paths, the `MultiWordConsumer` in the example can call any public API as long as the URLs and paths are correct.\r\n\r\n1. After few seconds, call the `btc`, `usd` , and `eur` functions. You should get a non-zero responses.\r\n   The job spec for the Chainlink node in this example can be found [here](/docs/direct-request-multi-word/).\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Single Word Response",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/single-word-response",
      "section": "ethereum",
      "description": "Learn how to make a GET request to an API from a smart contract, using Chainlink.",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle and receive a single response.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Fetch a single word response in a single call.\r\n\r\nThe [Cryptocompare GET /data/pricemultifull API](https://min-api.cryptocompare.com/documentation?key=Price&cat=multipleSymbolsFullPriceEndpoint) returns the current trading info (price, vol, open, high, low) of any list of cryptocurrencies in any other currency that you need. To check the response, you can directly paste the following URL in your browser `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following example:\r\n\r\n```json\r\n{\r\n  \"RAW\": {\r\n    \"ETH\": {\r\n      \"USD\": {\r\n        \"TYPE\": \"5\",\r\n        \"MARKET\": \"CCCAGG\",\r\n        \"FROMSYMBOL\": \"ETH\",\r\n        \"TOSYMBOL\": \"USD\",\r\n        \"FLAGS\": \"2049\",\r\n        \"PRICE\": 2867.04,\r\n        \"LASTUPDATE\": 1650896942,\r\n        \"MEDIAN\": 2866.2,\r\n        \"LASTVOLUME\": 0.16533939,\r\n        \"LASTVOLUMETO\": 474.375243849,\r\n        \"LASTTRADEID\": \"1072154517\",\r\n        \"VOLUMEDAY\": 195241.78281014622,\r\n        \"VOLUMEDAYTO\": 556240560.4621655,\r\n        \"VOLUME24HOUR\": 236248.94641103,\r\n        ...\r\n}\r\n```\r\n\r\nTo consume an API with multiple responses, your contract must import [ChainlinkClient](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct called `Chainlink.Request`, which your contract should use to build the API request. The request should include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/docs/acquire-link/) and [Fund your contract](/docs/fund-your-contract/)**.\r\n\r\n:::\r\n\r\nAssume that a user wants to call the API above and retrieve only the 24h ETH trading volume from the response.\r\n\r\n::solidity-remix[samples/APIRequests/APIConsumer.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/APIConsumer.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/docs/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/docs/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, you must call a job that is configured to call a public API, parse a number from the response and remove any decimals from it. We are going to use a generic **_GET>uint256_** job that can be found [here](/docs/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/docs/fund-your-contract/) page.\r\n\r\n1. Call the `volume` function to confirm that the `volume` state variable is equal to _zero_.\r\n\r\n1. Run the `requestVolumeData` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"get\", \"<cryptocompareURL>\")` request parameter provides the oracle node with the [URL](https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD) from which to fetch _ETH-USD_ trading info.\r\n   - The `req.add('path', 'RAW,ETH,USD,VOLUME24HOUR')` request parameter tells the oracle node where to fetch the 24h ETH volume in the _json_ response. It uses a [JSONPath expression](https://jsonpath.com/) with comma(,) delimited string for nested objects. For example: `'RAW,ETH,USD,VOLUME24HOUR'`.\r\n   - The `req.addInt('times', timesAmount)` request parameter provides the oracle node with the multiplier `timesAmount` by which the fetched volume is multiplied. Use this to remove any decimals from the volume. **_Note_**: The `times` parameter is mandatory. If the API that you call returns a number without any decimals then provide `1`as `timesAmount`.\r\n     The `APIConsumer` in the example above is flexible enough to call any public API as long as the URL in _get_, _path_, and _timesAmounnt_ are correct.\r\n\r\n1. After few seconds, call the `volume` function. You should get a non-zero response.\r\n\r\n<AnyApiCommonCallout />\r\n"
    },
    {
      "title": "Make a GET Request",
      "headings": [
        {
          "depth": 2,
          "slug": "examples",
          "text": "Examples"
        },
        {
          "depth": 3,
          "slug": "single-word-response",
          "text": "Single Word Response"
        },
        {
          "depth": 3,
          "slug": "multi-variable-responses",
          "text": "Multi-Variable Responses"
        },
        {
          "depth": 3,
          "slug": "fetch-data-from-an-array",
          "text": "Fetch data from an Array"
        },
        {
          "depth": 3,
          "slug": "large-responses",
          "text": "Large Responses"
        },
        {
          "depth": 3,
          "slug": "make-an-existing-job-request",
          "text": "Make an Existing Job Request"
        }
      ],
      "url": "/any-api/get-request/introduction",
      "section": "ethereum",
      "description": "Learn how to make a GET request to an API from a smart contract, using Chainlink.",
      "content": "\r\nThis series of guides explains how to make HTTP GET requests to external APIs from smart contracts, using Chainlink's [Request & Receive Data](/docs/any-api/introduction/) cycle.\r\n\r\n<AnyApiCommonCallout />\r\n\r\n## Examples\r\n\r\n### Single Word Response\r\n\r\nThis [guide](/docs/any-api/get-request/examples/single-word-response/) explains how to make an HTTP GET request and parse the _json_ response to retrieve the value of one single attribute.\r\n\r\n### Multi-Variable Responses\r\n\r\nThis [guide](/docs/any-api/get-request/examples/multi-variable-responses/) explains how to make an HTTP GET request and parse the _json_ response to retrieve the values of multiple attributes.\r\n\r\n### Fetch data from an Array\r\n\r\nThis [guide](/docs/any-api/get-request/examples/api-array-response/) explains how to make an HTTP GET request that returns a _json_ array and parse it to retrieve the target element's value.\r\n\r\n### Large Responses\r\n\r\nThis [guide](/docs/any-api/get-request/examples/large-responses/) explains how to make an HTTP Get request that returns a _json_ containing an arbitrary-length raw byte data and parse it to return the data as _bytes_ data type.\r\n\r\n### Make an Existing Job Request\r\n\r\nThis [guide](/docs/any-api/get-request/examples/existing-job-request/) explains how to call a job that leverages [External adapters](/docs/external-adapters/) and returns the relevant data to the smart contract. This allows building succinct smart contracts that do not need to comprehend the URL or the response format of the target API.\r\n"
    },
    {
      "title": "Introduction to Using Any API",
      "headings": [
        {
          "depth": 2,
          "slug": "getting-started",
          "text": "Getting Started"
        },
        {
          "depth": 3,
          "slug": "requesting-off-chain-data",
          "text": "Requesting Off-chain Data"
        },
        {
          "depth": 3,
          "slug": "building-external-adapters",
          "text": "Building External Adapters"
        }
      ],
      "url": "/any-api/introduction",
      "section": "ethereum",
      "description": "Chainlink provides your smart contract with access to any external API. Learn how to integration any API into your smart contract.",
      "content": "\r\n![Chainlink Any API](/files/8c35025-Request__Receive_Data.png)\r\n\r\nChainlink enables your contracts to access to _any_ external data source through our decentralized oracle network.\r\n\r\nWhether your contract requires sports results, the latest weather, or any other publicly available data, the [Chainlink contract library](https://github.com/smartcontractkit/chainlink/tree/master/contracts) provides the tools required for your contract to consume it.\r\n\r\n<AnyApiCommonPrereqCallout />\r\n\r\n:::note[ Note on Price Feed Data]\r\n\r\nIf your smart contracts need access to price feed data, try using [Chainlink Data Feeds](/docs/using-chainlink-reference-contracts/).\r\n\r\n:::\r\n\r\n## Getting Started\r\n\r\nWe understand making smart contracts compatible with off-chain data adds to the complexity of building smart contracts. We created a framework with minimal requirements, yet unbounded flexibility, so developers can focus more on the functionality of smart contracts rather than what feeds them.\r\n\r\nChainlink’s decentralized oracle network provides smart contracts with the ability to push and pull data, facilitating the interoperability between on-chain and off-chain applications.\r\n\r\n### Requesting Off-chain Data\r\n\r\nOutlined below are multiple ways developers can connect smart contracts to off-chain data feeds. Click a request type to learn more about it:\r\n\r\n| Request Type                                                                                      | Description                                                                                                                                                                                                                                                                            |\r\n| ------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [HTTP GET Single Word Response](/docs/any-api/get-request/examples/single-word-response/)         | This guide explains how to make an HTTP GET request and parse the _json_ response to retrieve the value of one single attribute.                                                                                                                                                       |\r\n| [HTTP GET Multi-Variable Responses](/docs/any-api/get-request/examples/multi-variable-responses/) | This guide explains how to make an HTTP GET request and parse the _json_ response to retrieve the values of multiple attributes.                                                                                                                                                       |\r\n| [HTTP GET Element in Array Response](/docs/any-api/get-request/examples/api-array-response/)      | This guide explains how to make an HTTP GET request that returns a _json_ array and parse it to retrieve the target element's value.                                                                                                                                                   |\r\n| [HTTP GET Large Reponses](/docs/any-api/get-request/examples/large-responses/)                    | This guide explains how to make an HTTP Get request that returns a _json_ containing an arbitrary-length raw byte data and parse it to return the data as _bytes_ data type.                                                                                                           |\r\n| [Existing Job Request](/docs/any-api/get-request/examples/existing-job-request/)                  | This guide explains how to call a job that leverages [External adapters](/docs/external-adapters/) and returns the relevant data to the smart contract. This allows building succinct smart contracts that do not need to comprehend the URL or the response format of the target API. |\r\n\r\n### Building External Adapters\r\n\r\nTo learn more about building external adapters and adding them to nodes, refer to the [External Adapters](/docs/external-adapters/) documentation.\r\n\r\nTo understand different use cases for using any API, refer to [Other Tutorials](/docs/other-tutorials/).\r\n"
    },
    {
      "title": "Testnet Oracles",
      "headings": [
        {
          "depth": 2,
          "slug": "operator-contracts",
          "text": "Operator Contracts"
        },
        {
          "depth": 2,
          "slug": "jobs",
          "text": "Jobs"
        },
        {
          "depth": 3,
          "slug": "job-ids",
          "text": "Job IDs"
        },
        {
          "depth": 3,
          "slug": "examples",
          "text": "Examples"
        },
        {
          "depth": 4,
          "slug": "get--bytes",
          "text": "Get > bytes"
        },
        {
          "depth": 5,
          "slug": "request-method",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--uint256",
          "text": "Get > uint256"
        },
        {
          "depth": 5,
          "slug": "request-method-1",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-1",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--int256",
          "text": "Get > int256"
        },
        {
          "depth": 5,
          "slug": "request-method-2",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-2",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--bool",
          "text": "Get > bool"
        },
        {
          "depth": 5,
          "slug": "request-method-3",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-3",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--string",
          "text": "Get > string"
        },
        {
          "depth": 5,
          "slug": "request-method-4",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-4",
          "text": "Callback method"
        }
      ],
      "url": "/any-api/testnet-oracles",
      "section": "ethereum",
      "description": "Example Chainlink testnet oracles that you can use for development",
      "content": "\r\nThe Chainlink Developer Relations team maintains several testnet oracles that you can use to test your implementation quickly.\r\n\r\n:::tip[Link token address and Faucet details]\r\n\r\nTo retrieve the LINK token address or get faucet details for your testnet of choice, see the [LINK Token Contracts](/docs/link-token-contracts/) page.\r\n\r\n:::\r\n\r\n## Operator Contracts\r\n\r\nTestnet [Operator contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) are deployed and maintained on the following networks:\r\n\r\n| Testnet          | Oracle Address                                                                                                                     |\r\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\r\n| Ethereum Goerli  | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://goerli.etherscan.io/address/0xcc79157eb46f5624204f47ab42b3906caa40eab7)     |\r\n| Ethereum Rinkeby | [`0xf3FBB7f3391F62C8fe53f89B41dFC8159EE9653f`](https://rinkeby.etherscan.io/address/0xf3FBB7f3391F62C8fe53f89B41dFC8159EE9653f)    |\r\n| Ethereum Kovan   | [`0xf702d6de1945993D5e7d15df870eE9f2523fbcC5`](https://kovan.etherscan.io/address/0xf702d6de1945993D5e7d15df870eE9f2523fbcC5)      |\r\n| Avalanche Fuji   | [`0x022EEA14A6010167ca026B32576D6686dD7e85d2`](https://testnet.snowtrace.io/address/0x022eea14a6010167ca026b32576d6686dd7e85d2)    |\r\n| Polygon Mumbai   | [`0x40193c8518BB267228Fc409a613bDbD8eC5a97b3`](https://mumbai.polygonscan.com/address/0x40193c8518BB267228Fc409a613bDbD8eC5a97b3)  |\r\n| Binance Testnet  | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://testnet.bscscan.com/address/0xCC79157eb46F5624204f47AB42b3906cAA40eaB7)     |\r\n| Fantom Testnet   | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://testnet.ftmscan.com/address/0xcc79157eb46f5624204f47ab42b3906caa40eab7)     |\r\n| Klaytn Testnet   | [`0xfC3BdAbD8a6A73B40010350E2a61716a21c87610`](https://baobab.scope.klaytn.com/account/0xfC3BdAbD8a6A73B40010350E2a61716a21c87610) |\r\n\r\n## Jobs\r\n\r\n### Job IDs\r\n\r\nTo make testing simple, jobs are configured with the following properties:\r\n\r\n- Each request on testnets costs 0.1 LINK.\r\n- Each oracle will wait for 1 confirmation before processing a request.\r\n- Jobs have the same IDs accross testnets.\r\n- Parameters are required. See [examples](#examples) for code snippets.\r\n\r\n<br>\r\n\r\n| Purpose                                                                                                                                                                                                                                                      | Tasks                                                                                                                                                                                        | Job ID                             | Required&nbspParameters                                                                                                                                  |\r\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| **_GET>bytes_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return arbitrary-length raw byte data **_bytes_**. <br>The job specs can be found [here](/docs/direct-request-get-bytes/)                                     | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/)                                                | `7da2702f37fd48e5b1b9a5715e3509b6` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n| **_GET>uint256_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the reponse <br>multiply the result by a multiplier <br>return an unsigned integer **_uint256_** . <br> The job specs can be found [here](/docs/direct-request-get-uint256/) | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Multiply](/docs/jobs/task-types/multiply/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/) | `ca98366cc7314957b8c012c72f05aeeb` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li><li>`times`: int</li></ul> |\r\n| **_GET>int256_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>multiply the result by a multiplier <br>return a signed integer **_int256_**. <br> The job specs can be found [here](/docs/direct-request-get-int256/)       | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Multiply](/docs/jobs/task-types/multiply/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/) | `fcf4140d696d44b687012232948bdd5d` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li><li>`times`: int</li></ul> |\r\n| **_GET>bool_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return a boolean **_bool_**. <br> The job specs can be found [here](/docs/direct-request-get-bool/)                                                            | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/)                                                | `c1c5e92880894eb6b27d3cae19670aa3` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n| **_GET>string_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return a sequence of characters **_string_**. <br> The job specs can be found [here](/docs/direct-request-get-string/)                                       | [Http](/docs/jobs/task-types/http/)<br>[JsonParse](/docs/jobs/task-types/jsonparse/)<br>[Ethabiencode](/docs/jobs/task-types/eth-abi-encode/)                                                | `7d80a6386ef543a3abb52817f6707e3b` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n\r\n### Examples\r\n\r\n#### Get > bytes\r\n\r\nA full example can be found [here](/docs/any-api/get-request/examples/large-responses/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('7da2702f37fd48e5b1b9a5715e3509b6', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json'\r\n  );\r\n  req.add('path', 'image');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nbytes public data;\r\nstring public imageUrl;\r\nfunction fulfill(bytes32 requestId, bytes memory bytesData) public recordChainlinkFulfillment(requestId) {\r\n    data = bytesData;\r\n    imageUrl = string(data);\r\n}\r\n```\r\n\r\n#### Get > uint256\r\n\r\nA full example can be found [here](/docs/any-api/get-request/examples/single-word-response/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('ca98366cc7314957b8c012c72f05aeeb', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD'\r\n  );\r\n  req.add('path', 'RAW,ETH,USD,VOLUME24HOUR');\r\n  req.addInt('times', 10**18); // Multiply by times value to remove decimals. Parameter required so pass '1' if the number returned doesn't have decimals\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nuint256 public volume;\r\nfunction fulfill(bytes32 _requestId, uint256 _volume) public recordChainlinkFulfillment(_requestId) {\r\n  volume = _volume;\r\n}\r\n```\r\n\r\n#### Get > int256\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('fcf4140d696d44b687012232948bdd5d', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD'\r\n  );\r\n  req.add('path', 'RAW,ETH,USD,VOLUME24HOUR');\r\n  req.addInt('times', 10**18); // Multiply by times value to remove decimals. Parameter required so pass '1' if the number returned doesn't have decimals\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nint256 public volume;\r\nfunction fulfill(bytes32 _requestId, int256 _volume) public recordChainlinkFulfillment(_requestId) {\r\n  volume = _volume;\r\n}\r\n```\r\n\r\n#### Get > bool\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('c1c5e92880894eb6b27d3cae19670aa3', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://app.proofi.com/api/verify/eip155/0xCB5085214B6318aF3dd0FBbb5E74fbF6bf332151?contract=0x2f7f7E44ca1e2Ca1A54db4222cF97ab47EE026F1'\r\n  );\r\n  req.add('path', 'approved');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nbool public approved;\r\nfunction fulfill(bytes32 _requestId, bool _approved) public recordChainlinkFulfillment(_requestId) {\r\n  approved = _approved;\r\n}\r\n```\r\n\r\n#### Get > string\r\n\r\nA full example can be found [here](/docs/any-api/get-request/examples/api-array-response/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('7d80a6386ef543a3abb52817f6707e3b', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&per_page=10'\r\n  );\r\n  req.add('path', '0,id');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nstring public id;\r\nfunction fulfill(bytes32 _requestId, string memory _id) public recordChainlinkFulfillment(_requestId) {\r\n  id = _id;\r\n}\r\n```\r\n"
    },
    {
      "title": "Chainlink Keepers Architecture",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "keeper-contracts",
          "text": "Keeper Contracts"
        },
        {
          "depth": 2,
          "slug": "how-it-works",
          "text": "How it works"
        },
        {
          "depth": 2,
          "slug": "internal-monitoring",
          "text": "Internal monitoring"
        },
        {
          "depth": 2,
          "slug": "supported-networks-and-cost",
          "text": "Supported Networks and Cost"
        }
      ],
      "url": "/chainlink-keepers/overview",
      "section": "ethereum",
      "content": "\r\n## Overview\r\n\r\nChainlink Keepers enable you to execute smart contract functions based on conditions that you specify without having to create and maintain your own centralized stack. Chainlink Keepers is highly reliable and decentralized, supported by an industry leading team, and enables developers to deploy applications faster.\r\n\r\nThere are three main actors in the ecosystem:\r\n\r\n- **Upkeeps**: These are the jobs or tasks that you execute on-chain. For example, you can call a smart contract function if a specific set of conditions are met.\r\n- **Keepers registry**: The contract that you use to [register](../register-upkeep/) and manage **upkeeps**.\r\n- **Keepers**: Nodes in the Keepers Network that service registered and funded upkeeps in the Keepers registry. Keepers use the same Node Operators as Chainlink Data Feeds.\r\n\r\nThe following diagram describes the architecture of the Keeper network. The Chainlink Keepers Registry governs the actors on the network and compensates Keepers for performing successful upkeeps. Developers can register their Upkeeps, and Node Operators can register as Keepers.\r\n\r\n![keeper-overview](/images/contract-devs/keeper/keeper-overview.png)\r\n\r\n## Keeper Contracts\r\n\r\nKeepers use these contracts. You can find them in the [Chainlink repository](https://github.com/smartcontractkit/chainlink/tree/develop/contracts/src/v0.8). For details about how to use them, see the [Keepers-compatible Contracts](../compatible-contracts/) page.\r\n\r\n- `KeeperCompatible.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperCompatible.sol): Imports the following contracts:\r\n  - `KeeperBase.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperBase.sol): Enables the use of the `cannotExecute` modifier. Import this contract if you need for this modifier. See the [`checkUpkeep` function](/docs/chainlink-keepers/compatible-contracts#checkupkeep-function) for details.\r\n  - `KeeperCompatibleInterface.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol): The interface to be implemented in order to make your contract Keepers-compatible. Import this contract for type safety.\r\n- `KeeperRegistry.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperRegistry.sol): The registry contract that tracks all registered Upkeeps and the Keepers that can perform them.\r\n- `KeeperRegistrar.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperRegistrar.sol): The Registrar contract coverns the registration of new Upkeeps on the associated `KeeperRegistry` contract. Users who want to register Upkeeps by directly calling the deployed contract have to call the Transfer-and-Call function on the respective ERC-677 LINK contract configured on the Registrar and ensure they pass the correct encoded function call and inputs.\r\n\r\n## How it works\r\n\r\nKeepers follow a turn-taking algorithm to service upkeeps. A turn is a number of blocks and you can find the block count per turn for your network in the [configuration](../supported-networks/#configurations) section. During a turn a Upkeeps on the registry are randomly split, ordered into buckets, and assigned to a keeper to service them. Even if a Keeper goes down, the network has built-in redundancy and your Upkeep will be performed by the next keeper in line.\r\n\r\nDuring every block, the keeper reviews all of the upkeeps in its bucket to determine which upkeeps are eligible. This check is done off-chain using a geth simulation. The keeper checks both the `checkUpkeep` and `performUpkeep` conditions independently using simulation. If both are true (eligible), and the upkeep is funded, the keeper proceeds to execute the transaction on-chain.\r\n\r\nWhile only one Keeper monitors an upkeep at any point during a turn, an upkeep can have multiple on-chain transaction executions per turn. This is accomplished with a buddy-system. After a transaction is confirmed, the next keeper in the line monitors the upkeep. After a new transaction is confirmed, the previous keeper steps in again to monitor the upkeep until the end of the turn or until another transaction confirmation is complete. This creates a system that is secure and highly available. If a node becomes faulty and executes a transaction that is not eligible, the next node does not execute a transaction, which breaks the process.\r\n\r\nKeepers use the same transaction manager mechanism built and used by Chainlink Data Feeds. This creates a hyper-reliable automation service that can execute and confirm transactions even during intense gas spikes or on chains with significant reorgs. This mechanism has been in use in Chainlink Labs for multiple years, is battle hardened, and the team continuously improves on it.\r\n\r\n## Internal monitoring\r\n\r\nInternally, Chainlink Keepers also uses its own monitoring and alerting mechanisms to maintain a health network and ensure developers get the reliability that they expect.\r\n\r\n## Supported Networks and Cost\r\n\r\nFor a list of blockchains that is supported by Chainlink Keepers, please review the [supported networks page](./supported-networks). To learn more about the cost of using Chainlink Keepers, please review the [Keepers economics](./keeper-economics) page.\r\n"
    },
    {
      "title": "Register a Custom Logic Upkeep",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "register-an-upkeep-using-the-keepers-app",
          "text": "Register an Upkeep using the Keepers App"
        },
        {
          "depth": 2,
          "slug": "register-an-upkeep-using-your-own-deployed-contract",
          "text": "Register an Upkeep using your own deployed contract"
        },
        {
          "depth": 3,
          "slug": "prerequisites",
          "text": "Prerequisites"
        },
        {
          "depth": 3,
          "slug": "code-example",
          "text": "Code example"
        },
        {
          "depth": 3,
          "slug": "registerandpredictid-parameters",
          "text": "registerAndPredictID Parameters"
        },
        {
          "depth": 3,
          "slug": "registry-and-registrar-addresses",
          "text": "Registry and Registrar Addresses"
        }
      ],
      "url": "/chainlink-keepers/register-upkeep",
      "section": "ethereum",
      "content": "\r\n## Overview\r\n\r\nThis guide explains how to register a Custom logic Upkeep that uses a [Keepers-compatible contract](../compatible-contracts). You can either register it from the Keepers App, or from within a contract that you have deployed.\r\n\r\n**Topics**\r\n\r\n- [Register an Upkeep using the Keepers App](#register-an-upkeep-using-the-keepers-app)\r\n- [Register an Upkeep using your own deployed contract](#register-an-upkeep-using-your-own-deployed-contract)\r\n\r\n## Register an Upkeep using the Keepers App\r\n\r\n<div class=\"remix-callout\">\r\n    <a href=\"https://keepers.chain.link\" >Open the Chainlink Keepers App</a>\r\n</div>\r\n\r\n1. **Connect your wallet** using the button in the top right corner and choose a network. For a list of supported networks, see the [Supported Blockchain Networks](../supported-networks) section. The Chainlink Keepers App also lists the currently supported networks.\r\n   ![Connect With Metamask](/images/contract-devs/keeper/keeper-metamask.png)\r\n\r\n1. **Click the Register New Upkeep button**\r\n   ![Click Register New Upkeep](/images/contract-devs/keeper/keeper-register.png)\r\n\r\n1. **Select the custom logic trigger**\r\n\r\n1. **Provide the address of your [Keepers-compatible contract](../compatible-contracts)** You do not need to verify the contract on-chain, but it must be [Keepers-compatible](../compatible-contracts/).\r\n\r\n1. **Complete the required details:**\r\n\r\n   - **Upkeep name**: This will be publicly visible in the Keepers app.\r\n   - **Gas limit**: This is the maximum amount of gas that your transaction requires to execute on chain. This limit cannot exceed the `performGasLimit` value configured on the [registry](/docs/chainlink-keepers/supported-networks/#configurations). Before the network executes your transaction on chain, it simulates the transaction. If the gas required to execute your transaction exceeds the gas limit that you specified, your transaction will not be confirmed. Developers also have the ability to update `performGasLimit` for an upkeep. Consider running your function on a testnet to see how much gas it uses before you select a gas limit. This can be changed afterwards.\r\n   - **Starting balance (LINK)**: Specify a LINK starting balance to fund your upkeep. See the [LINK Token Contracts](/docs/link-token-contracts/) page to find the correct contract address and access faucets for testnet LINK. This field is required. You must have LINK before you can use the Keepers service.\r\n   - **Check data**: This field is provided as an input for when your `checkUpkeep` function is simulated. Either leave this field blank or specify a hexadecimal value starting with `0x`. To learn how to make flexible upkeeps using `checkData`, see the [Flexible Upkeeps](../flexible-upkeeps) guide.\r\n   - **Your email address**: This email address will be encrypted and is used to send you an email when your upkeep is underfunded.\r\n\r\n   :::caution[ Funding Upkeep]\r\n\r\n   You should fund your contract with more LINK that you anticipate you will need. The network will not check or perform your Upkeep if your balance is too low based on current exchange rates. View the [Keepers economics](../keeper-economics) page to learn more about the cost of using Keepers.\r\n\r\n   :::\r\n\r\n   :::caution[ ERC677 Link]\r\n\r\n   Fund your Upkeep with more LINK than you anticipate you will need. The network will not check or perform your upkeep if your balance is too low based on current exchange rates. View the [Keepers Economics](../keeper-economics) page to learn more about the cost of using Keepers.\r\n\r\n   :::\r\n\r\n   :::caution[ Testing and best practices]\r\n\r\n   Follow the [best practices](../compatible-contracts/#best-practices) when creating a Keepers-compatible contract and test your Upkeep on a testnet before deploying it to a mainnet.\r\n\r\n   :::\r\n\r\n1. **Click `Register upkeep`** and confirm the transaction in MetaMask.\r\n   ![Upkeep Registration Success Message](/images/contract-devs/keeper/keeper-registration-submitted.png)\r\n\r\nYour Upkeeps will be displayed in your list of Active Upkeeps. You must monitor the balance of your Upkeep. If the balance drops below the **minimum balance**, the Keepers Network will not perform the Upkeep. See [Manage Your Upkeeps](../manage-upkeeps) to learn how to manage your Upkeeps.\r\n\r\n## Register an Upkeep using your own deployed contract\r\n\r\nYou can dynamically create and manage Upkeeps from within your own dApp. To do this you will need to keep track of the Upkeep ID as your contract will use this to subsequently interact with the Keepers registry. The following example displays a smart contract that can create an Upkeep and determine the Upkeep ID. Note your contract should be Keepers-compatible you will need [ERC-677 LINK](../../link-token-contracts/) to fund the Upkeep. You can also program your Upkeep to check its own balance and fund itself by interacting with the registry.\r\n\r\n### Prerequisites\r\n\r\nFind the following addresses for your network:\r\n\r\n- Correct [LINK token contract](../../link-token-contracts/)\r\n- [Registry and registrar addresses for your network](#registry-and-registrar-addresses)\r\n\r\nOptionally, you can fetch the LINK address and registrar address from the intended registry at run-time.\r\n\r\n:::note[ Make sure your contract has enough [ERC-677 LINK](../../link-token-contracts/) to fund the Upkeep at creation. _The minimum amount is 5 LINK._]\r\n\r\n:::\r\n\r\n### Code example\r\n\r\n::solidity-remix[samples/Keepers/UpkeepIDConsumerExample.sol]\r\n\r\n<div class=\"remix-callout\">\r\n    <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/Keepers/UpkeepIDConsumerExample.sol\" >Open in Remix</a>\r\n    <a href=\"/docs/conceptual-overview/#what-is-remix\" > What is Remix?</a>\r\n</div>\r\n\r\n### `registerAndPredictID` Parameters\r\n\r\n| Name             | Description                                                                                                                          |\r\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `name`           | Name of Upkeep                                                                                                                       |\r\n| `encryptedEmail` | Not in use in programmatic registration. Please specify with `0x`                                                                    |\r\n| `upkeepContract` | Address of Keepers-compatible contract that will be automated                                                                        |\r\n| `gasLimit`       | The maximum amount of gas that will be used to execute your function on-chain                                                        |\r\n| `adminAddress`   | Address for Upkeep administrator. Upkeep administrator can fund contract.                                                            |\r\n| `checkData`      | ABI-encoded fixed and specified at Upkeep registration and used in every checkUpkeep. Can be empty (0x)                              |\r\n| `amount`         | The amount of LINK (in Wei) to fund your Upkeep. The minimum amount is 5 LINK. To fund 5 LINK please set this to 5000000000000000000 |\r\n| `source`         | Not in use in programmatic registration. Please specify with `0`.                                                                    |\r\n\r\n### Registry and Registrar Addresses\r\n\r\n| Name                         | Registry Address                                                                                                                | Registrar Address                                                                                                               |\r\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\r\n| Ethereum Mainnet             | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://etherscan.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)           | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://etherscan.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)           |\r\n| Goerli Testnet               | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://goerli.etherscan.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)    | [0x9806cf6fBc89aBF286e8140C42174B94836e36F2](https://goerli.etherscan.io/address/0x9806cf6fBc89aBF286e8140C42174B94836e36F2)    |\r\n| Rinkeby Testnet (Deprecated) | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://rinkeby.etherscan.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)   | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://rinkeby.etherscan.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)   |\r\n| Kovan Testnet (Deprecated)   | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://kovan.etherscan.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)     | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://kovan.etherscan.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)     |\r\n| Polygon Mainnet              | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://polygonscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)        | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://polygonscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)        |\r\n| Polygon Mumbai Testnet       | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://mumbai.polygonscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6) | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://mumbai.polygonscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d) |\r\n| BNB Chain Mainnet            | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://bscscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)            | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://bscscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)            |\r\n| BNB Chain Testnet            | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://testnet.bscscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)    | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://testnet.bscscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)    |\r\n| Avalanche Mainnet            | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://snowtrace.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)           | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://snowtrace.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)           |\r\n| Avalanche Fuji Testnet       | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://testnet.snowtrace.io/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)   | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://testnet.snowtrace.io/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)   |\r\n| Fantom Mainnet               | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://ftmscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)            | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://ftmscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)            |\r\n| Fantom Testnet               | [0x02777053d6764996e594c3E88AF1D58D5363a2e6](https://testnet.ftmscan.com/address/0x02777053d6764996e594c3E88AF1D58D5363a2e6)    | [0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d](https://testnet.ftmscan.com/address/0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d)    |\r\n"
    },
    {
      "title": "Arbitrum Price Feeds",
      "headings": [],
      "url": "/feeds-arbitrum",
      "section": "ethereum",
      "content": ""
    },
    {
      "title": "Solana Price Feeds",
      "headings": [],
      "url": "/feeds-solana",
      "section": "solana",
      "content": ""
    },
    {
      "title": "Ethereum Price Feeds",
      "headings": [],
      "url": "/feeds",
      "section": "ethereum",
      "content": ""
    },
    {
      "title": "API Calls: Using Any API",
      "headings": [
        {
          "depth": 2,
          "slug": "1-how-does-the-request-and-receive-cycle-work-for-api-calls",
          "text": "1. How does the request and receive cycle work for API calls?"
        },
        {
          "depth": 2,
          "slug": "2-what-are-jobs",
          "text": "2. What are jobs?"
        },
        {
          "depth": 2,
          "slug": "3-what-are-tasks",
          "text": "3. What are Tasks?"
        },
        {
          "depth": 3,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 3,
          "slug": "contract-example",
          "text": "Contract Example"
        },
        {
          "depth": 3,
          "slug": "external-adapters",
          "text": "External Adapters"
        },
        {
          "depth": 2,
          "slug": "4-how-can-i-use-an-oracle-data-service",
          "text": "4. How can I use an Oracle Data Service?"
        },
        {
          "depth": 2,
          "slug": "5-further-reading",
          "text": "5. Further Reading"
        }
      ],
      "url": "/getting-started/advanced-tutorial",
      "section": "gettingStarted",
      "content": "\r\n:::note[ Requirements]\r\n\r\nThis guide requires basic knowledge about smart contracts. If you are new to smart contract development, read the [Consuming Data Feeds](/docs/consuming-data-feeds/) and [Random Numbers](/docs/intermediates-tutorial/) guides before you begin.\r\n\r\n:::\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=ay4rXZhAefs\" />\r\n\r\nIn this guide, you will learn how to request data from a public API in a smart contract. This includes understanding what Tasks and External adapters are and how Oracle Jobs use them. You will also learn how to find the Oracle Jobs and Tasks for your contract and how to request data from an Oracle Job.\r\n\r\n## 1. How does the request and receive cycle work for API calls?\r\n\r\nThe request and receive cycle describes how a smart contract requests data from an oracle and receives the response in a separate transaction. If you need a refresher, check out the [Basic Request Model](./architecture-request-model/).\r\n\r\nFor contracts that use [Chainlink VRF](/docs/vrf/v2/introduction/), you request randomness from a VRF oracle and then await the response. The fulfillment function is already given to us from the `VRFConsumerBase` contract, so oracles already know where to send the response to. However, with API calls, the contract itself _defines_ which function it wants to receive the response to.\r\n\r\nBefore creating any code, you should understand how Oracle jobs can get data on-chain.\r\n\r\n## 2. What are jobs?\r\n\r\nChainlink nodes require [**Jobs**](/docs/jobs/) to do anything useful. In the case of a Request and Receive job, the [Direct Request](/docs/jobs/types/direct-request/) job monitors the blockchain for a request from a smart contract. Once it catches a request, it runs the tasks (both core and external adapters) that the job is configured to run and eventually returns the response to the requesting contract.\r\n\r\n## 3. What are Tasks?\r\n\r\nEach oracle job has a configured set of tasks it must complete when it is run. These tasks are split into two subcategories:\r\n\r\n- [**Tasks**](/docs/tasks/) - These are tasks that come built-in to each node. (examples: http, ethabidecode, etc).\r\n- [**External Adapters**](/docs/external-adapters/) - These are custom adapters built by node operators and community members, which perform specific tasks like calling a particular endpoint with a specific set of parameters (like authentication secrets that shouldn't be publicly visible).\r\n\r\n### Tasks\r\n\r\nIf a job needs to make a GET request to an API, find a specific unsigned integer field in a JSON response, then submit that back to the requesting contract, it would need a job containing the following Tasks:\r\n\r\n- [HTTP](/docs/jobs/task-types/http/) calls the API. the `method` must be set to _GET_.\r\n- [JSON Parse](/docs/jobs/task-types/jsonparse/) parses the JSON and extracts a value at a given keypath.\r\n- [Multiply](/docs/jobs/task-types/multiply/) multiplies the input by a multiplier. Used to remove the decimals.\r\n- [ETH ABI Encode](/docs/jobs/task-types/eth-abi-encode/) converts the data to a bytes payload according to ETH ABI encoding.\r\n- [ETH Tx](/docs/jobs/task-types/eth-tx/) submits the transaction to the chain, completing the cycle.\r\n\r\nThe job specs example can be found [here](/docs/direct-request-get-uint256/).\r\nLet's walk through a real example, where you will retrieve 24 volumes of the [ETH/USD pair](https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD) from the cryptocompare API.\r\n\r\n1. [HTTP](/docs/jobs/task-types/http/) calls the API and returns the body of an HTTP GET result for [ETH/USD pair](https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD). Example:\r\n\r\n```json\r\n{\"RAW\":\r\n  {\"ETH\":\r\n    {\"USD\":\r\n      {\r\n        ...,\r\n        \"VOLUMEDAYTO\":953806939.7194247,\r\n        \"VOLUME24HOUR\":703946.0675653099,\r\n        \"VOLUME24HOURTO\":1265826345.488568\r\n        ...,\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n2. [JSON Parse](/docs/jobs/task-types/jsonparse/) walks a specified `path` (`\"RAW,ETH,USD,VOLUME24HOUR\"`) and returns the value found at that result. Example: `703946.0675653099`\r\n\r\n3. [Multiply](/docs/jobs/task-types/multiply/) parses the input into a float and multiplies it by the 10^18. Example: `703946067565309900000000`\r\n\r\n4. [ETH ABI Encode](/docs/jobs/task-types/eth-abi-encode/) formats the input into an integer and then converts it into Solidity's `uint256` format. Example: `0xc618a1e4`\r\n\r\n5. [ETH Tx](/docs/jobs/task-types/eth-tx/) takes the given input, places it into the data field of the transaction, signs a transaction, and broadcasts it to the network. Example: [transaction result](https://goerli.etherscan.io/tx/0x5f2023b665e0ae336665ded73fafa90ef752ac33487b9240f34b82f93a77c8ca)\r\n\r\n**Note: Some tasks accept parameters to be passed to them to inform them how to run.** Example: [JSON Parse](/docs/jobs/task-types/jsonparse/) accepts a `path` parameter which informs the task where to find the data in the JSON object.\r\n\r\nLet's see what this looks like in a contract:\r\n\r\n### Contract Example\r\n\r\n::solidity-remix[samples/APIRequests/APIConsumer.sol]\r\n\r\nHere is a breakdown of each component of this contract:\r\n\r\n1. Constructor: This sets up the contract with the Oracle address, Job ID, and LINK fee that the oracle charges for the job.\r\n2. `requestVolumeData` functions: This builds and sends a request - which includes the fulfillment functions selector - to the oracle. Notice how it adds the `get`, `path` and `times` parameters. These are read by the Tasks in the job to perform correctly. `get` is used by [HTTP](/docs/jobs/task-types/http/), `path` is used by [JSON Parse](/docs/jobs/task-types/jsonparse/) and `times` is used by [Multiply](/docs/jobs/task-types/multiply/).\r\n3. `fulfill` function: This is where the result is sent upon the Oracle Job's completion.\r\n\r\n**Note:** The calling contract should own enough LINK to pay the fee, which by default is 0.1 LINK. You can use [this tutorial](/docs/fund-your-contract/) to learn how to fund your contract.\r\n\r\nThis is an example of a basic HTTP GET request. However, it requires defining the API URL directly in the smart contract. This can, in fact, be extracted and configured on the Job level inside the Oracle node. You can follow the _APIConsumer_ tutorial [here](/docs/any-api/get-request/examples/single-word-response/).\r\n\r\n### External Adapters\r\n\r\nHere are some examples nodes with external adapters:\r\n\r\n- [Google Weather Data](https://docs.chain.link/docs/any-api/data-providers/google-weather/)\r\n- [Associated Press](https://market.link/nodes/The%20Associated%20Press/integrations)\r\n\r\nIf all the parameters are defined within the Oracle job, the only things a smart contract needs to define to consume are:\r\n\r\n- JobId\r\n- Oracle address\r\n- LINK fee\r\n- Fulfillment function\r\n\r\nThis will make your smart contract much more succinct. The `requestVolumeData` function from the code example [above](#contract-example) would look more like this:\r\n\r\n```solidity\r\nfunction requestVolumeData() public returns (bytes32 requestId) {\r\n    Chainlink.Request memory req = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);\r\n\r\n    // Extra parameters don't need to be defined here because they are already defined in the job\r\n\r\n    return sendChainlinkRequest(req, fee);\r\n}\r\n```\r\n\r\nYou can follow a full _Existing Job Tutorial_ [here](/docs/any-api/get-request/examples/existing-job-request/).\r\nMore on External Adapters can be found [here](/docs/external-adapters/).\r\n\r\n## 4. How can I use an Oracle Data Service?\r\n\r\nChainlink has facilitated the launch of several new oracle data services that allow dApps to access rich data from external data sources. For instance, you can create a smart contract that checks Google's DNS service to determine if a given domain is owned by a given blockchain address using oracle job without having to specify the URL inside the contract.\r\nJoin the [operator-requests discord channel](https://discord.gg/eGcxsdZzKR) to directly communicate with community node operators.\r\nA full example on Kovan testnet can be found [here](/docs/any-api/data-providers/dns-ownership/).\r\n\r\n## 5. Further Reading\r\n\r\nTo learn more about connecting smart contracts to external APIs, read our blog posts:\r\n\r\n- [Connect a Smart Contract to the Twitter API](https://blog.chain.link/connect-smart-contract-to-twitter-api/)\r\n- [Connect a Tesla Vehicle API to a Smart Contract](https://blog.chain.link/create-tesla-smart-contract-rental/)\r\n- [OAuth and API Authentication in Smart Contracts](https://blog.chain.link/oauth-and-api-authentication-in-smart-contracts-2/)\r\n\r\nTo explore more applications of external API requests, check out our [other tutorials](/docs/other-tutorials/#api-requests).\r\n"
    },
    {
      "title": "Chainlink Overview",
      "headings": [
        {
          "depth": 2,
          "slug": "what-is-a-smart-contract-what-is-a-hybrid-smart-contract",
          "text": "What is a smart contract? What is a hybrid smart contract?"
        },
        {
          "depth": 2,
          "slug": "what-language-is-a-smart-contract-written-in",
          "text": "What language is a smart contract written in?"
        },
        {
          "depth": 2,
          "slug": "what-does-a-smart-contract-look-like",
          "text": "What does a smart contract look like?"
        },
        {
          "depth": 3,
          "slug": "solidity-versions",
          "text": "Solidity versions"
        },
        {
          "depth": 3,
          "slug": "naming-a-contract",
          "text": "Naming a Contract"
        },
        {
          "depth": 3,
          "slug": "variables",
          "text": "Variables"
        },
        {
          "depth": 3,
          "slug": "constructors",
          "text": "Constructors"
        },
        {
          "depth": 3,
          "slug": "functions",
          "text": "Functions"
        },
        {
          "depth": 3,
          "slug": "interfaces",
          "text": "Interfaces"
        },
        {
          "depth": 2,
          "slug": "what-does-deploying-mean",
          "text": "What does “deploying” mean?"
        },
        {
          "depth": 2,
          "slug": "what-is-a-link-token",
          "text": "What is a LINK token?"
        },
        {
          "depth": 2,
          "slug": "what-are-oracles",
          "text": "What are oracles?"
        },
        {
          "depth": 2,
          "slug": "how-do-smart-contracts-use-oracles",
          "text": "How do smart contracts use oracles?"
        },
        {
          "depth": 2,
          "slug": "what-is-remix",
          "text": "What is Remix?"
        },
        {
          "depth": 2,
          "slug": "what-is-metamask",
          "text": "What is Metamask?"
        }
      ],
      "url": "/getting-started/conceptual-overview",
      "section": "gettingStarted",
      "description": "Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.",
      "content": "\r\nWelcome to the Smart Contract Getting Started guide. This overview explains the basic concepts of smart contract development and oracle networks.\r\n\r\n**Skip ahead**\r\nTo get your hands on the code right away, you can skip this overview:\r\n\r\n- [Deploy Your First Smart Contract](/docs/deploy-your-first-contract/): If you are new to smart contracts, deploy your first smart contract in an interactive web development environment.\r\n- [Learn how to use Data Feeds](/docs/consuming-data-feeds/): If you are already familiar with smart contracts and want to learn how to create _hybrid_ smart contracts, use Chainlink Data Feeds to get asset price data on-chain.\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=rFXSEEQG9YE\" />\r\n\r\n## What is a smart contract? What is a hybrid smart contract?\r\n\r\nWhen deployed to a blockchain, a _smart contract_ is a set of instructions that can be executed without intervention from third parties. The smart contract code defines how it responds to input, just like the code of any other computer program.\r\n\r\nA valuable feature of smart contracts is that they can store and manage on-chain assets (like [ETH or ERC20 tokens](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/)), just like you can with an Ethereum wallet. Because they have an on-chain address like a wallet, they can do everything any other address can. This enables you to program automated actions when receiving and transferring assets.\r\n\r\nSmart contracts can connect to real-world market prices of assets to produce powerful applications. Securely connecting smart contracts with off-chain data and services is what makes them _hybrid_ smart contracts. This is done using oracles.\r\n\r\n## What language is a smart contract written in?\r\n\r\nThe most popular language for writing smart contracts on Ethereum and EVM Chains is [Solidity](https://docs.soliditylang.org/en/v0.8.7/). It was created by the Ethereum Foundation specifically for smart contract development and is constantly being updated. Other languages exist for writing smart contracts on Ethereum and EVM Chains, but Solidity is the language used for Chainlink smart contracts.\r\n\r\nIf you've ever written Javascript, Java, or other object-oriented scripting languages, Solidity should be easy to understand. Similar to object-oriented languages, Solidity is considered to be a _contract_-oriented language.\r\n\r\nSome networks are not EVM-compatible and use languages other than Solidity for smart contracts:\r\n\r\n- [Solana](/solana/)\r\n\r\n  - [Writing Solana contracts in Rust](https://docs.solana.com/developing/on-chain-programs/developing-rust)\r\n  - [Writing Solana contracts in C](https://docs.solana.com/developing/on-chain-programs/developing-c)\r\n\r\n## What does a smart contract look like?\r\n\r\nThe structure of a smart contract is similar to that of a class in Javascript, with a few differences. For example, the following `HelloWorld` contract is a simple smart contract that stores a single variable and includes a function to update the value of that variable.\r\n\r\n::solidity-remix[samples/Tutorials/HelloWorld.sol]\r\n\r\n### Solidity versions\r\n\r\nThe first thing that every Solidity file must have is the Solidity version definition. The `HelloWorld.sol` contract uses version `0.8.7`, which is defined in the contract as `pragma solidity 0.8.7;`\r\n\r\nYou can see the latest versions of the Solidity compiler [here](https://github.com/ethereum/solc-bin/blob/gh-pages/bin/list.txt/?target=_blank). You might also notice smart contracts that are compatible with a range of versions.\r\n\r\n```solidity\r\npragma solidity >=0.7.0 <0.9.0;\r\n```\r\n\r\nThis means that the code is written for Solidity version 0.7.0, or a newer version of the language up to, but not including version 0.9.0. The `pragma` selects the compiler, which defines how the code is treated.\r\n\r\n### Naming a Contract\r\n\r\nThe `contract` keyword defines the name of the contract, which in this example is `HelloWorld`. This is similar to declaring a `class` in Javascript. The implementation of `HelloWorld` is inside this definition and denoted with curly braces.\r\n\r\n```solidity\r\ncontract HelloWorld {\r\n\r\n}\r\n```\r\n\r\n### Variables\r\n\r\nLike Javascript, contracts can have state variables and local variables. **State variables** are variables with values that are permanently stored in contract storage. The values of **local variables**, however, are present only until the function is executing. There are also different types of variables you can use within Solidity, such as `string`, `uint256`, etc. Check out the [Solidity documentation](https://docs.soliditylang.org/en/v0.8.7/) to learn more about the different kinds of variables and types.\r\n\r\n_Visibility modifiers_ are used to define the level of access to these variables. Here are some examples of state variables with different visibility modifiers:\r\n\r\n```solidity\r\nstring public message;\r\nuint256 internal internalVar;\r\nuint8 private privateVar;\r\n```\r\n\r\nLearn more about state variables visibility [here](https://docs.soliditylang.org/en/latest/contracts.html#state-variable-visibility).\r\n\r\n### Constructors\r\n\r\nAnother familiar concept to programmers is the **constructor**. When you deploy a contract, the constructor sets the state of the contract when it is first created.\r\n\r\nIn `HelloWorld`, the constructor takes in a `string` as a parameter and sets the `message` state variable to that string.\r\n\r\n```solidity\r\nconstructor(string memory initialMessage) {\r\n  message = initialMessage;\r\n}\r\n```\r\n\r\n### Functions\r\n\r\n**Functions** can access and modify the state of the contract or call other functions on external contracts. `HelloWorld` has a function named `updateMessage`, which updates the current message stored in the state.\r\n\r\n```solidity\r\nconstructor(string memory initialMessage) {\r\n  message = initialMessage;\r\n}\r\n\r\nfunction updateMessage(string memory newMessage) public {\r\n  message = newMessage;\r\n}\r\n```\r\n\r\nFunctions use visibility modifiers to define the access level. Learn more about functions visibility [here](https://docs.soliditylang.org/en/latest/contracts.html#function-visibility).\r\n\r\n### Interfaces\r\n\r\nAn **interface** is another concept that is familiar to programmers of other languages. Interfaces define functions without their implementation, which leaves inheriting contracts to define the actual implementation themselves. This makes it easier to know what functions to call in a contract. Here's an example of an interface:\r\n\r\n::solidity-remix[samples/Tutorials/Test.sol]\r\n\r\nFor this example, `override` is necessary in the `Test` contract function because it overrides the base function contained in the `numberComparison` interface. The contract uses `pure` instead of `view` because the `isSameNum` function in the `Test` contract does not return a storage variable.\r\n\r\n## What does \"deploying\" mean?\r\n\r\n**Deploying** a smart contract is the process of pushing the code to the blockchain, at which point it resides with an on-chain address. Once it's deployed, the code cannot be changed and is said to be _immutable_.\r\n\r\nAs long as the address is known, its functions can be called through an interface, on [Etherscan](https://etherscan.io/), or through a library like [web3js](https://web3js.readthedocs.io/), [web3py](https://web3py.readthedocs.io/), [ethers](https://docs.ethers.io), and more. Contracts can also be written to interact with other contracts on the blockchain.\r\n\r\n## What is a LINK token?\r\n\r\nThe LINK token is an ERC677 token that inherits functionality from the [ERC20 token standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/) and allows token transfers to contain a data payload. It is used to pay node operators for retrieving data for smart contracts and also for deposits placed by node operators as required by contract creators.\r\n\r\nAny wallet that handles ERC20 tokens can store LINK tokens. The ERC677 token standard that the LINK token implements still retains all functionality of ERC20 tokens.\r\n\r\n## What are oracles?\r\n\r\n**Oracles** provide a bridge between the real-world and on-chain smart contracts by being a source of data that smart contracts can rely on, and act upon.\r\n\r\nOracles play a critical role in facilitating the full potential of smart contract utility. Without a reliable connection to real-world conditions, smart contracts cannot effectively serve the real-world.\r\n\r\n## How do smart contracts use oracles?\r\n\r\nOracles are most popularly used with [_Data Feeds_](./using-chainlink-reference-contracts/). DeFi platforms like [AAVE](https://aave.com/) and [Synthetix](https://www.synthetix.io/) use Chainlink data feed oracles to obtain accurate real-time asset prices in their smart contracts.\r\n\r\nChainlink data feeds are sources of data [aggregated from many independent Chainlink node operators](./architecture-decentralized-model/). Each data feed has an on-chain address and functions that enable contracts to read from that address. For example, the [ETH / USD feed](https://feeds.chain.link/eth-usd/).\r\n\r\n![Chainlink Feeds List](/images/contract-devs/price-aggr.png)\r\n\r\nSmart contracts also use oracles to get other capabilities on-chain:\r\n\r\n- [Generate Verifiable Random Numbers (VRF)](/docs/vrf/v2/introduction/): Use Chainlink VRF to consume randomness in your smart contracts.\r\n- [Call External APIs (Any API)](/docs/any-api/introduction/): Request & Receive data from any API using the Chainlink contract library.\r\n- [Automate Smart Contract Functions (Keepers)](/docs/chainlink-keepers/introduction/): Automating smart contract functions and regular contract maintenance.\r\n\r\n## What is Remix?\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=JWJWT9cwFbo\" />\r\n\r\n[Remix](https://remix.ethereum.org/) is a web IDE (integrated development environment) for creating, running, and debugging smart contracts in the browser. It is developed and maintained by the Ethereum foundation. Remix allows Solidity developers to write smart contracts without a development machine since everything required is included in the web interface. It allows for a simplified method of interacting with deployed contracts, without the need for a command line interface. Remix also has support for samples. This means that Remix can load code from Github.\r\n\r\nTo learn how to use Remix, see the [Deploying Your First Smart Contract\r\n](/docs/deploy-your-first-contract/) guide.\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"/docs/deploy-your-first-contract/\">Deploy Your First Smart Contract</a>\r\n</div>\r\n\r\n## What is Metamask?\r\n\r\nContracts are deployed by other addresses on the network. To deploy a smart contract, you need an address. Not only that, but you need an address which you can easily use with Remix. Fortunately, [MetaMask](https://metamask.io) is just what is needed. **Metamask** allows anyone to create an address, store funds, and interact with Ethereum compatible blockchains from a browser extension.\r\n"
    },
    {
      "title": "Consuming Data Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "examine-the-sample-contract",
          "text": "Examine the sample contract"
        },
        {
          "depth": 2,
          "slug": "compile-deploy-and-run-the-contract",
          "text": "Compile, deploy, and run the contract"
        }
      ],
      "url": "/getting-started/consuming-data-feeds",
      "section": "gettingStarted",
      "description": "Learn how to consume Chainlink Data Feeds in your smart contracts.",
      "content": "\r\n:::note[ New to smart contracts?]\r\n\r\nThis tutorial assumes that you know how to create and deploy basic smart contracts. If you are new to smart contract development, learn how to [Deploy Your First Smart Contract](/docs/deploy-your-first-contract/) before you start this guide.\r\n\r\n:::\r\n\r\nWhen you connect a smart contract to real-world services or off-chain data, you create a _hybrid smart contract_. For example, you can use Chainlink Data Feeds to connect your smart contracts to asset pricing data like the [ETH / USD feed](https://feeds.chain.link/eth-usd). These data feeds use the data aggregated from many independent Chainlink node operators. Each price feed has an on-chain address and functions that enable contracts to read pricing data from that address.\r\n\r\nThis guide shows you how to write, deploy, and run a smart contract that consumes data from a price data feed.\r\n\r\n## Examine the sample contract\r\n\r\nThe following code describes a contract that obtains the latest ETH / USD price using the Goerli testnet.\r\n\r\n::solidity-remix[samples/PriceFeeds/PriceConsumerV3.sol]\r\n\r\nThe contract has the following components:\r\n\r\n- The `import` line imports an interface named `AggregatorV3Interface`. Interfaces define functions without their implementation, which leaves inheriting contracts to define the actual implementation themselves. In this case, `AggregatorV3Interface` defines that all v3 Aggregators have the function `latestRoundData`. You can [see the complete code](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol) for the `AggregatorV3Interface` on GitHub.\r\n\r\n- The `constructor() {}` initializes an interface object named `priceFeed` that uses `AggregatorV3Interface` and connects specifically to a proxy aggregator contract that is already deployed at `0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e`. The interface allows your contract to run functions on that deployed aggregator contract.\r\n\r\n- The `getLatestPrice()` function calls your `priceFeed` object and runs the `latestRoundData()` function. When you deploy the contract, it initializes the `priceFeed` object to point to the aggregator at `0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e`, which is the proxy address for the Goerli ETH / USD data feed. Your contract connects to that address and executes the function. The aggregator connects with several oracle nodes and aggregates the pricing data from those nodes. The response from the aggregator includes several variables, but `getLatestPrice()` returns only the `price` variable.\r\n\r\n## Compile, deploy, and run the contract\r\n\r\n:::caution[ If you have not already configured your MetaMask wallet and funded it with testnet ETH, follow the instructions in the Deploy Your First Smart Contract to set that up. You can get testnet ETH at one of the available [Goerli faucets](/docs/link-token-contracts/#goerli-testnet).]\r\n\r\n:::\r\n\r\nDeploy the `PriceConsumerV3` smart contract on the Goerli testnet.\r\n\r\n1. [Open the example contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/PriceFeeds/PriceConsumerV3.sol) in Remix. Remix opens and shows the contents of the smart contract.\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/PriceFeeds/PriceConsumerV3.sol\" target=\"_blank\">Open the contract in Remix</a>\r\n</div>\r\n\r\n1. Because the code is already written, you can start the compile step. On the left side of Remix, click the **Solidity Compiler** tab to view the compiler settings.\r\n   ![Screenshot showing the Compiler tab and its settings.](/images/getting-started/selectSolidityCompiler.png)\r\n\r\n1. Use the default compiler settings. Click the **Compile PriceConsumerV3.sol** button to compile the contract. Remix automatically detects the correct compiler version depending on the `pragma` that you specify in the contract. You can ignore warnings about unused local variables in this example.\r\n   ![Screenshot of the Compile button.](/images/getting-started/compilePriceConsumerV3.png)\r\n\r\n1. On the **Deploy** tab, select the **Injected Provider** environment. This contract specifically requires Web3 because it connects with another contract on the blockchain. Running in a JavaScript VM will not work.\r\n   ![Screenshot showing the Injected Provider environment selected.](/images/getting-started/selectWeb3.png)\r\n\r\n1. Because the example contract has several imports, Remix might select another contract to deploy by default. In the **Contract** section, select the `PriceConsumerV3` contract to make sure that Remix deploys the correct contract.\r\n   ![Screenshot showing PriceConsumerV3 as the contract to deploy.](/images/getting-started/selectPriceConsumerV3.png)\r\n\r\n1. Click **Deploy** to deploy the contract to the Goerli testnet. MetaMask opens and asks you to confirm payment for deploying the contract. Make sure MetaMask is set to the Goerli network before you accept the transaction. Because these transactions are on the blockchain, they are not reversible.\r\n   ![Screenshot of the Deploy button for PriceConsumerV3.](/images/getting-started/deployPriceConsumerV3.png)\r\n\r\n1. In the MetaMask prompt, click **Confirm** to approve the transaction and spend your testnet ETH required to deploy the contract.\r\n   ![Screenshot showing Metamask asking you to confirm the transaction.](/images/getting-started/confirmTransaction.png)\r\n\r\n1. After a few seconds, the transaction completes and your contract appears under the **Deployed Contracts** list in Remix. Click the contract dropdown to view its variables and functions.\r\n   ![Remix Deployed Contracts Section](/images/getting-started/deployedContractPriceConsumerV3.png)\r\n\r\n1. Click **getLatestPrice** to show the latest price from the aggregator contract. The latest price appears just below the button. The returned price is an integer, so it is missing its decimal point.\r\n   ![A screenshot showing the deployed contract.](/images/getting-started/getLatestPrice.png)\r\n\r\nYou can run your own oracle networks that provide data to smart contracts similar to the `AggregatorV3Interface`, but first, you should learn how to configure your contracts to pay oracles using LINK tokens. Follow the [Generate Random Numbers](./intermediates-tutorial/) to learn how.\r\n"
    },
    {
      "title": "Deploy Your First Smart Contract",
      "headings": [
        {
          "depth": 2,
          "slug": "install-and-fund-your-metamask-wallet",
          "text": "Install and fund your MetaMask wallet"
        },
        {
          "depth": 2,
          "slug": "write-compile-and-deploy-your-first-smart-contract",
          "text": "Write, compile, and deploy your first smart contract"
        },
        {
          "depth": 2,
          "slug": "run-functions-in-your-contract",
          "text": "Run functions in your contract"
        }
      ],
      "url": "/getting-started/deploy-your-first-contract",
      "section": "gettingStarted",
      "description": "Deploy and run your first smart contract in an interactive web development environment.",
      "content": "\r\nYou can write your first smart contract and run it in your browser without any knowledge about Ethereum or blockchains. This guide shows you how easy it is to develop smart contracts using the [Solidity language](https://soliditylang.org/), a [MetaMask wallet](https://metamask.io) and the [Remix Development Environment](https://remix.ethereum.org/). You can use all of these tools in your browser for free with no signup required.\r\n\r\n:::note[ Already know Solidity and have MetaMask configured?]\r\n\r\nIf you are already familiar with how to deploy Smart Contracts and use MetaMask, you can skip to the [Consuming Data Feeds](/docs/consuming-data-feeds/) guide to learn how to connect your smart contracts to Chainlink data feeds.\r\n\r\n:::\r\n\r\nIn general, you create and deploy your smart contracts operate using the following process:\r\n\r\n1. **Write:** Write a contract to define how the contract functions, what data it can store, what other contracts it interacts with, and what external APIs it might call.\r\n\r\n1. **Compile:** Pass your smart contract code through a compiler to translate the contract into byte code that the blockchain can understand. For example, [Solidity](https://soliditylang.org) code must be compiled before it can run in the [Ethereum Virtual Machine](https://ethereum.org/en/developers/docs/evm/).\r\n\r\n1. **Deploy:** Send the compiled smart contract to the blockchain. From that point forward, the contract cannot be altered. However, you can still interact with the contract in several ways.\r\n\r\n1. **Run functions:** When you run the functions that you defined for the contract, the network processes those functions and modifies the state of your contract. For some functions, the network charges a small fee to complete the work. Your contract can also have functions that transfer funds to other contracts or wallets.\r\n\r\nThis guide walks you through each step, but you must install and fund your MetaMask wallet first.\r\n\r\n## Install and fund your MetaMask wallet\r\n\r\nDeploying smart contracts on-chain requires a wallet and ETH. The ETH pays for the work required by the Ethereum network to add the contract to the blockchain and store the variables. The wallet holds the ETH that you need to pay for the transaction. Install MetaMask, configure it to use the [Goerli testnet](https://goerli.net/), and fund your wallet with free testnet ETH.\r\n\r\n1. [Install and configure the MetaMask extension](https://metamask.io/download) in your browser.\r\n\r\n1. After you install the extension, open your browser extension list and click MetaMask to open MetaMask.\r\n   ![Screenshot showing the browser extension list with MetaMask installed.](/images/getting-started/openMetaMask.png)\r\n\r\n1. Follow the instructions in MetaMask to create a new MetaMask wallet. The new wallet includes a 12-word mnemonic phrase. This phrase is the key to your wallet. Copy that phrase down in a very secure location that only you can access. You can use this phrase to retrieve your wallet later or add it to another browser.\r\n\r\n1. Set MetaMask to use the Goerli test network.\r\n   ![Screenshot showing the network selection menu in MetaMask. The Goerli Test Network is selected.](/images/getting-started/selectGoerli.webp)\r\n\r\n1. Select one of the available [Goerli faucets](/docs/link-token-contracts/#goerli-testnet) and follow the steps to send testnet ETH to your MetaMask wallet address. You can copy your wallet address by clicking your account name in MetaMask. After the faucet completes the transaction, you should have testnet ETH in your MetaMask wallet on the Goerli testnet.\r\n\r\nNow that you configured your wallet and funded it with testnet ETH, you can write, compile, and deploy your contract.\r\n\r\n## Write, compile, and deploy your first smart contract\r\n\r\nYour first contract is a simple `HelloWorld.sol` example. This example shows you how to set and retrieve variables in a smart contract on-chain.\r\n\r\n::solidity-remix[samples/Tutorials/HelloWorld.sol]\r\n\r\n1. [Open the example contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/Tutorials/HelloWorld.sol) in the Remix IDE. Remix opens and shows the contents of the smart contract. You can modify the code in this editor when you write your own contract.\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/Tutorials/HelloWorld.sol\" target=\"_blank\">Open in Remix</a>\r\n  <a href=\"/docs/conceptual-overview/#what-is-remix\" >What is Remix?</a>\r\n</div>\r\n\r\n1. Because the code is already written, you can start the compile step. On the left side of Remix, click the **Solidity Compiler** tab to view the compiler settings.\r\n   ![Screenshot showing the Compiler tab and its settings.](/images/getting-started/selectSolidityCompiler.png)\r\n\r\n1. For this contract, use the default compiler settings. Click the **Compile HelloWorld.sol** button to compile the contract. This converts the contract from Solidity into bytecode that the [Ethereum Virtual Machine](https://ethereum.org/en/developers/docs/evm/) can understand. Remix automatically detects the correct compiler version depending on the `pragma` that you specify in the contract.\r\n   ![Screenshot of the Compile button.](/images/getting-started/compileHelloWorld.png)\r\n\r\n1. After Remix compiles the contract, deploy it. On the left side of Remix, click the **Deploy and Run** tab to view the deployment settings.\r\n   ![Screenshot of the Deploy tab and its settings.](/images/getting-started/selectSolidityDeploy.png)\r\n\r\n1. In the deployment settings, select the **Injected Provider** environment. This tells Remix that you want to deploy your contract to the blockchain that you configured in MetaMask. You could optionally use one of the Javascript VM options, but they run in a virtual environment with no connection to an actual blockchain or Chainlink oracles.\r\n   ![Screenshot showing the Injected Provider environment selected.](/images/getting-started/selectWeb3.png)\r\n\r\n1. Next to the **Deploy** button, enter a message that you want to send with the smart contract when you deploy it. This contract has a constructor that sets an initial message when you deploy the contract.\r\n   ![Screenshot of the Deploy button with \"Hello world!\" as the defined message.](/images/getting-started/deployHelloWorld.png)\r\n\r\n1. Click the **Deploy** button to deploy the contract and its initial message to the blockchain network. MetaMask opens and asks you to confirm payment to deploy the contract. Make sure MetaMask is set to the Goerli network before you accept the transaction. Because these transactions are on the blockchain, they are not reversible.\r\n\r\n1. In the MetaMask prompt, click **Confirm** to approve the transaction and spend your testnet ETH required to deploy the contract.\r\n   ![Screenshot showing Metamask asking you to confirm the transaction.](/images/getting-started/confirmTransaction.png)\r\n\r\n1. After a few seconds, the transaction completes and your contract appears under the **Deployed Contracts** list in Remix. Click the contract dropdown to view its variables and functions.\r\n   ![Screenshot showing the deployed Hello World contract.](/images/getting-started/deployedContract.png)\r\n\r\n1. Click the `message` variable. Remix retrieves and prints the initial message that you set.\r\n   ![Screenshot showing the message function and the returned \"Hello World\" message.](/images/getting-started/runHelloWorld.png)\r\n\r\nThe contract has an address just like your wallet address. If you save this address, you can return to your deployed contract at any time to retrieve variables or execute functions. To see details about your deployed contract, copy the contract address from the list in Remix and search for it in the [Etherscan Goerli Testnet Explorer](https://goerli.etherscan.io/).\r\n\r\n## Run functions in your contract\r\n\r\nBecause you deployed the contract to an actual blockchain, several nodes on the test network confirmed your payment for the smart contract. The contract, its variables, and its functions remain in the blockchain permanently. To change the `message` variable that is stored with your contract, run the `updateMessage` function.\r\n\r\n1. In your deployed contract, enter a new message next to the `updateMessage` function.\r\n   ![Screenshot showing the updateMessage function with a new value.](/images/getting-started/runUpdateMessage.png)\r\n\r\n1. Click the `updateMessage` button to set the new message in the contract data. MetaMask opens and asks you to confirm payment to update the state of your contract.\r\n\r\n1. In the new MetaMask prompt, click **Confirm** to approve the transaction.\r\n   ![Screenshot showing Metamask asking you to confirm the transaction.](/images/getting-started/confirmTransaction.png)\r\n\r\n1. Click the `message` variable again to see the updated value. It might take a few seconds before the transaction updates the variable.\r\n   ![Screenshot showing the updated value for the `message` value.](/images/getting-started/runHelloWorldAgain.png)\r\n\r\nNow you know how to deploy example contracts to a test network and run the functions in those contracts. You can write your own contracts and test them using this same process.\r\n\r\nNext, read the [Consuming Data Feeds](/docs/consuming-data-feeds/) guide to learn how to connect your smart contracts to Chainlink Data Feeds and retrieve on-chain data that your smart contracts can act on.\r\n"
    },
    {
      "title": "Random Numbers: Using Chainlink VRF",
      "headings": [
        {
          "depth": 2,
          "slug": "how-is-randomness-generated-on-blockchains-what-is-chainlink-vrf",
          "text": "How is randomness generated on blockchains? What is Chainlink VRF?"
        },
        {
          "depth": 2,
          "slug": "what-is-the-request-and-receive-cycle",
          "text": "What is the Request and Receive cycle?"
        },
        {
          "depth": 2,
          "slug": "what-is-the-payment-process-for-generating-a-random-number",
          "text": "What is the payment process for generating a random number?"
        },
        {
          "depth": 2,
          "slug": "how-can-i-use-chainlink-vrf",
          "text": "How can I use Chainlink VRF?"
        },
        {
          "depth": 3,
          "slug": "create-and-fund-a-subscription",
          "text": "Create and fund a subscription"
        },
        {
          "depth": 3,
          "slug": "importing-vrfconsumerbasev2-and-vrfcoordinatorv2interface",
          "text": "Importing VRFConsumerBaseV2 and VRFCoordinatorV2Interface"
        },
        {
          "depth": 3,
          "slug": "contract-variables",
          "text": "Contract variables"
        },
        {
          "depth": 3,
          "slug": "initializing-the-contract",
          "text": "Initializing the contract"
        },
        {
          "depth": 3,
          "slug": "rolldice-function",
          "text": "rollDice function"
        },
        {
          "depth": 3,
          "slug": "fulfillrandomwords-function",
          "text": "fulfillRandomWords function"
        },
        {
          "depth": 3,
          "slug": "house-function",
          "text": "house function"
        },
        {
          "depth": 2,
          "slug": "how-do-i-deploy-to-testnet",
          "text": "How do I deploy to testnet?"
        },
        {
          "depth": 2,
          "slug": "how-do-i-add-my-contract-to-my-subscription-account",
          "text": "How do I add my contract to my subscription account?"
        },
        {
          "depth": 2,
          "slug": "how-do-i-test-rolldice",
          "text": "How do I test rollDice?"
        },
        {
          "depth": 2,
          "slug": "further-reading",
          "text": "Further Reading"
        }
      ],
      "url": "/getting-started/intermediates-tutorial",
      "section": "gettingStarted",
      "description": "Learn how to use randomness in your smart contracts using Chainlink VRF.",
      "content": "\r\n:::note[ Requirements]\r\n\r\nThis guide assumes that you have basic knowledge about writing and deploying smart contracts. If you are new to smart contract development, read the [Consuming Data Feeds](/docs/consuming-data-feeds/) guide before you begin.\r\n\r\n:::\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=rdJ5d8j1RCg&ab\" />\r\n\r\n<p style=\"text-align:center\">VRF v2 - Developer Walkthrough</p>\r\n\r\nIn this guide, you will learn about generating randomness on blockchains. This includes learning how to implement a Request and Receive cycle with Chainlink oracles and how to consume random numbers with Chainlink VRF in smart contracts.\r\n\r\n## How is randomness generated on blockchains? What is Chainlink VRF?\r\n\r\nRandomness is very difficult to generate on blockchains. This is because every node on the blockchain must come to the same conclusion and form a consensus. Even though random numbers are versatile and useful in a variety of blockchain applications, they cannot be generated natively in smart contracts. The solution to this issue is [**Chainlink VRF**](/docs/vrf/v2/introduction/), also known as Chainlink Verifiable Random Function.\r\n\r\n## What is the Request and Receive cycle?\r\n\r\nThe [previous guide](/docs/consuming-data-feeds/) explained how to consume Chainlink Data Feeds, which consist of reference data posted on-chain by oracles. This data is stored in a contract and can be referenced by consumers until the oracle updates the data again.\r\n\r\nRandomness, on the other hand, cannot be reference data. If the result of randomness is stored on-chain, any actor could retrieve the value and predict the outcome. Instead, randomness must be requested from an oracle, which generates a number and a cryptographic proof. Then, the oracle returns that result to the contract that requested it. This sequence is known as the **[Request and Receive cycle](./architecture-request-model/)**.\r\n\r\n## What is the payment process for generating a random number?\r\n\r\nVRF requests receive funding from subscription accounts. The [Subscription Manager](https://vrf.chain.link) lets you create an account and pre-pay for VRF requests, so that funding of all your application requests are managed in a single location.\r\nTo learn more about VRF requests funding, see [Subscriptions](/docs/vrf/v2/introduction/#subscriptions), [Subscription billing](/docs/vrf/v2/introduction/#subscription-billing).\r\n\r\n## How can I use Chainlink VRF?\r\n\r\nTo see a basic implementation of Chainlink VRF, see [Get a Random Number](/docs/vrf/v2/examples/get-a-random-number/). In this section, you will create an application that uses Chainlink VRF to generate randomness. The contract used in this application will have a [_Game of Thrones_](https://en.wikipedia.org/wiki/Game_of_Thrones) theme.\r\n\r\nThe contract will request randomness from Chainlink VRF. The result of the randomness will transform into a number between 1 and 20, mimicking the rolling of a 20 sided die. Each number represents a _Game of Thrones_ house. If the dice land on the value 1, the user is assigned house Targaryan, 2 for Lannister, and so on. A full list of houses can be found [here](https://gameofthrones.fandom.com/wiki/Great_House).\r\n\r\nWhen rolling the dice, it will accept an `address` variable to track which address is assigned to each house.\r\n\r\nThe contract will have the following functions:\r\n\r\n- `rollDice`: This submits a randomness request to Chainlink VRF\r\n- `fulfillRandomWords`: The function that the Oracle uses to send the result back\r\n- `house`: To see the assigned house of an address\r\n\r\n**Note**: to jump straight to the entire implementation, you can [open the VRFD20.sol contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFD20.sol) in remix.\r\n\r\n### Create and fund a subscription\r\n\r\nChainlink VRF requests receive funding from subscription accounts. The [Subscription Manager](https://vrf.chain.link) lets you create an account and pre-pay your use of Chainlink VRF requests.\r\nFor this example, create a new subscription on the Goerli testnet as explained [here](/docs/vrf/v2/examples/get-a-random-number/#create-and-fund-a-subscription).\r\n\r\n### Importing `VRFConsumerBaseV2` and `VRFCoordinatorV2Interface`\r\n\r\nChainlink maintains a [library of contracts](https://github.com/smartcontractkit/chainlink/tree/master/contracts) that make consuming data from oracles easier. For Chainlink VRF, you will use:\r\n\r\n- [`VRFConsumerBaseV2`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/VRFConsumerBaseV2.sol) that must be imported and extended from the contract that you create.\r\n- [`VRFCoordinatorV2Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol) that must be imported to communicate with the VRF coordinator.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n\r\n}\r\n```\r\n\r\n### Contract variables\r\n\r\nThis example is adapted for [Goerli testnet](/docs/vrf/v2/supported-networks/#goerli-testnet) but you can change the configuration and make it run for any [supported network](/docs/vrf/v2/supported-networks/#configurations).\r\n\r\n```solidity\r\nuint64 s_subscriptionId;\r\naddress vrfCoordinator = 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D;\r\nbytes32 s_keyHash = 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15;\r\nuint32 callbackGasLimit = 40000;\r\nuint16 requestConfirmations = 3;\r\nuint32 numWords =  1;\r\n```\r\n\r\n- `uint64 s_subscriptionId`: The subscription ID that this contract uses for funding requests. Initialized in the `constructor`.\r\n- `address vrfCoordinator`: The address of the Chainlink VRF Coordinator contract.\r\n- `bytes32 s_keyHash`: The gas lane key hash value, which is the maximum gas price you are willing to pay for a request in wei. It functions as an ID of the off-chain VRF job that runs in response to requests.\r\n- `uint32 callbackGasLimit`: The limit for how much gas to use for the callback request to your contract's `fulfillRandomWords` function. It must be less than the `maxGasLimit` on the coordinator contract. Adjust this value for larger requests depending on how your `fulfillRandomWords` function processes and stores the received random values. If your `callbackGasLimit` is not sufficient, the callback will fail and your subscription is still charged for the work done to generate your requested random values.\r\n- `uint16 requestConfirmations`: How many confirmations the Chainlink node should wait before responding. The longer the node waits, the more secure the random value is. It must be greater than the `minimumRequestBlockConfirmations` limit on the coordinator contract.\r\n- `uint32 numWords`: How many random values to request. If you can use several random values in a single callback, you can reduce the amount of gas that you spend per random value. In this example, each transaction requests one random value.\r\n\r\nTo keep track of addresses that roll the dice, the contract uses mappings. [Mappings](https://medium.com/upstate-interactive/mappings-in-solidity-explained-in-under-two-minutes-ecba88aff96e) are unique key-value pair data structures similar to hash tables in Java.\r\n\r\n```solidity\r\nmapping(uint256 => address) private s_rollers;\r\nmapping(address => uint256) private s_results;\r\n```\r\n\r\n- `s_rollers` stores a mapping between the `requestID` (returned when a request is made), and the address of the roller. This is so the contract can keep track of who to assign the result to when it comes back.\r\n- `s_results` stores the roller and the result of the dice roll.\r\n\r\n### Initializing the contract\r\n\r\nThe coordinator and subscription id must be initialized in the `constructor` of the contract. To use `VRFConsumerBaseV2` properly, you must also pass the VRF coordinator address into its constructor.\r\nThe address that creates the smart contract is the owner of the contract. the modifier `onlyOwner()` checks that only the owner is allowed to do some tasks.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n    // variables\r\n    // ...\r\n\r\n    // constructor\r\n    constructor(uint64 subscriptionId) VRFConsumerBaseV2(vrfCoordinator) {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        s_owner = msg.sender;\r\n        s_subscriptionId = subscriptionId;\r\n    }\r\n\r\n    //...\r\n    modifier onlyOwner() {\r\n        require(msg.sender == s_owner);\r\n        _;\r\n    }\r\n}\r\n```\r\n\r\n### `rollDice` function\r\n\r\nThe `rollDice` function will complete the following tasks:\r\n\r\n1. Check if the roller has already rolled since each roller can only ever be assigned to a single house.\r\n1. Request randomness by calling the VRF coordinator.\r\n1. Store the `requestId` and roller address.\r\n1. Emit an event to signal that the dice is rolling.\r\n\r\nYou must add a `ROLL_IN_PROGRESS` constant to signify that the dice has been rolled but the result is not yet returned. Also add a `DiceRolled` event to the contract.\r\n\r\nOnly the owner of the contract can execute the `rollDice` function.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n    // variables\r\n    uint256 private constant ROLL_IN_PROGRESS = 42;\r\n    // ...\r\n\r\n    // events\r\n    event DiceRolled(uint256 indexed requestId, address indexed roller);\r\n    // ...\r\n\r\n    // ...\r\n    // { constructor }\r\n    // ...\r\n\r\n    // rollDice function\r\n    function rollDice(address roller) public onlyOwner returns (uint256 requestId) {\r\n        require(s_results[roller] == 0, \"Already rolled\");\r\n        // Will revert if subscription is not set and funded.\r\n        requestId = COORDINATOR.requestRandomWords(\r\n        s_keyHash,\r\n        s_subscriptionId,\r\n        requestConfirmations,\r\n        callbackGasLimit,\r\n        numWords\r\n       );\r\n\r\n        s_rollers[requestId] = roller;\r\n        s_results[roller] = ROLL_IN_PROGRESS;\r\n        emit DiceRolled(requestId, roller);\r\n    }\r\n}\r\n```\r\n\r\n### `fulfillRandomWords` function\r\n\r\n`fulfillRandomWords` is a special function defined within the `VRFConsumerBaseV2` contract that our contract extends from. The coordinator sends the result of our generated `randomWords` back to `fulfillRandomWords`. You will implement some functionality here to deal with the result:\r\n\r\n1. Change the result to a number between 1 and 20 inclusively. Note that `randomWords` is an array that could contain several random values. In this example, request 1 random value.\r\n1. Assign the transformed value to the address in the `s_results` mapping variable.\r\n1. Emit a `DiceLanded` event.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n    // ...\r\n    // { variables }\r\n    // ...\r\n\r\n    // events\r\n    // ...\r\n    event DiceLanded(uint256 indexed requestId, uint256 indexed result);\r\n\r\n    // ...\r\n    // { constructor }\r\n    // ...\r\n\r\n    // ...\r\n    // { rollDice function }\r\n    // ...\r\n\r\n    // fulfillRandomWords function\r\n    function fulfillRandomWords(uint256 requestId , uint256[] memory randomWords) internal override {\r\n\r\n        // transform the result to a number between 1 and 20 inclusively\r\n        uint256 d20Value = (randomWords[0] % 20) + 1;\r\n\r\n        // assign the transformed value to the address in the s_results mapping variable\r\n        s_results[s_rollers[requestId]] = d20Value;\r\n\r\n        // emitting event to signal that dice landed\r\n        emit DiceLanded(requestId, d20Value);\r\n    }\r\n}\r\n```\r\n\r\n### `house` function\r\n\r\nFinally, the `house` function returns the house of an address.\r\n\r\nTo have a list of the house's names, create the `getHouseName` function that is called in the `house` function.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n    // ...\r\n    // { variables }\r\n    // ...\r\n\r\n    // ...\r\n    // { events }\r\n    // ...\r\n\r\n    // ...\r\n    // { constructor }\r\n    // ...\r\n\r\n    // ...\r\n    // { rollDice function }\r\n    // ...\r\n\r\n    // ...\r\n    // { fulfillRandomWords function }\r\n    // ...\r\n\r\n    // house function\r\n    function house(address player) public view returns (string memory) {\r\n        // dice has not yet been rolled to this address\r\n        require(s_results[player] != 0, \"Dice not rolled\");\r\n\r\n        // not waiting for the result of a thrown dice\r\n        require(s_results[player] != ROLL_IN_PROGRESS, \"Roll in progress\");\r\n\r\n        // returns the house name from the name list function\r\n        return getHouseName(s_results[player]);\r\n    }\r\n\r\n    // getHouseName function\r\n    function getHouseName(uint256 id) private pure returns (string memory) {\r\n        // array storing the list of house's names\r\n        string[20] memory houseNames = [\r\n            \"Targaryen\",\r\n            \"Lannister\",\r\n            \"Stark\",\r\n            \"Tyrell\",\r\n            \"Baratheon\",\r\n            \"Martell\",\r\n            \"Tully\",\r\n            \"Bolton\",\r\n            \"Greyjoy\",\r\n            \"Arryn\",\r\n            \"Frey\",\r\n            \"Mormont\",\r\n            \"Tarley\",\r\n            \"Dayne\",\r\n            \"Umber\",\r\n            \"Valeryon\",\r\n            \"Manderly\",\r\n            \"Clegane\",\r\n            \"Glover\",\r\n            \"Karstark\"\r\n        ];\r\n\r\n        // returns the house name given an index\r\n        return houseNames[id.sub(1)];\r\n    }\r\n}\r\n```\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFD20.sol\" target=\"_blank\" >Open in Remix</a>\r\n  <a href=\"/docs/conceptual-overview/#what-is-remix\" >What is Remix?</a>\r\n</div>\r\n\r\nYou have now completed all necessary functions to generate randomness and assign the user a _Game of Thrones_ house. We've added a few helper functions in there to make using the contract easier and more flexible. You can deploy and interact with the complete contract in Remix.\r\n\r\n## How do I deploy to testnet?\r\n\r\nYou will now deploy your completed contract. This deployment is slightly different than the example in the [Deploy Your First Contract](/docs/deploy-your-first-contract/) guide. In our case, you will have to pass in parameters to the constructor upon deployment.\r\n\r\nOnce compiled, you'll see a dropdown menu that looks like this in the deploy pane:\r\n\r\n![Remix contract selected](/files/intermediates-tutorial-01.png)\r\n\r\nSelect the `VRFD20` contract or the name that you gave to your contract. You will deploy this contract on the Goerli test network.\r\n\r\nClick the caret arrow on the right hand side of **Deploy** to expand the parameter fields, and paste your subscription id.\r\n\r\n![Remix contract parameters to deploy](/files/intermediates-tutorial-02.png)\r\n\r\nThen click the `Deploy` button and use your Metamask account to confirm the transaction.\r\n\r\n**Note**: You should [have some Goerli ETH](/docs/deploy-your-first-contract/#install-and-fund-your-metamask-wallet) in your Metamask account to pay for the GAS.\r\n\r\n:::note[ Address, Key Hashes and more]\r\n\r\nFor a full reference of the addresses, key hashes and fees for each network, see [VRF Supported Networks](/docs/vrf/v2/supported-networks/#configurations).\r\n\r\n:::\r\n\r\nAt this point, your contract should be successfully deployed. However, it can't request anything because it is not yet approved to use the LINK balance in your subscription. If you click `rollDice`, the transaction will revert.\r\n\r\n## How do I add my contract to my subscription account?\r\n\r\nAfter you deploy your contract, you must add it as an approved consumer contract so it can use the subscription balance when requesting for randomness. Go to the [Subscription Manager](https://vrf.chain.link) and add your deployed contract address to the list of consumers. Find your contract address in Remix under **Deployed Contracts** on the bottom left.\r\n\r\n![Remix contract address](/files/intermediates-tutorial-03.png)\r\n\r\n## How do I test `rollDice`?\r\n\r\nAfter you open the deployed contract tab in the bottom left, the function buttons are available. Find `rollDice` and click the caret to expand the parameter fields. Enter an Ethereum address to specify a \"dice roller\", and click 'rollDice'.\r\n\r\nYou will have to wait a few minutes for your transaction to confirm and the response to be sent back. You can get your house by clicking the `house` function button with the address passed in `rollDice`. After the response is sent back, you'll be assigned a _Game of Thrones_ house!\r\n\r\n## Further Reading\r\n\r\nTo read more about generating random numbers in Solidity, read our blog posts:\r\n\r\n- [35+ Blockchain RNG Use Cases Enabled by Chainlink VRF](https://blog.chain.link/blockchain-rng-use-cases-enabled-by-chainlink-vrf/)\r\n- [How to Build Dynamic NFTs on Polygon](https://blog.chain.link/how-to-build-dynamic-nfts-on-polygon/)\r\n- [Chainlink VRF v2 Now Live on Ethereum Mainnet](https://blog.chain.link/vrf-v2-mainnet-launch/)\r\n"
    },
    {
      "title": "Learning Resources",
      "headings": [
        {
          "depth": 2,
          "slug": "smart-contract-learning-materials",
          "text": "Smart contract learning materials"
        },
        {
          "depth": 3,
          "slug": "video-tutorials",
          "text": "Video tutorials"
        },
        {
          "depth": 3,
          "slug": "applications",
          "text": "Applications"
        },
        {
          "depth": 4,
          "slug": "data-feeds",
          "text": "Data feeds"
        },
        {
          "depth": 4,
          "slug": "randomness-vrf",
          "text": "Randomness (VRF)"
        },
        {
          "depth": 4,
          "slug": "api-requests",
          "text": "API requests"
        },
        {
          "depth": 4,
          "slug": "automation-keepers",
          "text": "Automation (Keepers)"
        },
        {
          "depth": 3,
          "slug": "game-resources",
          "text": "Game resources"
        },
        {
          "depth": 3,
          "slug": "coding-bootcamps",
          "text": "Coding bootcamps"
        },
        {
          "depth": 3,
          "slug": "starter-kits",
          "text": "Starter kits"
        },
        {
          "depth": 3,
          "slug": "external-tutorials",
          "text": "External tutorials"
        },
        {
          "depth": 3,
          "slug": "more-inspiration",
          "text": "More inspiration"
        },
        {
          "depth": 2,
          "slug": "outreach",
          "text": "Outreach"
        },
        {
          "depth": 3,
          "slug": "get-support",
          "text": "Get support"
        },
        {
          "depth": 3,
          "slug": "join-the-community",
          "text": "Join the community"
        }
      ],
      "url": "/getting-started/other-tutorials",
      "section": "gettingStarted",
      "content": "\r\nWelcome to the Resources page. This is a list of links and pages that you might need to help you throughout your learning journey. If you're new to Chainlink, start with the [Getting Started](/docs/conceptual-overview/) guide to better understand the products and services Chainlink offers. This page contains more resources, inspiration, and outreach information to further your learning.\r\n\r\n## Smart contract learning materials\r\n\r\nVideos, tutorials, examples, and bootcamps are a great way to get experience building smart contracts and using Chainlink products. The following learning materials are useful for expanding your knowledge.\r\n\r\n### Video tutorials\r\n\r\nWe're constantly uploading new videos to our [YouTube](https://www.youtube.com/c/chainlink) channel. Here are some direct links to playlists that may be helpful if you're starting your Chainlink learning journey or if you're looking for interesting ways to apply Chainlink to your project:\r\n\r\n- [Two-Minute Explainers](https://www.youtube.com/playlist?list=PLVP9aGDn-X0Q3qBME3T9sBMw66xPsglMA)\r\n- [Chainlink Developer Workshops](https://www.youtube.com/playlist?list=PLVP9aGDn-X0SPHromvpiGvoNDpH7YErmf)\r\n- [Chainlink Engineering Tutorials](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J)\r\n- [Solidity, Blockchain, and Smart Contract Python Course](https://www.youtube.com/watch?v=M576WGiDBdQ)\r\n- [Chainlink Engineering YouTube](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J)\r\n- [Dapp University](https://www.youtube.com/watch?v=YLmMNocc1ys)\r\n- [Austin Griffith](https://www.youtube.com/watch?v=ffU96UhlA0A)\r\n- [Patrick Collins](https://www.youtube.com/watch?v=p36tXHX1JD8)\r\n- [Nader Dabit](https://www.youtube.com/watch?v=nS9xP1hxg3w)\r\n\r\n### Applications\r\n\r\nBelow is a list of applications of Chainlink's products and services sorted by difficulty and type to help you navigate and search for projects that you might find interesting. See the [Chainlink Blog](https://blog.chain.link/) to stay up to date with new ways to use Chainlink.\r\n\r\n#### Data feeds\r\n\r\n| Name                                                                                                                                              | Type     | Difficulty |\r\n| :------------------------------------------------------------------------------------------------------------------------------------------------ | :------- | :--------- |\r\n| [How to Calculate Price Volatility for DeFi Variance Swaps](https://blog.chain.link/how-to-calculate-price-volatility-for-defi-variance-swaps/)   | DeFi     | Advanced   |\r\n| [Build a dApp on Gnosis Chain (xDai) with Secure Data Feeds](https://blog.chain.link/build-a-dapp-on-xdai-chain-with-secure-data-feeds/)          | DeFi     | Medium     |\r\n| [Craft Whiskey Crypto Payments With Chainlink Oracles](https://blog.chain.link/craft-whiskey-crypto-payments-with-chainlink-oracles/)             | Payments | Advanced   |\r\n| [Convert a Vending Machine to Accept Cryptocurrency Payments Using Chainlink Data Feeds](https://blog.chain.link/cryptocurrency-vending-machine/) | Payments | Advanced   |\r\n| [Build a dApp on BNB Chain With Secure Data Feeds](https://blog.chain.link/build-a-dapp-on-binance-smart-chain-with-secure-data-feeds/)           | DeFi     | Medium     |\r\n| [How to Use Chainlink With Hardhat](https://blog.chain.link/using-chainlink-with-hardhat/)                                                        | DeFi     | Medium     |\r\n| [Develop a DeFi Project Using Python](https://blog.chain.link/develop-python-defi-project/)                                                       | DeFi     | Medium     |\r\n| [Build a DeFi Call Option Exchange With Chainlink Data Feeds](https://blog.chain.link/defi-call-option-exchange-in-solidity/)                     | DeFi     | Advanced   |\r\n| [Build a DeFi Yield Farming dApp Using Chainlink Data Feeds](https://blog.chain.link/build-defi-yield-farming-application-with-chainlink/)        | DeFi     | Advanced   |\r\n| [Build and Deploy an Avalanche Smart Contract](https://blog.chain.link/how-to-build-and-deploy-an-avalanche-smart-contract/)                      | DeFi     | Beginner   |\r\n\r\n#### Randomness (VRF)\r\n\r\n| Name                                                                                                                | Type     | Difficulty |\r\n| :------------------------------------------------------------------------------------------------------------------ | :------- | :--------- |\r\n| [How to Get a Random Number on Polygon](https://blog.chain.link/how-to-get-a-random-number-on-polygon/)             | DeFi     | Medium     |\r\n| [Build Your Own Dynamic NFT With Hardhat](https://blog.chain.link/dynamic-nft-hardhat/)                             | NFT      | Advanced   |\r\n| [Build, Deploy, and Sell Your Own Dynamic NFT](https://blog.chain.link/build-deploy-and-sell-your-own-dynamic-nft/) | NFT      | Advanced   |\r\n| [How to Build a Blockchain Lottery](https://blog.chain.link/how-to-build-a-blockchain-lottery-2/)                   | Gambling | Advanced   |\r\n\r\n#### API requests\r\n\r\n| Name                                                                                                                                                           | Type                 | Difficulty |\r\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------- | :--------- |\r\n| [Build a Real Estate dApp With Chainlink Oracles](https://blog.chain.link/build-a-real-estate-dapp-with-chainlink-oracles/)                                    | Real-Estate          | Medium     |\r\n| [Off-Chain Computation: Statistical Analysis With Chainlink](https://blog.chain.link/off-chain-computation-statistical-analysis-with-chainlink/)               | Statistical Analysis | Advanced   |\r\n| [Blockchain Fintech Tutorial: Lending and Borrowing With Python](https://blog.chain.link/blockchain-fintech-defi-tutorial-lending-borrowing-python/)           | Lending              | Medium     |\r\n| [Build a Blockchain-Based Fantasy Sports Game Using a Chainlink External Adapter](https://blog.chain.link/blockchain-based-fantasy-sports-game)                | Sports               | Medium     |\r\n| [Fetch IPFS Data in Smart Contracts Using a Chainlink External Adapter](https://blog.chain.link/fetch-ipfs-api-data-token-distribution/)                       | Audius               | Medium     |\r\n| [How to Connect a Two-Factor Authentication (2FA) API to a Smart Contract With Chainlink](https://blog.chain.link/2fa-authentication-smart-contracts/)         | Security             | Medium     |\r\n| [Build a Marine Insurance Smart Contract With Chainlink](https://blog.chain.link/build-a-marine-insurance-smart-contract-with-chainlink/)                      | Insurance            | Medium     |\r\n| [How to Build a Parametric Insurance Smart Contract](https://blog.chain.link/parametric-insurance-smart-contract/)                                             | Insurance            | Advanced   |\r\n| [Connect a Smart Contract to the Twitter API](https://blog.chain.link/connect-smart-contract-to-twitter-api/)                                                  | Social Media         | Advanced   |\r\n| [Build an RFID Blockchain Integration With Chainlink External Adapters](https://blog.chain.link/rfid-blockchain-integration-with-chainlink-external-adapters/) | Identification       | Advanced   |\r\n| [How to Connect a Tesla Vehicle API to a Smart Contract Via a Chainlink External Adapter](https://blog.chain.link/create-tesla-smart-contract-rental/)         | Transportation       | Advanced   |\r\n| [OAuth and API Authentication in Smart Contracts](https://blog.chain.link/oauth-and-api-authentication-in-smart-contracts-2/)                                  | Security             | Advanced   |\r\n\r\n#### Automation (Keepers)\r\n\r\n| Name                                                                                                                                                                                                | Type       | Difficulty |\r\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------- | :--------- |\r\n| [Smart Contract Automation Master Class Module #1](https://youtu.be/D3rMFshrj7c)                                                                                                                    | Automation | Beginner   |\r\n| [Smart Contract Automation Master Class Module #2](https://youtu.be/UT2qpUh0tmA/)                                                                                                                   | Automation | Beginner   |\r\n| [Entropyfi Saves Engineering Hours with Chainlink Keepers](https://medium.com/entropyfi/entropyfi-saves-engineering-hours-with-chainlink-keepers-6ec172a76249)                                      | Gaming     | Medium     |\r\n| [Enabling Limit Orders on CivTrade With Chainlink Keepers](https://news.civfund.org/civtrade-with-chainlink-keepers-8b6c3965a92e)                                                                   | Trading    | Medium     |\r\n| [Pickle Finance UniV3 Jars Powered by Chainlink Keepers](https://picklefinance.medium.com/pickle-finance-univ3-jars-powered-by-chainlink-keepers-8ce1756a2497)                                      | Finance    | Medium     |\r\n| [JamonSwap Introduces New Limit Order Functionality Using Chainlink Keepers](https://medium.com/@JamonSwap/jamonswap-introduces-new-limit-order-functionality-using-chainlink-keepers-51bd94d75feb) | DeFi       | Medium     |\r\n| [How Cratos used Chainlink Keepers to automate the token vesting process](https://cratostoken.medium.com/how-cratos-used-chainlink-keepers-to-automate-the-token-vesting-process-69bcb3611161)      | DeFi       | Medium     |\r\n| [Enabling automated NFT lotteries with Chainlink Keepers and VRF](https://czodiac.medium.com/enabling-automated-nft-lotteries-with-chainlink-keepers-and-vrf-34dcc191965b)                          | NFT        | Medium     |\r\n| [How ApeSwap Integrated Chainlink Keepers for BANANA Maximizer Vaults](https://ape-swap.medium.com/how-apeswap-integrated-chainlink-keepers-for-banana-maximizer-vaults-2e88abb34eca)               | DeFi       | Medium     |\r\n\r\n### Game resources\r\n\r\n- [CryptoZombies](https://cryptozombies.io/)\r\n- [DamnVulnerableDefi](https://damnvulnerabledefi.xyz/challenges/8.html)\r\n- [Ethernaut](https://ethernaut.openzeppelin.com/)\r\n\r\n### Coding bootcamps\r\n\r\n- [ChainShot](https://www.chainshot.com/courses)\r\n- [Consensys Bootcamp](https://consensys.net/academy/bootcamp/)\r\n- [Ivan On Tech](https://academy.moralis.io/courses/chainlink-101)\r\n\r\n### Starter kits\r\n\r\nOur Starter Kits help jumpstart your full-stack development process. You can get starter kits for Brownie (Python), Truffle (Javascript), and Hardhat (Javascript). See the [Engineering Tutorials](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J) playlist to learn more about each kit and how to use them.\r\n\r\n- [Chainlink Brownie Starter Kit (Python)](https://github.com/smartcontractkit/chainlink-mix)\r\n- [Chainlink Truffle Starter Kit (Javascript)](https://github.com/smartcontractkit/truffle-starter-kit)\r\n- [Chainlink Hardhat Starter Kit (Javascript)](https://github.com/smartcontractkit/hardhat-starter-kit)\r\n\r\n### External tutorials\r\n\r\n- [Ethereum Developers](https://ethereum.org/en/developers/tutorials/)\r\n- [useWeb3](https://www.useweb3.xyz/)\r\n\r\n### More inspiration\r\n\r\nLooking for more ways to use Chainlink? Here are some resources that discuss Chainlink's use cases as well as the winning projects we've had in our previous hackathons. There is also a link to the Marketplace where you can find the latest data provider nodes and explore the network.\r\n\r\n- [77 Use Cases by Chainlink](https://blog.chain.link/44-ways-to-enhance-your-smart-contract-with-chainlink/)\r\n- [Past Hackathon Winning Projects](/docs/example-projects)\r\n\r\n## Outreach\r\n\r\nThe Chainlink community is an inviting group of engineers that is always looking to help users expand their knowledge on Chainlink and solve related issues. Refer back to the [Getting Help](/docs/getting-help) page for the latest information about how to get support.\r\n\r\n### Get support\r\n\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/chainlink)\r\n- [Stack Exchange Ethereum](https://ethereum.stackexchange.com/questions/tagged/chainlink)\r\n- [Hackathon Discord](https://discord.gg/h3AvTHj)\r\n- [Developer Discord](https://discord.gg/2YHSAey)\r\n\r\n### Join the community\r\n\r\n- [Twitter](https://mobile.twitter.com/chainlink)\r\n- [Reddit](https://www.reddit.com/r/Chainlink/)\r\n- [Telegram](https://t.me/chainlinkofficial)\r\n- [Blog](https://blog.chain.link)\r\n"
    },
    {
      "title": "Acquire testnet LINK",
      "headings": [
        {
          "depth": 2,
          "slug": "configure-metamask-to-use-link-tokens",
          "text": "Configure MetaMask to use LINK tokens"
        },
        {
          "depth": 2,
          "slug": "get-testnet-link-from-a-faucet",
          "text": "Get testnet LINK from a faucet"
        }
      ],
      "url": "/resources/acquire-link",
      "section": "ethereum",
      "content": "\r\nThe Getting Started guides show you how to send ETH on the Goerli testnet, but some contracts might require you to use LINK token instead. This page shows you how to obtain testnet LINK and send it to your MetaMask wallet.\r\n\r\n\r\n## Configure MetaMask to use LINK tokens\r\n\r\nTo see your LINK token balance in MetaMask, you must manually add the token.\r\n\r\n1. Open up MetaMask.\r\n1. At the bottom of the MetaMask windows, click **Import tokens**.\r\n1. Find the LINK token contract address for the network that you want to use. On Goerli the LINK token address is: `0x326C977E6efc84E512bB9C30f76E30c160eD06FB`. See the [LINK Token Contracts](/docs/link-token-contracts/) page to find addresses for different testnets.\r\n1. Paste the token contract address into MetaMask in the Token Address input. The token symbol and decimals of precision will auto-populate.\r\n    ![Metamask Custom Tokens Screen](/images/getting-started/metamaskImportTokens.webp)\r\n1. Click **Next**. A new window will appears, showing the LINK token details.\r\n1. Click **Import Tokens** to confirm adding the new token.\r\n\r\nMetaMask should now display the new LINK token balance.\r\n\r\n## Get testnet LINK from a faucet\r\n\r\n1. Go to [https://faucets.chain.link/](https://faucets.chain.link/).\r\n1. In Metmask, select the network where you want to receive testnet LINK.\r\n1. Click **Connect wallet** so the faucet app can detect the network and wallet address.\r\n1. If you want to receive testnet funds at a different address, paste it in the **Wallet address** section. This field defaults to your connected wallet address.\r\n1. In the **Request type** section, select the testnet funds that you want to receive.\r\n1. Complete the Captcha and click **Send request**. The funds are transferred from the faucet to the wallet address that you specified.\r\n\r\nAfter the transaction is confirmed on-chain, the faucet app shows \"Request complete\" and the transaction hash of your request.\r\n\r\n![Successful Faucet Request Message](/files/faucet-success.png)\r\n"
    },
    {
      "title": "Contributing to Chainlink",
      "headings": [
        {
          "depth": 1,
          "slug": "what-it-means-to-contribute",
          "text": "What It Means to Contribute"
        },
        {
          "depth": 1,
          "slug": "why-should-you-contribute",
          "text": "Why Should You Contribute"
        },
        {
          "depth": 1,
          "slug": "ways-to-contribute",
          "text": "Ways to Contribute"
        },
        {
          "depth": 2,
          "slug": "contributing-to-software-and-tooling",
          "text": "Contributing to Software and Tooling"
        },
        {
          "depth": 3,
          "slug": "raising-an-issue",
          "text": "Raising an Issue"
        },
        {
          "depth": 3,
          "slug": "requesting-a-new-feature",
          "text": "Requesting a new Feature"
        },
        {
          "depth": 4,
          "slug": "voting-on-new-features",
          "text": "Voting on new features"
        },
        {
          "depth": 3,
          "slug": "submitting-a-pull-request",
          "text": "Submitting a Pull Request"
        },
        {
          "depth": 2,
          "slug": "contributing-to-the-documentation",
          "text": "Contributing to the documentation"
        },
        {
          "depth": 2,
          "slug": "creating-community-content",
          "text": "Creating Community Content"
        },
        {
          "depth": 2,
          "slug": "becoming-a-developer-expert",
          "text": "Becoming a Developer Expert"
        },
        {
          "depth": 2,
          "slug": "joining-the-chainlink-community-advocate-program",
          "text": "Joining the Chainlink Community Advocate program"
        },
        {
          "depth": 2,
          "slug": "running-a-chainlink-focused-developer-bootcamp",
          "text": "Running a Chainlink Focused Developer Bootcamp"
        },
        {
          "depth": 2,
          "slug": "running-an-in-person-meetup-or-watch-party",
          "text": "Running an In-Person Meetup or Watch Party"
        },
        {
          "depth": 2,
          "slug": "participate-in-a-hackathon",
          "text": "Participate in a Hackathon"
        },
        {
          "depth": 2,
          "slug": "applying-for-a-grant",
          "text": "Applying for a Grant"
        }
      ],
      "url": "/resources/contributing-to-chainlink",
      "section": "ethereum",
      "content": "\r\nChainlink is an open-source project licensed [under the MIT license](https://github.com/smartcontractkit/chainlink/blob/master/LICENSE), and we encourage contributions from all developers and community members.\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=nerpcSPN4kE\" />\r\n\r\n# What It Means to Contribute\r\n\r\nWhen you contribute to the Chainlink project, you as a developer or community member contribute your time and effort to help improve and grow Chainlink. Your contribution can be from various methods:\r\n\r\n- [Building and maintaining the Chainlink software and tools](#contributing-to-software-and-tooling)\r\n- [Improving and maintaining the documentation, including translations into other languages](#contributing-to-the-documentation)\r\n- [Creating Chainlink focused content (blog posts, tutorials, videos etc)](#creating-community-content)\r\n- [Becoming a developer expert](#becoming-a-developer-expert)\r\n- [Becoming a community advocate](#joining-the-chainlink-community-advocate-program)\r\n- [Running a Chainlink focused developer Bootcamp (in person or online)](#running-a-chainlink-focused-developer-bootcamp)\r\n- [Running an in-person meetup or watch party](#running-an-in-person-meetup-or-watch-party)\r\n- [Participate in a hackathon](#participate-in-a-hackathon)\r\n- [Applying for a grant](#applying-for-a-grant)\r\n\r\n# Why Should You Contribute\r\n\r\n[Open source software](https://en.wikipedia.org/wiki/Open-source_software) is a model that brings multiple benefits for both the project and the contributors. As a developer or community member, contributing to Chainlink helps you to gain valuable skills and experience, improve the software that you use, and grow your personal brand in the community which can lead to future employment opportunities. On top of these awesome things, contributing to open source is fun. It can give you a sense of community involvement, and gives you a personal sense of satisfaction knowing that you're part of an effort to build something that will enable a fairer, more transparent, and efficient new world.\r\n\r\n# Ways to Contribute\r\n\r\n## Contributing to Software and Tooling\r\n\r\nThe most direct way you can contribute to Chainlink is to contribute to the core code or the various tooling found in our [GitHub repository](https://github.com/smartcontractkit/). Contributing to code or code-based tools can generally be split into a few different categories:\r\n\r\n- Raising an issue\r\n- Requesting a new feature\r\n- Submitting a Pull Request (PR) for a fix, improvement, or new tool\r\n\r\n### Raising an Issue\r\n\r\nDuring the course of using Chainlink software or tools, you might encounter errors or unexpected behavior that leads you to believe the software isn't behaving correctly. You can bring this to the attention of the Chainlink Labs team as well as the wider developer community by raising an issue in the project’s GitHub repository. The 'Issues' tab lists all of the open issues for the repository.\r\n\r\nAfter an issue is raised and tagged, the Chainlink Labs team and the wider community can address it. This gives the issue the visibility required for someone to investigate it and resolve the issue.\r\n\r\nWhen you first create an issue, you must also categorize it. This prefixes the issue name to give viewers an indication of what category the issue relates to:\r\n\r\n- [NODE]: The issue relates to the core node software\r\n- [DEVEL]: The issue is a result of working on code found in the current repository\r\n- [FEAT]: The issue relates to a new feature request\r\n- [SMRT]: The issue related to using Chainlink smart contracts\r\n- [EXPL]: The issue related to using the Chainlink Explorer\r\n- [FAUC]: The issue related to using the Chainlink Faucet\r\n\r\n![Selecting the new issue category](/files/new-issue-category.png)\r\n\r\nAfter you select a category, enter the details for the issue. Include as much detail about the issue as possible. Provide a thorough description, environment, and software version details. Also provide detailed steps that describe how to reproduce the issue. The more thorough you make your description, the better the chances are that someone will be able to pick up the issue and resolve it.\r\n\r\nOnce a team member acknowledges that the issue has been received, they will tag it with an appropriate label. You should then monitor the state of the open issue for any questions or updates.\r\n\r\n### Requesting a new Feature\r\n\r\nHave you thought of an improvement or an awesome new feature that you think should be implemented into Chainlink? Request a new feature to bring it to the attention of the team and the wider community. You can request new features by creating a new GitHub issue in the correct repository and tagging that issue with the [FEAT] prefix (Feature request). The process for doing this is covered in the [Raising an Issue](#raising-an-issue) section. Provide as much detail as possible in your feature request, including any benefits, risks, or considerations that you can think of.\r\n\r\n#### Voting on new features\r\n\r\nSometimes a new feature is put to a vote to decide if it's something that the team and wider community should implement. When an feature is put to a vote, the issue is tagged with the 'needs votes' label. You can contribute to the voting process by reacting to the first post in the feature request with a thumbs up or thumbs down emoji. This will help drive the decision. You can also contribute your thoughts by replying directly to the feature request with a new post in the thread.\r\n\r\n![Voting on a new feature request](/files/voting-issue.png)\r\n\r\n### Submitting a Pull Request\r\n\r\nThe best way to contribute to Chainlink is to submit a [pull request (PR)](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests). PRs can be submitted for various reasons, such as fixing an identified issue, adding a feature or improvement to the project, or even adding an entirely new repository to the Chainlink source code for a new tool or feature. If you're looking for something to pick up and create a PR for, you can search through the Chainlink repositories to find open issues, and approved feature requests.\r\n\r\nIf you're new to contributing to open-source software or Chainlink, we've tagged some [good first issues](https://github.com/smartcontractkit/chainlink/issues?q=is%3Aissue+label%3A%22good+first+issue%22) against the main node software and smart contracts that you can tackle. Each major repository in the Chainlink GitHub should also have some good first issues tagged for developers to be able to take on.\r\n\r\nAll code changes must follow the [style guide] (https://github.com/smartcontractkit/chainlink/wiki/Code-Style-Guide), All PRs must be in an appropriately named branch with a format like 'feat/feature-description' or 'devel/issue-description'. After you submit a PR, you should get a response by a team member within a day or two acknowledging that the PR has been received. After that, monitor the PR for any additional questions or updates that come up while the team and the community review the changes.\r\n\r\n## Contributing to the documentation\r\n\r\nThe [Chainlink documentation](https://docs.chain.link/) is the go-to place for developers who want to learn how to build applications using Chainlink, and node operators wanting useful information on running a Chainlink node. The documentation is [open source](https://github.com/smartcontractkit/documentation), allowing for other developers and community members to contribute to adding or improving it. You can contribute to the Chainlink documentation in various ways:\r\n\r\n- Improving the readability of pages\r\n- Fixing typos or grammar errors\r\n- Adding new guides or tutorials that you would find useful\r\n- Translating the documentation into other languages\r\n\r\nThe process for contributing to the documentation follows the process defined earlier in the [Submitting a Pull Request](#submitting-a-pull-request) section. Each page also has a 'Suggest Edits' link on the top right, and will directly take you to the page in the [documentation repository](https://github.com/smartcontractkit/documentation), where you can create a new PR with the suggested changes. Before you create a PR for the documentation, read the [contributing guidelines](https://github.com/smartcontractkit/documentation/blob/main/CONTRIBUTING.md).\r\n\r\nIf you want to translate the documentation into a new language that is not yet supported, feel free to [reach out to the team](mailto:devrel@smartcontract.com) beforehand, so we can make sure you get the support you need.\r\n\r\n## Creating Community Content\r\n\r\nChainlink has a strong and vibrant community of developers and community advocates. Community members often create Chainlink-focused content in various forms and publish it for the wider community on various platforms. This increases knowledge and awareness of Chainlink solutions across the wider community and builds the contributor's personal skills and brand in the community.\r\n\r\nSome examples of the content generated from the community:\r\n\r\n- Document your experience in using Chainlink as part of your project\r\n- Do a deep dive blog post or video on a Chainlink solution\r\n- Write up technical tutorials showcasing Chainlink being used in various use cases\r\n\r\n## Becoming a Developer Expert\r\n\r\nChainlink Developer Experts are smart contract and blockchain developers with deep experience building applications using Chainlink. They are passionate about sharing their technical knowledge with the world. As a developer expert, you will receive recognition in the community, previews of new Chainlink features, exclusive access to Chainlink events, and opportunities to level up your technical and soft skills. You can apply to become a developer expert on the [Chainlink Developer Experts page](https://chain.link/developers/experts).\r\n\r\n## Joining the Chainlink Community Advocate program\r\n\r\nThe [Chainlink Community Advocate Program](https://blog.chain.link/expanding-the-chainlink-community-advocate-program/) is a program designed to help accelerate the awareness and adoption of Chainlink. Chainlink community advocates are passionate members of the Chainlink community that help to achieve this by running virtual and in-person meetups, connecting with partners and sponsors, creating content, and working directly with the teams that are making Chainlink-powered smart contracts. Many Advocates have gone on to have rewarding careers in the blockchain industry, and some of them work on Chainlink specifically.\r\n\r\nTo become a community advocate, you can apply via the [community advocates web page](https://chain.link/community/advocates).\r\n\r\n## Running a Chainlink Focused Developer Bootcamp\r\n\r\nIn June 2021, Chainlink [virtually hosted](https://blog.chain.link/smart-contract-developer-bootcamp-on-demand/) the first [Chainlink Developer Bootcamp](http://chain.link/bootcamp). If you're passionate about educating others about smart contracts and Chainlink, you can contribute by running your own developer Bootcamp. You can also contribute by translating an existing Bootcamp and running it in another language. Before you run your own Bootcamp, [reach out to the team](mailto:devrel@smartcontract.com) so we can make sure you have the support that you need.\r\n\r\n## Running an In-Person Meetup or Watch Party\r\n\r\nIf you're passionate about helping to grow the awareness and adoption of Chainlink, you can contribute by running an in-person meetup or watch party for a Chainlink event such as [SmartCon](https://www.smartcontractsummit.io/). Meetups are a great way to meet others also passionate about how hybrid smart contracts can create an economically fair world.\r\n\r\nIf you're interested in running an in-person meetup or watch party, [reach out to the team](mailto:community@smartcontract.com) so we can make sure you have the support that you need.\r\n\r\n## Participate in a Hackathon\r\n\r\nChainlink runs hackathons multiple times per year and often sponsors other hackathons across the blockchain ecosystem. Participating in a hackathon that Chainlink is a part of is a great way to learn how to use Chainlink. It is also a great way to showcase your skills to the Chainlink team and the wider community. Hackathons are a popular place for recruiting talent into the blockchain ecosystem.\r\n\r\nTo stay up to date on the hackathons that Chainlink is running or sponsoring, keep an eye out on the official Chainlink social media channels, and sign up for our [developer newsletter](https://docs.chain.link/docs/developer-communications/).\r\n\r\n## Applying for a Grant\r\n\r\nThe [Chainlink grant program](https://chain.link/community/grants) encourages the community to create critical developer tooling, add high-quality data, and the launch key services around the Chainlink Network. Grant categories include community, integration, bug bounty, research, and social impact grants. If you have a great idea that fits into one of these categories, you can apply for a grant. If successful, you will receive the funding and support needed to successfully build and implement your idea.\r\n\r\nFor more information about the grant program, go to the [Chainlink Grants web page](https://chain.link/community/grants).\r\n"
    },
    {
      "title": "Install Frameworks",
      "headings": [
        {
          "depth": 1,
          "slug": "install-into-existing-projects",
          "text": "Install into Existing Projects"
        },
        {
          "depth": 2,
          "slug": "npm",
          "text": "NPM"
        },
        {
          "depth": 2,
          "slug": "yarn",
          "text": "Yarn"
        },
        {
          "depth": 1,
          "slug": "create-a-new-project",
          "text": "Create a New Project"
        },
        {
          "depth": 2,
          "slug": "hardhat-starter-kit",
          "text": "Hardhat Starter Kit"
        },
        {
          "depth": 2,
          "slug": "brownie-starter-kit",
          "text": "Brownie Starter Kit"
        },
        {
          "depth": 2,
          "slug": "truffle-starter-kit",
          "text": "Truffle Starter Kit"
        },
        {
          "depth": 2,
          "slug": "dapptools-starter-kit",
          "text": "DappTools Starter Kit"
        },
        {
          "depth": 2,
          "slug": "foundry-starter-kit",
          "text": "Foundry Starter Kit"
        },
        {
          "depth": 1,
          "slug": "using-chainlink-contracts",
          "text": "Using Chainlink Contracts"
        },
        {
          "depth": 1,
          "slug": "testing-chainlink-contracts",
          "text": "Testing Chainlink Contracts"
        }
      ],
      "url": "/resources/create-a-chainlinked-project",
      "section": "ethereum",
      "content": "![Starter Kits Logos](/files/c6e99c5-Untitled_design_23.png)\r\n\r\nThis page explains how to install and use the [Chainlink Library](/docs/any-api/api-reference/) in your projects, either manually or via the user of the Chainlink Starter Kits.\r\n\r\n:::note[ Important]\r\n\r\n If you're new to smart contract development and want a step-by-step guide, try out our [Getting Started](/docs/conceptual-overview/) guide.\r\n\r\n:::\r\n\r\n# Install into Existing Projects\r\n\r\nChainlink is supported by [Hardhat](http://hardhat.org), [Brownie](https://eth-brownie.readthedocs.io/en/stable), [Truffle](https://www.trufflesuite.com) and other frameworks.\r\n\r\nIf you already have a project, you can add Chainlink to it by using the following package managers.\r\n\r\n## NPM\r\n\r\nInstall using [NPM](https://www.npmjs.com/):\r\n\r\n```shell npm\r\nnpm install @chainlink/contracts --save\r\n```\r\n\r\n## Yarn\r\n\r\nInstall using [Yarn](https://yarnpkg.com/):\r\n\r\n```shell yarn\r\nyarn add @chainlink/contracts\r\n```\r\n\r\n# Create a New Project\r\n\r\nIf you're creating a new project from scratch, these commands will help you set up your project to interact with Chainlink tools and features via the use of our Starter Kits.\r\n\r\n## Hardhat Starter Kit\r\n\r\nTo learn more about Hardhat, see the [Hardhat Documentation](https://hardhat.org/getting-started/).\r\n\r\nClone the starter kit. The starter kit includes Hardhat, so you don't need to install it separately.\r\n\r\n```shell\r\ngit clone https://github.com/smartcontractkit/hardhat-starter-kit\r\ncd hardhat-starter-kit\r\n```\r\n\r\nFor instructions on how to use the starter kit, refer to the [Hardhat starter kit README](https://github.com/smartcontractkit/hardhat-starter-kit/blob/main/README.md).\r\n\r\nFor more details on how to use Chainlink with Hardhat, see our blog post about [How to use Hardhat with Chainlink](https://blog.chain.link/using-chainlink-with-hardhat/).\r\n___\r\n\r\n## Brownie Starter Kit\r\n\r\nBefore you begin, [install Brownie](https://eth-brownie.readthedocs.io/en/stable/install.html).\r\n\r\nWith Brownie installed, run the commands below to open a Brownie project in a new directory.\r\n\r\n```shell\r\nmkdir MyChainlinkProject\r\ncd MyChainlinkProject/\r\nbrownie bake chainlink-mix\r\ncd chainlink-mix\r\n```\r\nFor instructions on how to use the starter kit, refer to the [Brownie starter kit README](https://github.com/smartcontractkit/chainlink-mix/blob/master/README.md).\r\n\r\nFor more details on how to use Chainlink with Brownie, see the [Develop a DeFi Project Using Python](https://blog.chain.link/develop-python-defi-project/) blog post.\r\n___\r\n\r\n## Truffle Starter Kit\r\n\r\nBefore you begin, [install Truffle with NPM](https://www.trufflesuite.com/truffle):\r\n\r\n```shell\r\nnpm install truffle -g\r\n```\r\n\r\nOnce installed, unbox the Truffle Starter Kit:\r\n\r\n```shell Truffle\r\nmkdir MyChainlinkProject\r\ncd MyChainlinkProject/\r\ntruffle unbox smartcontractkit/truffle-starter-kit\r\n```\r\n\r\nFor instructions on how to use the starter kit, refer to the [Truffle starter kit README](https://github.com/smartcontractkit/truffle-starter-kit/blob/master/README.md).\r\n\r\nFor more details on how to use Chainlink with Truffle, see our blog post about [Using Truffle to interact with Chainlink Smart Contracts](https://www.trufflesuite.com/blog/using-truffle-to-interact-with-chainlink-smart-contracts).\r\n___\r\n\r\n## DappTools Starter Kit\r\n\r\nTo learn more about DappTools, refer to the [DappTools Documentation](https://dapp.tools/).\r\n\r\n1. Install Dapp tools using the [Installation instructions](https://github.com/dapphub/dapptools#installation) in the Dapp tools GitHub repository.\r\n\r\n1. After you install the tools, clone the starter kit and install the dependencies:\r\n\r\n      ```shell\r\n      git clone https://github.com/smartcontractkit/dapptools-starter-kit\r\n      cd dapptools-starter-kit\r\n      make # This installs the project's dependencies.\r\n      ```\r\n\r\nFor instructions on how to use the starter kit, refer to the DappTools starter kit [README](https://github.com/smartcontractkit/dapptools-starter-kit#readme).\r\n\r\nFor more details on how to use Chainlink with DappTools, see the [How To Use DappTools](https://blog.chain.link/how-to-use-dapptools/) blog post.\r\n___\r\n\r\n## Foundry Starter Kit\r\n\r\nTo learn more about Foundry, refer to the [Foundry Documentation](https://onbjerg.github.io/foundry-book/).\r\n\r\n1. Install Foundry using the [Installation instructions](https://onbjerg.github.io/foundry-book/getting-started/installation.html) on GitHub.io.\r\n\r\n1. After you install Foundry, clone the starter kit and install the project dependencies:\r\n\r\n      ```shell\r\n      git clone https://github.com/smartcontractkit/foundry-starter-kit\r\n      cd foundry-starter-kit\r\n      make # This installs the project's dependencies.\r\n      ```\r\n\r\nFor instructions on how to use the starter kit, refer to the [Foundry starter kit README](https://github.com/smartcontractkit/foundry-starter-kit#readme).\r\n\r\n___\r\n\r\n# Using Chainlink Contracts\r\n\r\nOnce you have the Chainlink library installed, you can leverage the Chainlink ecosystem.\r\n\r\nIf you're interested in retrieving up to date crypto prices in your contracts, learn more about our [Data Feeds](./using-chainlink-reference-contracts/).\r\n\r\nIf you need to consume randomness in your contracts, learn about [Chainlink VRF](/docs/vrf/v2/introduction/).\r\n\r\nAnd if you want your contracts to retrieve data from off-chain APIs, learn about [Using Any API](/docs/any-api/introduction/).\r\n\r\n# Testing Chainlink Contracts\r\n\r\nSee our blog post on [Testing Chainlink Smart Contracts](https://blog.chain.link/testing-chainlink-smart-contracts/) or watch the [Chainlink Hackathon Workshop](https://www.youtube.com/watch?v=d8SqLaH8pu0).\r\n\r\nTests samples can be found on [Hardhat Starter Kit](https://github.com/smartcontractkit/hardhat-starter-kit/tree/main/test) and [Truffle Starter Kit](https://github.com/smartcontractkit/truffle-starter-kit/tree/master/test) respectively.\r\n"
    },
    {
      "title": "Developer Communications",
      "headings": [],
      "url": "/resources/developer-communications",
      "section": "ethereum",
      "description": "We are committed to communicating these changes with you in advance. This page will provide information on our current communication channels and detail active notifications / upgrade plans with timelines.",
      "content": "\r\nThe Chainlink Developer mailing list is the best place to stay up to date on\r\n\r\n- Releases\r\n- Package Updates\r\n- New Features\r\n- Breaking Changes\r\n- Events\r\n- Connecting with other developers\r\n\r\n<DeveloperCommunicationsCallout />\r\n"
    },
    {
      "title": "Ethereum Proof-of-Stake Merge",
      "headings": [],
      "url": "/resources/ethereum-proof-of-stake-merge",
      "section": "ethereum",
      "content": "\r\nThe [Ethereum Merge](https://ethereum.org/en/upgrades/merge/) is an upcoming network upgrade in which the Proof-of-Work (PoW) consensus layer of the Ethereum blockchain will be replaced with a new Proof-of-Stake (PoS) consensus layer. To ensure continuity for Chainlink protocol users on Ethereum, Chainlink Labs is following a rigorous quality assurance process in preparation of the Merge.\r\n\r\nThe Chainlink protocol and its services will remain operational on the Ethereum blockchain during and after the Merge to the PoS consensus layer. Users should be aware that forked versions of the Ethereum blockchain, including PoW forks, will not be supported by the Chainlink protocol. This is aligned with both the Ethereum Foundation’s and broader Ethereum community’s decision, achieved via social consensus, to upgrade the Ethereum blockchain to PoS consensus.\r\n\r\nFor Ethereum developers and dApp teams who are unsure of their migration strategy surrounding the Merge, it is recommended that smart contract operations are paused to avoid unforeseen incidents and help protect end users. dApps operating on forked versions of Ethereum, including PoW forks, might behave in unexpected ways due to both protocol and application-level issues, introducing increased risk for users. Developers should also ensure that any external dependencies their contracts may rely upon will operate as expected during and after the Merge. Chainlink Labs will continue to monitor any developments surrounding the Ethereum Merge to ensure the utmost level of reliability of Chainlink services.\r\n"
    },
    {
      "title": "Example Projects",
      "headings": [
        {
          "depth": 1,
          "slug": "hackathons",
          "text": "Hackathons"
        },
        {
          "depth": 2,
          "slug": "hackathon-tutorials",
          "text": "Hackathon Tutorials"
        },
        {
          "depth": 2,
          "slug": "chainlink-spring-2021-hackathon",
          "text": "Chainlink Spring 2021 Hackathon"
        },
        {
          "depth": 2,
          "slug": "eth-globals-ethonline-2020",
          "text": "ETH Global’s ETHOnline 2020"
        },
        {
          "depth": 2,
          "slug": "chainlink-hackathon-2020",
          "text": "Chainlink Hackathon 2020"
        },
        {
          "depth": 2,
          "slug": "ethglobal-hack-money",
          "text": "ETHGlobal Hack Money"
        },
        {
          "depth": 2,
          "slug": "ethdenver-2020",
          "text": "ETHDenver 2020"
        },
        {
          "depth": 2,
          "slug": "chainlink-virtual-hackathon-2019",
          "text": "Chainlink Virtual Hackathon 2019"
        },
        {
          "depth": 2,
          "slug": "ethberlin-2019",
          "text": "ETHBerlin 2019"
        },
        {
          "depth": 2,
          "slug": "ethnewyork-2019",
          "text": "ETHNewYork 2019"
        },
        {
          "depth": 2,
          "slug": "ethparis-2019",
          "text": "ETHParis 2019"
        },
        {
          "depth": 2,
          "slug": "ethdenver-2019",
          "text": "ETHDenver 2019"
        }
      ],
      "url": "/resources/example-projects",
      "section": "ethereum",
      "content": "\r\n# Hackathons\r\n\r\nThe following is a list of selected hackathon projects utilizing Chainlinked contracts.\r\n\r\n## Hackathon Tutorials\r\n\r\nFurther exploration into how some of the hackathon winners developed their entries.\r\n\r\n| Name                     | Description                                      | Tutorial                                                                                    |\r\n| :----------------------- | :----------------------------------------------- | :------------------------------------------------------------------------------------------ |\r\n| **Link My Ride**         | A decentralized Tesla rental platform.           | [Go](https://blog.chain.link/create-tesla-smart-contract-rental/)                           |\r\n| **Open Library Project** | A library platform for borrowing books on-chain. | [Go](https://blog.chain.link/rfid-blockchain-integration-with-chainlink-external-adapters/) |\r\n| **Marine Insurance**     | Parametric insurance for the marine industry.    | [Go](https://blog.chain.link/build-a-marine-insurance-smart-contract-with-chainlink/)       |\r\n| **Fruity Market**        | Vending machine cryptocurrency payments.         | [Go](https://blog.chain.link/cryptocurrency-vending-machine/)                               |\r\n| **Whiskey MarketMaker**  | Craft whiskey crypto payments.                   | [Go](https://blog.chain.link/craft-whiskey-crypto-payments-with-chainlink-oracles/)         |\r\n| **Digital Bridge**       | Two factor authentication for smart contracts.   | [Go](https://blog.chain.link/2fa-authentication-smart-contracts/)                           |\r\n| **Iroiro**               | Fetch IPFS Data in Smart Contracts.              | [Go](https://blog.chain.link/fetch-ipfs-api-data-token-distribution/)                       |\r\n\r\n## Chainlink Spring 2021 Hackathon\r\n\r\nThe [Chainlink Spring 2021 Hackathon](https://chain.link/hackathon/spring-2021), read our [blog here!](https://blog.chain.link/congratulations-to-the-spring-2021-chainlink-virtual-hackathon-winners/)\r\n\r\n| Name                               | Description                       | GitHub                                                                            |\r\n| :--------------------------------- | :-------------------------------- | :-------------------------------------------------------------------------------- |\r\n| **deBridge**<br />🥇               | Cross-chain defi primative        | [Go](https://github.com/debridge-finance)                                         |\r\n| **Vulcan Exchange**<br />🥇        | Weather derivatives defi platform | [Go](https://github.com/Vulcan-Exchange?ref=block123)                             |\r\n| **DeFi Lending Insurance**<br />🥇 | DeFi Lending Insurance            | [Go](https://github.com/chainlink-hackathon2021-insurance/DeFi-Lending-Insurance) |\r\n| **Fract**<br />🥇                  | Dynamic NFT no-code UI creator    |                                                                                   |\r\n\r\n## ETH Global's ETHOnline 2020\r\n\r\nThe [ETH Online](https://ethglobal.online/), read our [blog here!](https://blog.chain.link/ethonline-2020-chainlink-hackathon-winners/)\r\n\r\n| Name                  | Description                                         | GitHub                                                   |\r\n| :-------------------- | :-------------------------------------------------- | :------------------------------------------------------- |\r\n| **Iroiro**<br />🥇    | Decentralized Creators Support Platform.            | [Go](https://github.com/TART-tokyo/iroiro)               |\r\n| **Overlay**<br />🥇   | Long/Short data stream derivatives.                 | [Go](https://github.com/overlay-market/overlay-protocol) |\r\n| **Rupia**<br />🥇     | An Indian Rupee (INR) Stablecoin Derivative.        | [Go](https://github.com/vijayengineer/rupia)             |\r\n| **SecretPay**<br />🥇 | Buy ETH Privately From PayPal and Revolut.          | [Go](https://github.com/franono/ethglobal)               |\r\n| **Unipeer**<br />🥇   | Fiat to Ethereum On-Ramp Using an Open Banking API. | [Go](https://github.com/unipeer/unipeer)                 |\r\n\r\n## Chainlink Hackathon 2020\r\n\r\nThe [Chainlink Hackathon](https://chain.link/hackathon/2020), read our [blog here!](https://blog.chain.link/congratulations-to-the-winners-of-the-chainlink-virtual-hackathon-2020/)\r\n\r\n| Name                             | Description                                           | GitHub                                                    |\r\n| :------------------------------- | :---------------------------------------------------- | :-------------------------------------------------------- |\r\n| **Link My Ride**<br />🥇         | A decentralized Tesla rental platform.                | [Go](https://github.com/pappas999/Link-My-Ride)           |\r\n| **Farm Together**<br />🥇        | A farming game where you can earn real yield in defi. | [Go](https://github.com/johhonn/realyield.farm-contracts) |\r\n| **Open Library Project**<br />🥇 | A library platform for borrowing books on-chain.      | [Go](https://github.com/amoghaddassi/open-library)        |\r\n\r\n## ETHGlobal Hack Money\r\n\r\nThe [Hack Money hackathon](https://ethglobal.online/), read our [blog here!](https://blog.chain.link/showcasing-the-winners-of-the-2020-hackmoney-virtual-hackathon/)\r\n\r\n| Name                   | Description                                                          | GitHub                                              |\r\n| :--------------------- | :------------------------------------------------------------------- | :-------------------------------------------------- |\r\n| **Genie**<br />🥇      | A no-loss betting platform for gamers.                               | [Go](https://github.com/genie-platform)             |\r\n| **DefiDollar**<br />🥈 | DefiDollar (DUSD) is a stablecoin backed by Curve Finance LP tokens. | [Go](https://github.com/defidollar/defidollar-core) |\r\n| **CandyShop**<br />🥉  | Lottery based arbitrage.                                             | [Go](https://github.com/itsthecandyshop/)           |\r\n\r\n## ETHDenver 2020\r\n\r\nRead our [blog post here](https://blog.chain.link/showcasing-the-winning-projects-from-the-ethdenver-2020-hackathon/).\r\n\r\n| Name                          | Description                                                                                    | GitHub                                                          |\r\n| :---------------------------- | :--------------------------------------------------------------------------------------------- | :-------------------------------------------------------------- |\r\n| **InsuraLink**<br />🥇        | Data-driven insurance agreements that use Chainlink oracles to bridge IoT and smart contracts. | [Go](https://github.com/mycelium-ethereum/insuralink-contracts) |\r\n| **1x.ag**<br />🥈             | Build leveraged trade positions across different lending platforms.                            | [Go](https://github.com/1x-ag/solidity-contracts)               |\r\n| **We Watch in Public Spaces** | Tracking system for calculating event attendance.                                              | [Go](https://github.com/iainnash/ethdenver-we-watch-in-public)  |\r\n\r\n## Chainlink Virtual Hackathon 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/winners-of-the-chainlink-virtual-hackathon/).\r\n\r\n| Name                          | Description                                                                                    | GitHub                                                                                  |\r\n| :---------------------------- | :--------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------------- |\r\n| **LinkPal**<br />🥇           | A smart contract uses Chainlink oracles to confirm that the PayPal invoice has been paid.      | [Go](https://github.com/vvoluom/LinkPal)                                                |\r\n| **Cerebus Wallet**<br />🥈    | Two-factor authorization for crypto transactions using phone push notifications.               | [Go](https://github.com/MikaelLazarev/cerberus)                                         |\r\n| **Flyt**<br />🥉              | Flight insurance.                                                                              | [Go](https://github.com/robin-thomas/flyt)                                              |\r\n| **Link Total Return Swap**    | A Defi platform which enables Chainlink Node Operators to hedge against LINK price volatility. | [Go](https://github.com/mycelium-ethereum/LinkTRS)                                      |\r\n| **Smart Marketing Campaigns** | Use Google Analytics data to make payments to marketing agencies.                              | [Go](https://coinlist.co/build/chainlink/projects/6106f616-f9d8-4fec-85d7-c9f98bf8bd9e) |\r\n| **Steam Trader**              | Trustless trading of digital items.                                                            | [Go](https://github.com/brent-riva/Steam-Trader)                                        |\r\n| **Contractor**                | Constructor of smart contracts.                                                                | [Go](https://github.com/alekcangp/ChainLinkContractor)                                  |\r\n| **Fiat Gateway**              | Crypto Fiat Gateway on Ethereum using Chainlink Oracles                                        | [Go](https://github.com/chatch/fiat-gateway)                                            |\r\n| **The Anti-Social Challenge** | Incentivize people to reduce their usage of social platforms.                                  | [Go](https://github.com/raphpap/smart-inactivity-agreement)                             |\r\n\r\n## ETHBerlin 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/showcasing-the-winners-of-the-etherlin-zwei-hackathon/).\r\n\r\n| Name                               | Description                                             | GitHub                                               |\r\n| :--------------------------------- | :------------------------------------------------------ | :--------------------------------------------------- |\r\n| **Chainlink \\u2661 Augur**<br />🥇 | Create derivatives based on the valuations of startups. | [Go](https://github.com/jasperdg/flux-ethberlinzwei) |\r\n| **VollgasDAO**<br />🥈             | Gas futures.                                            | [Go](https://devpost.com/software/vollgas-futures)   |\r\n| **Etherflare**<br />🥉             | Reward white hat hackers.                               | [Go](https://github.com/EtherFlareGraph/etherflare)  |\r\n\r\n## ETHNewYork 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/showcasing-the-winning-projects-from-the-ethnewyork-hackathon/).\r\n\r\n| Name                           | Description                                                     | GitHub                                                        |\r\n| :----------------------------- | :-------------------------------------------------------------- | :------------------------------------------------------------ |\r\n| **French Toast Kitty**<br />🥇 | Interact with your Cryptokitty using real-world data.           | [Go](https://github.com/frenchtoastkitty/contracts)           |\r\n| **Blocksolid**                 | Donations that pay for Internet services in developing regions. | [Go](https://github.com/unicef-isp-manager/eth-new-york-2019) |\r\n\r\n## ETHParis 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/the-winning-projects-from-ethparis-hackathon/).\r\n\r\n| Name                 | Description                                                               | GitHub                                               |\r\n| :------------------- | :------------------------------------------------------------------------ | :--------------------------------------------------- |\r\n| **Nanti**<br />🥇    | Issue and use corporate bonds as collateral for instant payment channels. | [Go](https://github.com/cryptotuxorg/nanti-dapp)     |\r\n| **SmartKek**<br />🥈 | Burn tokens to leave comments.                                            | [Go](https://github.com/smartkek/ETHParis-graveyard) |\r\n\r\n## ETHDenver 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/detailing-the-winning-chainlink-projects-from-ethdenver-hackathon/).\r\n\r\n| Name                    | Description                                                                   | GitHub                                             |\r\n| :---------------------- | :---------------------------------------------------------------------------- | :------------------------------------------------- |\r\n| **EventLINK**<br />🥇   | Crowdfund events using Twitter APIs, smart contracts, and staking mechanisms. | [Go](https://github.com/ConnorMaloney/EventLink)   |\r\n| **Grand Fondo**<br />🥈 | Decentralized athletic competitions using Strava.                             | [Go](https://github.com/tokensoft/gran-fondo)      |\r\n| **Smart Piggies**       | Peer-to-peer global derivatives market.                                       | [Go](https://github.com/smartpiggies/smartpiggies) |\r\n"
    },
    {
      "title": "Fund Your Contracts",
      "headings": [
        {
          "depth": 2,
          "slug": "retrieve-the-contract-address",
          "text": "Retrieve the contract address"
        },
        {
          "depth": 2,
          "slug": "send-funds-to-your-contract",
          "text": "Send funds to your contract"
        }
      ],
      "url": "/resources/fund-your-contract",
      "section": "ethereum",
      "content": "\r\nSome smart contracts require funding at their addresses so they can operate without you having to call functions manually and pay for the transactions through MetaMask. This guide explains how to fund Solidity contracts with LINK or ETH.\r\n\r\n## Retrieve the contract address\r\n\r\n1. In Remix, deploy your contract and wait until you see a new contract in the **Deployed Contracts** section.\r\n1. On the left side panel, use the **Copy** button located near the contract title to copy the contract address to your clipboard.\r\n\r\n![Remix Copy Deployed Contract Address](/files/25d2c8e-Screen_Shot_2020-09-08_at_7.15.50_AM.png)\r\n\r\n## Send funds to your contract\r\n\r\n1. Open MetaMask.\r\n1. Select the network that you want to send funds on. For example, select the Goerli testnet.\r\n1. Click the **Send** button to initiate a transaction.\r\n1. Paste your contract address in the address field.\r\n1. In the **Asset** drop down menu, select the type of asset that you need to send to your contract. For example, you can send LINK. If LINK is not listed, follow the guide to [Acquire testnet LINK](/docs/acquire-link/).\r\n1. In the **Amount** field, enter the amount of LINK that you want to send.\r\n1. Click **Next** to review the transaction details and the Gas cost.\r\n1. If the transaction details are correct, click **Confirm** and wait for the transaction to process.\r\n\r\n![Metamask Send Link Screen](/files/867073d-metamask.png)\r\n\r\n:::caution[ Transaction fee didn't update?]\r\n\r\n You may need to click **Fastest**, **Fast**, **Slow**, or **Advanced Options** after entering the **Amount** to update the gas limit for the token transfer to be successful.\r\n\r\n:::\r\n"
    },
    {
      "title": "Getting Help",
      "headings": [
        {
          "depth": 2,
          "slug": "where-do-i-go-to-get-help-and-support",
          "text": "Where do I go to get help and support?"
        },
        {
          "depth": 2,
          "slug": "1-double-check-the-documentation",
          "text": "1. Double check the documentation"
        },
        {
          "depth": 2,
          "slug": "2-do-a-web-search-for-the-specific-error-or-situation-youre-in",
          "text": "2. Do a web search for the specific error or situation you’re in"
        },
        {
          "depth": 2,
          "slug": "3-open-an-issue-on-github-or-the-code-repository",
          "text": "3. Open an issue on GitHub or the code repository"
        },
        {
          "depth": 2,
          "slug": "4-ask-a-question-on-stack-overflow-or-stack-exchange-ethereum",
          "text": "4. Ask a question on Stack Overflow or Stack Exchange Ethereum"
        },
        {
          "depth": 2,
          "slug": "5-ask-the-community",
          "text": "5. Ask the community"
        }
      ],
      "url": "/resources/getting-help",
      "section": "ethereum",
      "content": "\r\n## Where do I go to get help and support?\r\n\r\nIf you run into issues and the available documentation, videos, and code repositories are not able to assist you, the best way to get help is to follow the support escalation process in this document. Sometimes you might have a question that is too theoretical or hasn't been solved, so you might not always get what you're looking for!\r\n\r\n## 1. Double check the documentation\r\n\r\nCheck to see if you missed any code, documentation, blog, or video on the topic or issue you're looking for. There are typically a few different resources on a topic if one doesn't answer exactly what you're looking for. You can also use the documentation search bar to look up things as well.\r\n\r\n## 2. Do a web search for the specific error or situation you're in\r\n\r\nOften someone else has asked the same question that you're asking. If you copy and paste the error into the Google or web search bar, there is a good chance that you will find some helpful material from someone else who has already found the solution to your question.\r\n\r\n## 3. Open an issue on GitHub or the code repository\r\n\r\nThis is only applicable if you're working with a certain set of code. For example, if you're having an issue working with the [Chainlink Hardhat Starter kit](https://github.com/smartcontractkit/hardhat-starter-kit), open an issue on the repo explaining exactly what's going on and someone might have the answer that you need.\r\n\r\nWhen writing issues, remember to:\r\n\r\n- Keep titles short\r\n- Be clear and concise about the issue that you are encountering\r\n- Format your issue description. Use [three backticks (```)](https://www.freecodecamp.org/news/how-to-format-code-in-markdown/#code-blocks) to format your code or log output.\r\n- Always add any and all associated code\r\n- Don't use screenshots. Screenshots are not searchable and generally make it harder to understand your issue.\r\n\r\n## 4. Ask a question on [Stack Overflow](https://stackoverflow.com/questions/ask?tags=chainlink) or [Stack Exchange Ethereum](https://ethereum.stackexchange.com/)\r\n\r\nThis is where most people will end up and is one of the most helpful resources out there. Stack Overflow is living documentation, so do your best to make a [thoughtful and easy to triage question](https://stackoverflow.com/help/how-to-ask). This will make it much easier for people to help debug your issue and ensure it doesn't get removed from the site. Remember, we want to make this question **searchable** so others who run into the same issue can also get their question solved. You could use any forum-based site you like if you prefer another site over Stack Overflow.\r\n\r\nHere is an example of a poorly formatted question:\r\n\r\n:::note\r\n\r\nTitle: Please help\r\n\r\nI'm following this guide, and my code is breaking, what's going on?\r\n\r\nhttps://docs.chain.link/\r\n\r\nHere is my code\r\n\r\n```\r\npragma solidity 0.6.7; contract HelloWorld { string public message; constructor(string memory initialMessage) {message = initialMessage; }`\r\n```\r\n\r\n:::\r\n\r\nHere is that same question with better formatting:\r\n\r\n:::note\r\nTitle: Remix Solidity Compile Error - Source File Requires Different Compiler Version\r\n\r\nI'm [following this guide](/docs/deploy-your-first-contract/), and I'm unable to compile my solidity code in [Remix](https://remix.ethereum.org/).\r\n\r\nHere is the code:\r\n\r\n```javascript\r\npragma solidity 0.6.7;\r\n\r\ncontract HelloWorld {\r\n   string public message;\r\n\r\n   constructor(string memory initialMessage) {\r\n       message = initialMessage;\r\n   }\r\n\r\n   function updateMessage(string memory newMessage) public {\r\n       message = newMessage;\r\n   }\r\n}\r\n```\r\n\r\nAnd the error I'm getting is as follows:\r\n\r\n```\r\nParserError: Source file requires different compiler version (current compiler is 0.8.7+commit.e28d00a7.Emscripten.clang) - note that nightly builds are considered to be strictly less than the released version\r\n--> contracts/test.sol:1:1:\r\n|\r\n1 | pragma solidity 0.6.7;\r\n| ^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n```\r\n\r\n:::\r\n\r\nIt's best to create a [minimum reproducible example](https://stackoverflow.com/help/minimal-reproducible-example) to help others understand your issue. This way, they can help you get an answer quickly. Remember, its a community-run platform!\r\n\r\nDon't get discouraged if your question gets downvoted or removed. This just means you need to format your question a little differently next time!\r\n\r\n## 5. Ask the community\r\n\r\nAnd lastly, you can always ask the question in the [Discord](https://discord.gg/2YHSAey) and see if there is a community member who might be able to help you out. One of the best ways to ask the community is to drop a link to your Stack Overflow question, issue, or the forum where you're asking a Chainlink question. Remember, these are community members, and they are helping because they are wonderful and kind individuals!\r\n\r\nFor important updates regarding the use of Chainlink Price Feeds, users should join the official Chainlink Discord and subscribe to the data-feeds-user-notifications channel: https://discord.gg/Dqy5N9UbsR\r\n"
    },
    {
      "title": "Glossary",
      "headings": [
        {
          "depth": 3,
          "slug": "adapter",
          "text": "Adapter"
        },
        {
          "depth": 3,
          "slug": "answer",
          "text": "Answer"
        },
        {
          "depth": 3,
          "slug": "bridge",
          "text": "Bridge"
        },
        {
          "depth": 3,
          "slug": "consumer-contract",
          "text": "Consumer (Contract)"
        },
        {
          "depth": 3,
          "slug": "encumbrance-parameters",
          "text": "Encumbrance Parameters"
        },
        {
          "depth": 3,
          "slug": "external-adapter",
          "text": "External Adapter"
        },
        {
          "depth": 3,
          "slug": "function-selector",
          "text": "Function Selector"
        },
        {
          "depth": 3,
          "slug": "initiator",
          "text": "Initiator"
        },
        {
          "depth": 3,
          "slug": "job",
          "text": "Job"
        },
        {
          "depth": 3,
          "slug": "job-run",
          "text": "Job Run"
        },
        {
          "depth": 3,
          "slug": "jobid",
          "text": "JobID"
        },
        {
          "depth": 3,
          "slug": "job-spec",
          "text": "Job Spec"
        },
        {
          "depth": 3,
          "slug": "oracle",
          "text": "Oracle"
        },
        {
          "depth": 3,
          "slug": "oracle-contract",
          "text": "Oracle Contract"
        },
        {
          "depth": 3,
          "slug": "oracle-node",
          "text": "Oracle Node"
        },
        {
          "depth": 3,
          "slug": "phase",
          "text": "Phase"
        },
        {
          "depth": 3,
          "slug": "requester",
          "text": "Requester"
        },
        {
          "depth": 3,
          "slug": "run-result",
          "text": "Run Result"
        },
        {
          "depth": 3,
          "slug": "run-status",
          "text": "Run Status"
        },
        {
          "depth": 3,
          "slug": "said",
          "text": "SAID"
        },
        {
          "depth": 3,
          "slug": "service-agreement",
          "text": "Service Agreement"
        },
        {
          "depth": 3,
          "slug": "spec",
          "text": "Spec"
        },
        {
          "depth": 3,
          "slug": "task",
          "text": "Task"
        },
        {
          "depth": 3,
          "slug": "task-spec",
          "text": "Task Spec"
        },
        {
          "depth": 3,
          "slug": "task-run",
          "text": "Task Run"
        }
      ],
      "url": "/resources/glossary",
      "section": "ethereum",
      "content": "\r\n### Adapter\r\n\r\n:::danger[ The adapters or JSON adapters for v1 Jobs are removed for Chainlink nodes running version 1.0.0 and later. Use [v2 job tasks](/docs/tasks) instead.]\r\n\r\n:::\r\n\r\nAn adapter or [task](#task) is a piece of software responsible for executing a specific piece of functionality. A Chainlink node comes with a number of Adapters built-in, commonly known as Core Adapters, but can also be extended via [Bridges](/docs/node-operators/) to connect with user-defined [External Adapters](#external-adapter).\r\n\r\n### Answer\r\n\r\nThe result produced from an oracle service, after all safety checks and aggregations have been performed.\r\n\r\n### Bridge\r\n\r\nBridge is the connection between a Chainlink node and an [External Adapter](#external-adapter). The External Adapter runs as a separate [service](https://en.wikipedia.org/wiki/Service-oriented_architecture), and a Bridge facilitates communication between the node and one of these adapters.\r\n\r\nIf you would like to add a new External Adapter to your node, you create a new Bridge either in the GUI or the CLI. Within the Chainlink node, a bridge must have a unique name, but can share the same URL with other bridges. You can also set a different number of default confirmations for each bridge, and an additional payment amount. Once the bridge is added to the node, its name can then be used as a task type in [Jobs](./jobs/).\r\n\r\n### Consumer (Contract)\r\n\r\nRecipient of an [Answer](#answer) provided by an [Oracle](#oracle). The Consumer is commonly a contract, and is also commonly the same [entity that requested the Answer](#requester), but does not have to be. We have a helper function, ` addExternalRequest`, that gives consuming contracts the ability to safely check answers it receives without requesting them itself.\r\n\r\n### Encumbrance Parameters\r\n\r\nEncumbrance parameters are the part of a [service agreement](#service-agreement) that can be enforced on-chain. Information on encumbrance parameters can be found <a href=\"https://github.com/smartcontractkit/chainlink/wiki/Service-Agreements-and-the-Coordinator-Contract\" target=\"_blank\">on our Wiki</a>.\r\n\r\n### External Adapter\r\n\r\n[External adapters](https://github.com/smartcontractkit/chainlink/wiki/External-Adapters) are what make Chainlink easily extensible, providing simple integration of custom computations and specialized APIs.\r\n\r\nA Chainlink node communicates with external adapters by sending a POST request with a JSON data payload. More information can be found on the external adapter [developers](./developers/) page.\r\n\r\n### Function Selector\r\n\r\nA [function selector](https://docs.soliditylang.org/en/develop/abi-spec.html#function-selector) specifies the function to be called in Ethereum. It is the first four bytes of the call data for a function call in an Ethereum transaction. Solidity contracts have a built-in helper method to access the function selector by using `this.myFunction.selector`, where `myFunction` is a non-overloaded function in the contract.\r\n\r\n### Initiator\r\n\r\n:::danger[ The initiators for v1 Jobs are removed for Chainlink nodes running version 1.0.0 and later. Use the [v2 job types](/docs/jobs) instead.]\r\n\r\n:::\r\n\r\nTriggers the execution of a [Job Spec](#job-spec).\r\n\r\n### Job\r\n\r\nShort-hand for a [Job Spec](#job-spec).\r\n\r\n### Job Run\r\n\r\nThe Job Run is the artifact documenting the outcome of executing a [Job](#job). The Job Run is made up of a [Task](#task) and a [Run Result](#run-result) representing the ultimate outcome of the Job Run.\r\n\r\n### JobID\r\n\r\nThe ID associated to a given [Job Spec](#job-spec). This will be unique per-node, even with the same contents within the spec itself.\r\n\r\n### Job Spec\r\n\r\nThe [Job Specification](./jobs/) is the specification of a piece of work to be completed by an Oracle Node. The Job Spec is made up of two main parts:\r\n\r\n- The [Task Type](/docs/jobs/#shared-fields) or the [External Initiator](/docs/external-initiators-introduction/): Defines the ways a Job can be triggered to execute.\r\n- The [Task list](#task-spec): The `tasks` that specify all of the computation steps to perform when executing a Job Spec. The Task list is sometimes referred to as the [Job Pipeline](/docs/jobs/task-types/pipelines/) because all of the Tasks' operations are performed in order, with the result being fed into the next task.\r\n\r\n### Oracle\r\n\r\nEntity which connects computations on blockchains with off-chain resources. Typically made up of two components: the [Oracle Node](#oracle-node) (off-chain) and the [Oracle Contract](#oracle-contract) (on-chain).\r\n\r\n### Oracle Contract\r\n\r\nThe on-chain component of an [Oracle](#oracle). The Oracle Contract is the interface through which [Consuming Contracts](#consumer-contract) pass and receive data with off-chain resources.\r\n\r\n### Oracle Node\r\n\r\nThe off-chain component of an [Oracle](#oracle).\r\n\r\n### Phase\r\n\r\nFor data feeds, a phase indicates the underlying aggregator implementation has been updated. Phases are relevant only for the EACAggregatorProxys. You can think of a roundId on the proxies as a large number containing data for two numbers (phaseId + roundId). The roundId is pulled from the aggregator's implementation and combined by bit shifting with the latest phaseId of the proxy.\r\n\r\n### Requester\r\n\r\nA Smart Contract or Externally Owned Account which requests data from an [Oracle](#oracle). The Requester does not have to be the same entity as the [Consumer](#consumer-contract) but commonly is the same.\r\n\r\n### Run Result\r\n\r\nA Run Result is the result of executing a [Job Spec](#job-spec).\r\n\r\n### Run Status\r\n\r\nEach [Job Run](#job) has a status field indicating its current progress. The Run Status can be in one of the [following states](https://godoc.org/github.com/smartcontractkit/chainlink/core/store/models/#pkg-constants):\r\n\r\n- Unstarted\r\n- In Progress\r\n- Pending Confrimations\r\n- Pending Bridge\r\n- Pending Sleep\r\n- Errored\r\n- Completed\r\n\r\n### SAID\r\n\r\nThe ID associated with a given [Service Agreement](#service-agreement).\r\n\r\n### Service Agreement\r\n\r\nThe Service agreement consists of a [Job Spec](#job-spec) and a set of [encumbrance parameters](#encumbrance-parameters) that is shared among a creator and multiple Chainlink nodes. Information on service agreements can be found [on our Wiki](https://github.com/smartcontractkit/chainlink/wiki/Service-Agreements-and-the-Coordinator-Contract).\r\n\r\n### Spec\r\n\r\nAnother short-hand for a [Job Spec](#job-spec).\r\n\r\n### Task\r\n\r\nA v2 job [task](/docs/tasks/).\r\n\r\n### Task Spec\r\n\r\nThe Task Spec is the definition for an individual task to be performed within the [job specification](./jobs/) by a specific adapter. The Task Spec always includes a `type` field which specifies which [adapter](#adapter) will execute it. Optionally, a Task Spec can specify additional `params` which will be passed on to its adapter, and `confirmations` which specify how many confirmations a [Task Run](#task-run) needs before executing.\r\n\r\n### Task Run\r\n\r\nThe result of the individual [Task Spec](#task-spec)'s execution. A Task Run includes the Task Spec that it used for input and the [Run Result](#run-result) which was the output of the execution.\r\n"
    },
    {
      "title": "Hackathon Resources",
      "headings": [
        {
          "depth": 3,
          "slug": "hackathon--project-resources",
          "text": "Hackathon & Project Resources"
        },
        {
          "depth": 1,
          "slug": "want-to-check-out-winners-code-of-past-hackathons-to-get-some-inspiration",
          "text": "Want to check out winners code of past hackathons to get some inspiration?"
        },
        {
          "depth": 2,
          "slug": "boilerplate-code-and-starter-kits",
          "text": "Boilerplate code, and starter kits"
        },
        {
          "depth": 2,
          "slug": "support-communications",
          "text": "Support Communications"
        },
        {
          "depth": 2,
          "slug": "tutorials",
          "text": "Tutorials"
        },
        {
          "depth": 2,
          "slug": "inspiration",
          "text": "Inspiration"
        },
        {
          "depth": 3,
          "slug": "the-chainlink-community-is-some-of-the-most-inviting-groups-of-engineers-always-looking-to-help-you-grow-to-the-next-stage",
          "text": "The chainlink community is some of the most inviting groups of engineers always looking to help you grow to the next stage."
        },
        {
          "depth": 1,
          "slug": "join-the-community",
          "text": "Join the community"
        },
        {
          "depth": 2,
          "slug": "blockchain-specific",
          "text": "Blockchain Specific"
        }
      ],
      "url": "/resources/hackathon-resources",
      "section": "ethereum",
      "content": ":::note[ Note on Resources]\r\n\r\n For a comprehensive list of resources, refer to the [Learning Resources](./other-tutorials/) page.\r\n\r\n:::\r\n\r\n### Hackathon & Project Resources\r\n\r\nIf you're looking to just start jumping into stuff, here is a directory that can help you out.\r\n\r\n# Want to check out winners code of past hackathons to get some inspiration?\r\nCheck out the <a href=\"/docs/example-projects\"> example winners projects here. </a>\r\n\r\n## Boilerplate code, and starter kits\r\n\r\nBe sure to check the docs above for remix examples!\r\n- [Chainlink Brownie Starter Kit (Python)](https://github.com/smartcontractkit/chainlink-mix)\r\n- [Chainlink Truffle Starter Kit (Javascript)](https://github.com/smartcontractkit/truffle-starter-kit)\r\n- [Chainlink Hardhat Starter Kit (Javascript)](https://github.com/smartcontractkit/hardhat-starter-kit)\r\n\r\n## Support Communications\r\n\r\nAlways refer back to the [getting help](/docs/getting-help) page for the latest information about how to get support.\r\n\r\n- [Getting Help](/docs/getting-help)\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/chainlink)\r\n- [Stack Exchange Ethereum](https://ethereum.stackexchange.com/questions/tagged/chainlink)\r\n- [Hackathon Discord](https://discord.gg/h3AvTHj)\r\n- [Developer Discord](https://discord.gg/2YHSAey)\r\n\r\n## Tutorials\r\n\r\nBe sure to check the documentation in the links above for in depth-descriptions of everything.\r\n\r\nNew? See the [Getting Started Guide](/docs/conceptual-overview/).\r\n- [Video Tutorials](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J)\r\n- [What is Ethereum?](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J)\r\n- [Developer Blog (many tutorials)](https://blog.chain.link/tag/developers/)\r\n- [Testing Chainlink Smart Contracts](https://blog.chain.link/testing-chainlink-smart-contracts/)\r\n- [NFTs and Chainlink](https://blog.chain.link/build-deploy-and-sell-your-own-dynamic-nft/)\r\n- [Build an external adapter](/docs/developers/)\r\n\r\n## Inspiration\r\n- [77 Use Cases by Chainlink](https://blog.chain.link/44-ways-to-enhance-your-smart-contract-with-chainlink/)\r\n- [Past winners & code](/docs/example-projects)\r\n- [Chainlink docs](/)\r\n\r\n### The chainlink community is some of the most inviting groups of engineers always looking to help you grow to the next stage.\r\n\r\n# Join the community\r\n- [Twitter](https://mobile.twitter.com/chainlink)\r\n- [Reddit](https://www.reddit.com/r/Chainlink/)\r\n- [Telegram](https://t.me/chainlinkofficial)\r\n- [Blog](https://blog.chain.link)\r\n\r\n## Blockchain Specific\r\n\r\n- [Matic Data Feeds](./matic-addresses/)\r\n- [BNB Chain Data Feeds](./bnb-chain-addresses/)\r\n- [Conflux](https://github.com/Conflux-Network-Global/demo-cfx-chainlink)\r\n"
    },
    {
      "title": "Hackathon Rules, Waiver & Release, and Code of Conduct",
      "headings": [
        {
          "depth": 5,
          "slug": "the-code",
          "text": "The Code"
        },
        {
          "depth": 5,
          "slug": "event-rules--conditions",
          "text": "Event Rules & Conditions"
        }
      ],
      "url": "/resources/hackathon-rules-waiver-and-release",
      "section": "ethereum",
      "content": "**Code of Conduct**\r\n\r\nThis event is a community hackathon intended for collaboration and learning in the Chainlink and broader blockchain communities. We value the participation of each member of the community and want all participants to have an enjoyable experience. Accordingly, all participants are expected to show respect and courtesy to other participants throughout the hackathon. To make clear what is expected, all participants of this hackathon are required to conform to the following Code of Conduct. Organizers will enforce this code throughout the event.\r\n\r\n\r\n##### **The Code**\r\n\r\nThe spirit of The Code is to prohibit activities including but not limited to:\r\n* Comments that others find offensive\r\n* Cheating or taking unfair advantage of other participants’ work or efforts\r\n* Any activity related to harassing, demeaning, mocking, or intimidating others, especially this behavior as it relates to characteristics such as:\r\n    * Gender\r\n    * Sexual orientation\r\n    * Physical or mental ability\r\n    * Age\r\n    * Socioeconomic status\r\n    * Ethnicity\r\n    * Physical appearance\r\n    * Race\r\n    * Religion\r\n    * Country of origin\r\n* Examples of other prohibited behaviors include, but are not limited to:\r\n    * Stalking\r\n    * Unwanted sexual attention\r\n    * Use of sexualized content\r\n\r\nParticipants asked to stop any behavior deemed as harassment are expected to comply immediately. If a participant fails to comply they will be asked to leave the event. Sponsors, judges, mentors, volunteers, organizers, Chainlink team, and anyone else at the event are also subject to the Code. \r\n\r\nIf a participant engages in behavior that violates the Code, the hackathon organizers will take any action they deem appropriate, including warning the offender or expelling them from the event.\r\n\r\nIf you feel uncomfortable or think there may be a potential violation of the code of conduct, please report it immediately to one of the event organizers or by emailing us at legal@chain.link. All reporters have the right to remain anonymous.\r\n\r\n\r\n##### **Event Rules & Conditions**\r\n1. The following rules & conditions (the “Rules”) apply to this Chainlink hackathon (the “Event\"). By clicking the “I Accept” button, you acknowledge that you have read these Rules, understand them, and agree to be bound as follows: \r\n1. You assume full responsibility for any damage or injury caused by you in your participation in the Event (whether to persons or property, and whether to yourself or others) and release SmartContract Chainlink Limited SEZC (and its affiliates) (“Chainlink”), the Event, the organizers of the Event (the “Organizers”), all sponsors of the Event (“Sponsors”), the Event volunteers and the Event staff, (collectively, the “Releasees”) from any liability therefore. **YOU ARE AWARE THAT YOUR PARTICIPATION IN THE EVENT IS SOLELY AT YOUR OWN RISK, AND THAT THE RELEASE HEREIN IS INTENDED TO REFLECT THAT UNDERSTANDING**\r\n1. You will own any developments that you create during the Event, and all right, title and interest in those developments, including the intellectual property rights therein, shall belong to you. However, you acknowledge that during the course of the Event, you may obtain access to products, developments, information and other materials belonging to Chainlink, other participants of the Event, the Sponsors and/or other third parties (“Third Party Materials”), and that nothing in this Agreement is deemed to transfer any ownership, right, title or interest in such Third Party Materials to you. Your only rights to the Third Party Materials shall be those expressly granted to you by the owner(s) of the Third Party Materials. Specifically, any APIs or other software provided to you by the Sponsors are subject to the subscription terms and software licenses associated with such APIs or other software.\r\n1. By entering this Event, you  represent and warrant that your participation complies with these Rules and that you have sufficient rights to (1) authorize the publication and dissemination of any submission materials and presentations (“Submitted Materials”); (2) allow the Organizers and Sponsors to use and to authorize others to use, publish and disseminate your Submitted Materials.  Further, you are entirely responsible for your Submitted Materials, in whole or in part, if: (a) determined to be defamatory, offensive or otherwise inappropriate; (b) determined to violate any laws, rules or regulations; (c) determined to be infringing, or constitute a misappropriation of any intellectual property rights or confidential or proprietary information of any third party; or (d) determined to violate these Rules.  Your Submitted Materials must be true and accurate and in compliance with these Rules in all regards.  At any time, the Organizers at their sole discretion, reserve the right to remove your Submitted Materials from the Event, in whole or in part, for any violation of these Official Rules.\r\n1. You acknowledge that the Event is intended to be a place where ideas are shared freely, and therefore acknowledge that any information that you share with other participants of the Event, the Sponsors and/or other third parties during the Event is solely at your discretion and risk. If you wish to protect your information, it is solely your responsibility to implement confidentiality and security measures with respect to the persons to whom you are disclosing your information. None of the Releasees shall have any responsibility under this Agreement or by virtue of their participation in the Event with respect to your information.\r\n1. You acknowledge that the Organizers and Chainlink have the right to reject participants in the Event at their sole discretion. \r\n1. The Organizers have the unrestricted right to use your likeness, image, voice, opinions, and appearance, and also any images of your projects, developments, materials and belongings made at or brought to the Event, captured through video, photographs or other media during the Event for the express purpose of creating promotional material (the “Images”), for the purposes of use in websites, promotional materials, publications and other media of any of the Organizers, whether in print or electronically (the “Materials”). The foregoing right includes permission to copyright, use, re-use, publish, and republish Images in which you may be included, intact or in part, composite or distorted in character or form, without restriction as to changes or transformations, in conjunction with your own or a fictitious name, reproduction in color or otherwise, made through any and all media now or hereafter known;\r\n    1. The Organizers shall solely own the Materials in which you or your Images, in whole or in part, may appear, including copyright interests, and you have no ownership rights therein;\r\n    1. You give all clearances, copyright and otherwise, for use of your Images, and waive any moral rights that you may have in the Materials in which you or your Images may appear. The rights granted to the Organizers herein are perpetual and worldwide. For greater certainty, you agree that your images may continue to be used after the completion of the Event;\r\n    1. You relinquish any right that you may have to examine or approve the Materials in which you or your Images may appear or the use to which they may be applied; and\r\n    1. You hereby release, discharge and agree to save harmless each and all of the Organizers from any liability by virtue of any blurring, distortion, alteration, optical illusion, or use in composite form of the Images whether intentional or otherwise, that may occur or be produced in the recording of the Images or in any subsequent processing thereof, as well as any publication thereof, including without limitation any claims for libel or invasion of privacy.\r\n1. You agree that the Organizers may share your registration details, LinkedIn/Github profiles, details of your Hackathon submission, and other information obtained from you in the course of, or relating to, the Event with the Sponsors, and acknowledge that such Sponsors may contact you during and after the Event. By agreeing to this document and/or participating in the Event, you are providing your express consent to communications by the Organizers and Sponsors (including email communications, both marketing and informational) respecting the products and services of the Organizers and Sponsors, and future events.\r\n1. For valuable consideration, including permission to take part in the Event, you hereby covenant not to sue, and release, waive, and discharge the Releasees, their owners, officers, agents, affiliates, employees, volunteers, and/or any other person or entity in any way associated with the Event, from liability for any injury to your person or property or death arising out of or related to your participation in the Event, whether caused by an act of negligence of the Releasees or otherwise; and hereby assume full responsibility for any risk of bodily injury, death or property damage arising out of or related to your participation in the Event, whether occurring to you or to any other person or entity for whom you are responsible or with whom you are associated, and whether caused by an act of negligence of the Releasees or otherwise. The foregoing release includes, but is not limited to, any occurrences of personal injury, illness (food-borne or otherwise), and loss of belongings, whether by theft or otherwise. You further agree that this instrument (the terms of which collectively are referred to as the Rules) is intended to be as broad and inclusive as is permitted by the laws of the State of California and that if any portion thereof is held invalid, that portion shall be invalid only to the extent required by law, and the balance shall, notwithstanding, continue in full force and effect.\r\n1. You agree to indemnify and hold the Organizers and Sponsors (and judges, mentors, volunteers, organizers, Chainlink team administering the Event) and each of their employees, representatives, agents, attorneys, affiliates, directors, employees, officers, managers, and shareholders (the “Indemnified Parties”) harmless from any damage, loss, cost, or expense (including without limitation, attorneys’ fees and costs) incurred in connection with any third-party claim, demand, or action (“Claim”) brought or asserted against any of the Indemnified Parties, alleging facts or circumstances that would constitute a breach of any provision of the these Rules by you; arising from, related to, or connected with your entry, Submitted Materials, presentations and participation in any way in any aspect of Event , including receipt of any prize. If you are obligated to provide indemnification pursuant to this provision, the Indemnified Parties may, in their sole discretion, control the disposition of any claim at your sole cost and expense. Without limitation of the foregoing, you may not settle, compromise, or in any other manner dispose of any claim without the Organizers’s express written consent.\r\n1. If selected as a winner of a Chainlink award, your acceptance of the Chainlink award means you agree to the following:\r\n    1. You will not disparage Chainlink or its products, services, agents, representatives, directors, officers, shareholders, attorneys, employees, vendors, business partners, affiliates, successors or assigns, or any person acting by, through, under or in concert with any of them, with any written or oral statement. Nothing in this paragraph shall prohibit the winner from providing truthful information in response to a valid subpoena or other legal process; however, the winning participant agrees to provide Company sufficient notice of such to allow Company the opportunity to oppose such subpoena or legal process prior to providing any information (unless expressly prohibited by applicable law).\r\n    1. You agree that awards are subject to availability and Chainlink and the Sponsors reserve the right to substitute or withdraw any prize without giving notice at their sole discretion.\r\n    1. Any media, such as a blog post, that is created about winning the Event, will first be shared with the Chainlink team beforehand so that we can coordinate and help you spread the message. \r\n    1. You agree to an interview with a writer affiliated with the Chainlink team, which will result in featuring your project on the Chainlink website and sharing your project with the greater community. \r\n"
    },
    {
      "title": "LINK Token Contracts",
      "headings": [
        {
          "depth": 2,
          "slug": "ethereum",
          "text": "Ethereum"
        },
        {
          "depth": 3,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 3,
          "slug": "goerli-testnet",
          "text": "Goerli testnet"
        },
        {
          "depth": 3,
          "slug": "rinkeby-testnet-deprecated",
          "text": "Rinkeby testnet (Deprecated)"
        },
        {
          "depth": 3,
          "slug": "kovan-testnet-deprecated",
          "text": "Kovan testnet (Deprecated)"
        },
        {
          "depth": 2,
          "slug": "bnb-chain",
          "text": "BNB Chain"
        },
        {
          "depth": 3,
          "slug": "bnb-chain-mainnet",
          "text": "BNB Chain mainnet"
        },
        {
          "depth": 3,
          "slug": "bnb-chain-testnet",
          "text": "BNB Chain testnet"
        },
        {
          "depth": 2,
          "slug": "polygon-matic",
          "text": "Polygon (Matic)"
        },
        {
          "depth": 3,
          "slug": "polygon-mainnet",
          "text": "Polygon mainnet"
        },
        {
          "depth": 3,
          "slug": "mumbai-testnet",
          "text": "Mumbai testnet"
        },
        {
          "depth": 2,
          "slug": "rsk",
          "text": "RSK"
        },
        {
          "depth": 3,
          "slug": "rsk-mainnet",
          "text": "RSK mainnet"
        },
        {
          "depth": 2,
          "slug": "gnosis-chain-xdai",
          "text": "Gnosis Chain (xDai)"
        },
        {
          "depth": 3,
          "slug": "gnosis-chain-mainnet",
          "text": "Gnosis Chain mainnet"
        },
        {
          "depth": 2,
          "slug": "avalanche",
          "text": "Avalanche"
        },
        {
          "depth": 3,
          "slug": "avalanche-mainnet",
          "text": "Avalanche mainnet"
        },
        {
          "depth": 3,
          "slug": "fuji-testnet",
          "text": "Fuji testnet"
        },
        {
          "depth": 2,
          "slug": "fantom",
          "text": "Fantom"
        },
        {
          "depth": 3,
          "slug": "fantom-mainnet",
          "text": "Fantom mainnet"
        },
        {
          "depth": 3,
          "slug": "fantom-testnet",
          "text": "Fantom testnet"
        },
        {
          "depth": 2,
          "slug": "arbitrum",
          "text": "Arbitrum"
        },
        {
          "depth": 3,
          "slug": "arbitrum-mainnet",
          "text": "Arbitrum mainnet"
        },
        {
          "depth": 3,
          "slug": "arbitrum-rinkeby-testnet",
          "text": "Arbitrum Rinkeby testnet"
        },
        {
          "depth": 2,
          "slug": "heco-chain",
          "text": "HECO Chain"
        },
        {
          "depth": 3,
          "slug": "heco-chain-mainnet",
          "text": "HECO Chain mainnet"
        },
        {
          "depth": 2,
          "slug": "optimism",
          "text": "Optimism"
        },
        {
          "depth": 3,
          "slug": "optimism-mainnet",
          "text": "Optimism mainnet"
        },
        {
          "depth": 3,
          "slug": "optimism-goerli-testnet",
          "text": "Optimism Goerli testnet"
        },
        {
          "depth": 2,
          "slug": "harmony",
          "text": "Harmony"
        },
        {
          "depth": 3,
          "slug": "harmony-mainnet",
          "text": "Harmony mainnet"
        },
        {
          "depth": 2,
          "slug": "moonriver",
          "text": "Moonriver"
        },
        {
          "depth": 3,
          "slug": "moonriver-mainnet",
          "text": "Moonriver mainnet"
        },
        {
          "depth": 2,
          "slug": "moonbeam",
          "text": "Moonbeam"
        },
        {
          "depth": 3,
          "slug": "moonbeam-mainnet",
          "text": "Moonbeam mainnet"
        },
        {
          "depth": 2,
          "slug": "metis",
          "text": "Metis"
        },
        {
          "depth": 3,
          "slug": "andromeda-mainnet",
          "text": "Andromeda mainnet"
        },
        {
          "depth": 2,
          "slug": "klaytn",
          "text": "Klaytn"
        },
        {
          "depth": 3,
          "slug": "baobab-testnet",
          "text": "Baobab testnet"
        }
      ],
      "url": "/resources/link-token-contracts",
      "section": "ethereum",
      "description": "Addresses for the LINK token on supported networks.",
      "content": "\r\nLINK tokens are used to pay node operators for retrieving data for smart contracts and also for deposits placed by node operators as required by contract creators. The smallest denomination of LINK is called a Juel, and 1,000,000,000,000,000,000 (1e18) Juels are equal to 1 LINK. This is similar to Wei, which is the [smallest denomination of ETH](https://ethereum.org/en/developers/docs/intro-to-ether/#denominations).\r\n\r\nThe LINK token is an ERC677 token that inherits functionality from the ERC20 token standard and allows token transfers to contain a data payload. Read more about the [ERC677 transferAndCall token standard](https://github.com/ethereum/EIPs/issues/677).\r\n\r\n**Networks:**\r\n\r\n- [Ethereum](#ethereum)\r\n- [BNB Chain](#bnb-chain)\r\n- [Polygon (Matic)](#polygon-matic)\r\n- [RSK](#rsk)\r\n- [Gnosis Chain (xDai)](#gnosis-chain-xdai)\r\n- [Avalanche](#avalanche)\r\n- [Fantom](#fantom)\r\n- [Arbitrum](#arbitrum)\r\n- [HECO Chain](#heco-chain)\r\n- [Optimism](#optimism)\r\n- [Harmony](#harmony)\r\n- [Moonriver](#moonriver)\r\n- [Moonbeam](#moonbeam)\r\n- [Metis](#metis)\r\n- [Klaytn](#klaytn)\r\n\r\n## Ethereum\r\n\r\n### Ethereum Mainnet\r\n\r\n| Parameter      | Value                                                                                                                                                                                                        |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1`                                                                                                                                                                                                          |\r\n| Address        | <a class=\"erc-token-address\" id=\"1_0x514910771AF9Ca656af840dff83E8264EcF986CA\" href=\"https://etherscan.io/token/0x514910771AF9Ca656af840dff83E8264EcF986CA\">`0x514910771AF9Ca656af840dff83E8264EcF986CA`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                         |\r\n| Decimals       | 18                                                                                                                                                                                                           |\r\n| Network status | [ethstats.net](https://ethstats.net/)                                                                                                                                                                        |\r\n\r\n### Goerli testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/goerli). Testnet ETH is available at [goerlifaucet.com](https://goerlifaucet.com/) or the faucets listed at [faucetlink.to/goerli](https://faucetlink.to/goerli).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                               |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `ETH_CHAIN_ID` | `5`                                                                                                                                                                                                                 |\r\n| Address        | <a class=\"erc-token-address\" id=\"5_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://goerli.etherscan.io/token/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                     |\r\n| Symbol         | LINK                                                                                                                                                                                                                |\r\n| Decimals       | 18                                                                                                                                                                                                                  |\r\n\r\n### Rinkeby testnet (Deprecated)\r\n\r\n:::caution[ The Rinkeby network is [officially deprecated](https://ethereum.org/en/developers/docs/networks/#rinkeby) and is no longer supported. [Goerli](#goerli-testnet) is the recommended testnet for Chainlink on Ethereum.]\r\n\r\n:::\r\n\r\nTestnet LINK and ETH are available at [faucets.chain.link](https://faucets.chain.link/rinkeby). Testnet ETH is also available at [rinkeby-faucet.com](https://rinkeby-faucet.com/) and [app.mycrypto.com/faucet](https://app.mycrypto.com/faucet).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `4`                                                                                                                                                                                                                  |\r\n| Address        | <a class=\"erc-token-address\" id=\"4_0x01BE23585060835E02B77ef475b0Cc51aA1e0709\" href=\"https://rinkeby.etherscan.io/token/0x01BE23585060835E02B77ef475b0Cc51aA1e0709\">`0x01BE23585060835E02B77ef475b0Cc51aA1e0709`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                      |\r\n| Symbol         | LINK                                                                                                                                                                                                                 |\r\n| Decimals       | 18                                                                                                                                                                                                                   |\r\n\r\n### Kovan testnet (Deprecated)\r\n\r\n:::caution[ The Kovan network is [officially deprecated](https://ethereum.org/en/developers/docs/networks/#kovan) and is no longer supported. [Goerli](#goerli-testnet) is the recommended testnet for Chainlink on Ethereum.]\r\n\r\n:::\r\n\r\nTestnet LINK and ETH are available at [faucets.chain.link](https://faucets.chain.link/kovan).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                               |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `ETH_CHAIN_ID` | `42`                                                                                                                                                                                                                |\r\n| Address        | <a class=\"erc-token-address\" id=\"42_0xa36085F69e2889c224210F603D836748e7dC0088\" href=\"https://kovan.etherscan.io/token/0xa36085F69e2889c224210F603D836748e7dC0088\">`0xa36085F69e2889c224210F603D836748e7dC0088`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                     |\r\n| Symbol         | LINK                                                                                                                                                                                                                |\r\n| Decimals       | 18                                                                                                                                                                                                                  |\r\n\r\n## BNB Chain\r\n\r\n### BNB Chain mainnet\r\n\r\nBNB is used to pay for transactions on the BNB Chain mainnet.\r\n\r\n:::caution[ ERC-677 LINK on BNB Chain]\r\n\r\n The LINK provided by the [BNB Chain Bridge](https://www.bnbchain.world/en/bridge) is not ERC-677 compatible, so you cannot use it with Chainlink services or oracle nodes. Use the [**Chainlink PegSwap service**](https://pegswap.chain.link/) to convert bridged LINK to the official ERC-677 LINK token on BNB Chain.\r\n\r\n:::\r\n\r\n| Parameter      | Value                                                                                                                                                                                                        |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `56`                                                                                                                                                                                                         |\r\n| Address        | <a class=\"erc-token-address\" id=\"56_0x404460c6a5ede2d891e8297795264fde62adbb75\" href=\"https://bscscan.com/token/0x404460c6a5ede2d891e8297795264fde62adbb75\">`0x404460c6a5ede2d891e8297795264fde62adbb75`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                         |\r\n| Decimals       | 18                                                                                                                                                                                                           |\r\n| Network status | [bscscan.freshstatus.io](https://bscscan.freshstatus.io/)                                                                                                                                                    |\r\n\r\n### BNB Chain testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/chapel). Testnet BNB is availalbe at [testnet.binance.org/faucet-smart](https://testnet.binance.org/faucet-smart).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                  |\r\n| :------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `97`                                                                                                                                                                                                                   |\r\n| Address        | <a class=\"erc-token-address\" id=\"97_0x84b9b910527ad5c03a9ca831909e21e236ea7b06\" href=\"https://testnet.bscscan.com/address/0x84b9b910527ad5c03a9ca831909e21e236ea7b06\">`0x84b9b910527ad5c03a9ca831909e21e236ea7b06`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                        |\r\n| Symbol         | LINK                                                                                                                                                                                                                   |\r\n| Decimals       | 18                                                                                                                                                                                                                     |\r\n\r\n## Polygon (Matic)\r\n\r\n### Polygon mainnet\r\n\r\nMATIC is used to pay for transactions on Polygon. You can use the [Polygon Bridge](https://wallet.polygon.technology/bridge) to transfer tokens to Polygon mainnet and then use [Polygon Gas Swap](https://wallet.polygon.technology/gas-swap/) to swap supported tokens to MATIC.\r\n\r\n:::caution[ ERC-677 LINK on Polygon]\r\n\r\n The LINK provided by the [Polygon (Matic) Bridge](https://wallet.polygon.technology/bridge) is not ERC-677 compatible, so you cannot use it with Chainlink services or oracle nodes. Use the [**Chainlink PegSwap service**](https://pegswap.chain.link/) to convert bridged LINK to the official ERC-677 LINK token on Polygon.\r\n\r\n Watch the [Moving Chainlink Cross-Chains](https://www.youtube.com/watch?v=WKvIGkBWRUA) video to learn more.\r\n\r\n:::\r\n\r\n| Parameter      | Value                                                                                                                                                                                                               |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `ETH_CHAIN_ID` | `137`                                                                                                                                                                                                               |\r\n| Address        | <a class=\"erc-token-address\" id=\"137_0xb0897686c545045afc77cf20ec7a532e3120e0f1\" href=\"https://polygonscan.com/address/0xb0897686c545045afc77cf20ec7a532e3120e0f1\">`0xb0897686c545045afc77cf20ec7a532e3120e0f1`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                     |\r\n| Symbol         | LINK                                                                                                                                                                                                                |\r\n| Decimals       | 18                                                                                                                                                                                                                  |\r\n| Network status | [polygon.io/system](https://polygon.io/system)                                                                                                                                                                      |\r\n\r\n### Mumbai testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/mumbai). Testnet MATIC is available at the [Polygon faucet](https://faucet.polygon.technology/).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                         |\r\n| :------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `80001`                                                                                                                                                                                                                       |\r\n| Address        | <a class=\"erc-token-address\" id=\"80001_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://mumbai.polygonscan.com/address/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB `</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                               |\r\n| Symbol         | LINK                                                                                                                                                                                                                          |\r\n| Decimals       | 18                                                                                                                                                                                                                            |\r\n\r\n## RSK\r\n\r\n### RSK mainnet\r\n\r\nRBTC is used to pay for transactions on RSK mainnet. Use [RSK’s built in PowPeg](https://developers.rsk.co/guides/get-crypto-on-rsk/powpeg-btc-rbtc/) to transfer BTC to RSK mainnet as RBTC. You can use the [RSK bridge](https://tokenbridge.rsk.co/) to send LINK from Ethereum Mainnet to RSK.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                              |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `30`                                                                                                                                                                                                               |\r\n| Address        | <a class=\"erc-token-address\" id=\"30_0x14adae34bef7ca957ce2dde5add97ea050123827\" href=\"https://explorer.rsk.co/address/0x14adae34bef7ca957ce2dde5add97ea050123827\">`0x14adae34bef7ca957ce2dde5add97ea050123827`</a> |\r\n| Name           | rLINK                                                                                                                                                                                                              |\r\n| Symbol         | rLINK                                                                                                                                                                                                              |\r\n| Decimals       | 18                                                                                                                                                                                                                 |\r\n\r\n## Gnosis Chain (xDai)\r\n\r\n### Gnosis Chain mainnet\r\n\r\nxDAI is used to pay for transactions on Gnosis Chain mainnet. Use the [xDai Bridge](https://bridge.gnosischain.com/) to send DAI from Ethereum Mainnet to Gnosis Chain and convert it to xDAI. Use [OmniBridge](https://omni.gnosischain.com/bridge) to send LINK from Ethereum Mainnet to Gnosis Chain.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                       |\r\n| :------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `100`                                                                                                                                                                                                                       |\r\n| Address        | <a class=\"erc-token-address\" id=\"100_0xE2e73A1c69ecF83F464EFCE6A5be353a37cA09b2\" href=\"https://blockscout.com/poa/xdai/address/0xE2e73A1c69ecF83F464EFCE6A5be353a37cA09b2\">`0xE2e73A1c69ecF83F464EFCE6A5be353a37cA09b2`</a> |\r\n| Name           | Chainlink Token on Gnosis Chain (xDai)                                                                                                                                                                                      |\r\n| Symbol         | LINK                                                                                                                                                                                                                        |\r\n| Decimals       | 18                                                                                                                                                                                                                          |\r\n| Network status | [blockscout.com/xdai/mainnet](https://blockscout.com/xdai/mainnet/)                                                                                                                                                         |\r\n\r\n## Avalanche\r\n\r\n### Avalanche mainnet\r\n\r\nAVAX is the token you use to pay for transactions on Avalanche mainnet. Use the [Avalanche Bridge](https://bridge.avax.network/) to transfer LINK from Ethereum Mainnet to Avalanche.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                              |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `43114`                                                                                                                                                                                                            |\r\n| Address        | <a class=\"erc-token-address\" id=\"43114_0x5947BB275c521040051D82396192181b413227A3\" href=\"https://snowtrace.io/address/0x5947BB275c521040051D82396192181b413227A3\">`0x5947BB275c521040051D82396192181b413227A3`</a> |\r\n| Name           | Chainlink Token on Avalanche                                                                                                                                                                                       |\r\n| Symbol         | LINK                                                                                                                                                                                                               |\r\n| Decimals       | 18                                                                                                                                                                                                                 |\r\n| Network status | [status.avax.network](https://status.avax.network/)                                                                                                                                                                |\r\n\r\n### Fuji testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/fuji). Testnet AVAX is available at [faucet.avax.network](https://faucet.avax.network/).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                      |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `43113`                                                                                                                                                                                                                    |\r\n| Address        | <a class=\"erc-token-address\" id=\"43113_0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\" href=\"https://testnet.snowtrace.io/address/0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\">`0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846`</a> |\r\n| Name           | Chainlink Token on Avalanche                                                                                                                                                                                               |\r\n| Symbol         | LINK                                                                                                                                                                                                                       |\r\n| Decimals       | 18                                                                                                                                                                                                                         |\r\n\r\n## Fantom\r\n\r\n### Fantom mainnet\r\n\r\nFTM is used to pay for transactions on Fantom Mainnet. Use [bridge.multichain.org](https://bridge.multichain.org/#/router) to transfer FTM and LINK to Fantom mainnet.\r\n\r\n:::caution[ ERC-677 LINK on Fantom]\r\n\r\n You must use ERC-677 LINK on Fantom. ERC-20 LINK will not work with Chainlink services.\r\n When you use [bridge.multichain.org](https://bridge.multichain.org/#/router) to send LINK to the Fantom network, be sure to select LINK-ERC677 as the token you will receive on Fantom mainnet.\r\n\r\n:::\r\n\r\n| Parameter      | Value                                                                                                                                                                                                           |\r\n| :------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `250`                                                                                                                                                                                                           |\r\n| Address        | <a class=\"erc-token-address\" id=\"250_0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\" href=\"https://ftmscan.com/address/0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\">`0x6F43FF82CCA38001B6699a8AC47A2d0E66939407`</a> |\r\n| Name           | Chainlink Token on Fantom                                                                                                                                                                                       |\r\n| Symbol         | LINK                                                                                                                                                                                                            |\r\n| Decimals       | 18                                                                                                                                                                                                              |\r\n| Network status | [ftmscan.com](https://ftmscan.com/)                                                                                                                                                                             |\r\n\r\n### Fantom testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/fantom-testnet). Testnet FTM is available at [faucet.fantom.network](https://faucet.fantom.network/).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                    |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `4002`                                                                                                                                                                                                                   |\r\n| Address        | <a class=\"erc-token-address\" id=\"4002_0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\" href=\"https://testnet.ftmscan.com/address/0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\">`0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F`</a> |\r\n| Name           | Chainlink Token on Fantom                                                                                                                                                                                                |\r\n| Symbol         | LINK                                                                                                                                                                                                                     |\r\n| Decimals       | 18                                                                                                                                                                                                                       |\r\n\r\n## Arbitrum\r\n\r\n### Arbitrum mainnet\r\n\r\nETH is used to pay for transactions on the Arbitrum mainnet. You can use the [Arbitrum Bridge](https://bridge.arbitrum.io/) to transfer ETH and LINK to from Ethereum Mainnet to Arbitrum.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                      |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `42161`                                                                                                                                                                                                                    |\r\n| Address        | <a class=\"erc-token-address\" id=\"42161_0xf97f4df75117a78c1A5a0DBb814Af92458539FB4\" href=\"https://explorer.arbitrum.io/address/0xf97f4df75117a78c1A5a0DBb814Af92458539FB4\">`0xf97f4df75117a78c1A5a0DBb814Af92458539FB4`</a> |\r\n| Name           | Chainlink Token on Arbitrum Mainnet                                                                                                                                                                                        |\r\n| Symbol         | LINK                                                                                                                                                                                                                       |\r\n| Decimals       | 18                                                                                                                                                                                                                         |\r\n| Network status | [arbiscan.freshstatus.io](https://arbiscan.freshstatus.io/)                                                                                                                                                                |\r\n\r\n### Arbitrum Rinkeby testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/arbitrum-rinkeby). Testnet ETH is available at [faucet.rinkeby.io](https://faucet.rinkeby.io/).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                               |\r\n| :------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `421611`                                                                                                                                                                                                                            |\r\n| Address        | <a class=\"erc-token-address\" id=\"421611_0x615fBe6372676474d9e6933d310469c9b68e9726\" href=\"https://rinkeby-explorer.arbitrum.io/address/0x615fBe6372676474d9e6933d310469c9b68e9726\">`0x615fBe6372676474d9e6933d310469c9b68e9726`</a> |\r\n| Name           | Chainlink Token on Arbitrum Rinkeby                                                                                                                                                                                                 |\r\n| Symbol         | LINK                                                                                                                                                                                                                                |\r\n| Decimals       | 18                                                                                                                                                                                                                                  |\r\n\r\n## HECO Chain\r\n\r\n### HECO Chain mainnet\r\n\r\n| Parameter      | Value                                                                                                                                                                                                            |\r\n| :------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `128`                                                                                                                                                                                                            |\r\n| Address        | <a class=\"erc-token-address\" id=\"128_0x9e004545c59D359F6B7BFB06a26390b087717b42\" href=\"https://hecoinfo.com/address/0x9e004545c59D359F6B7BFB06a26390b087717b42\">`0x9e004545c59D359F6B7BFB06a26390b087717b42`</a> |\r\n| Name           | Heco-Peg LINK Token                                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                             |\r\n| Decimals       | 18                                                                                                                                                                                                               |\r\n| Network status | [hecoinfo.com](https://hecoinfo.com/)                                                                                                                                                                            |\r\n\r\n## Optimism\r\n\r\n### Optimism mainnet\r\n\r\nETH is used to pay for transactions on Optimism. Use the [Optimism Bridge](https://app.optimism.io/bridge) to transfer ETH and LINK from Ethereum Mainnet to Optimism mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                      |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `10`                                                                                                                                                                                                                       |\r\n| Address        | <a class=\"erc-token-address\" id=\"10_0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6\" href=\"https://optimistic.etherscan.io/address/0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6\">`0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6`</a> |\r\n| Name           | Chainlink Token on Optimism Mainnet                                                                                                                                                                                        |\r\n| Symbol         | LINK                                                                                                                                                                                                                       |\r\n| Decimals       | 18                                                                                                                                                                                                                         |\r\n| Network status | [status.optimism.io](https://status.optimism.io/)                                                                                                                                                                          |\r\n\r\n### Optimism Goerli testnet\r\n\r\nTestnet ETH is used to pay for transactions on Optimism. Use the [Optimism Bridge](https://app.optimism.io/bridge) to transfer testnet ETH and LINK from Ethereum Goerli to Optimistim Goerli. Select Optimism Goerli in your wallet to access the Optimism Goerli bridge.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                          |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `420`                                                                                                                                                                                                                          |\r\n| Address        | <a class=\"erc-token-address\" id=\"420_0xdc2cc710e42857672e7907cf474a69b63b93089f\" href=\"https://goerli-optimism.etherscan.io/token/0xdc2cc710e42857672e7907cf474a69b63b93089f\">`0xdc2cc710e42857672e7907cf474a69b63b93089f`</a> |\r\n| Name           | Chainlink Token on Optimism Goerli                                                                                                                                                                                             |\r\n| Symbol         | LINK                                                                                                                                                                                                                           |\r\n| Decimals       | 18                                                                                                                                                                                                                             |\r\n\r\n## Harmony\r\n\r\n### Harmony mainnet\r\n\r\nONE is used to pay for transactions on Harmony mainnet. You can use the [Harmony Bridge](https://bridge.harmony.one/) to transfer ONE and LINK token from Ethereum Mainnet to Harmony mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                           |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `ETH_CHAIN_ID` | `1666600000`                                                                                                                                                                                                                    |\r\n| Address        | <a class=\"erc-token-address\" id=\"1666600000_0x218532a12a389a4a92fC0C5Fb22901D1c19198aA\" href=\"https://explorer.harmony.one/address/0x218532a12a389a4a92fC0C5Fb22901D1c19198aA\">`0x218532a12a389a4a92fC0C5Fb22901D1c19198aA`</a> |\r\n| Name           | Chainlink Token on Harmony Mainnet                                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                                            |\r\n| Decimals       | 18                                                                                                                                                                                                                              |\r\n| Network status | [status.harmony.one](https://status.harmony.one/)                                                                                                                                                                               |\r\n\r\n## Moonriver\r\n\r\n### Moonriver mainnet\r\n\r\nMOVR is used to pay transaction fees on Moonriver mainnet. You can use [bridge.multichain.org](https://bridge.multichain.org/#/router) to transfer LINK to Moonriver mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                      |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1285`                                                                                                                                                                                                                     |\r\n| Address        | <a class=\"erc-token-address\" id=\"1285_0x8b12Ac23BFe11cAb03a634C1F117D64a7f2cFD3e\" href=\"https://moonriver.moonscan.io/address/0x8b12Ac23BFe11cAb03a634C1F117D64a7f2cFD3e\">`0x8b12Ac23BFe11cAb03a634C1F117D64a7f2cFD3e`</a> |\r\n| Name           | Chainlink Token on Moonriver Mainnet                                                                                                                                                                                       |\r\n| Symbol         | LINK                                                                                                                                                                                                                       |\r\n| Decimals       | 18                                                                                                                                                                                                                         |\r\n| Network status | [moonscan.freshstatus.io](https://moonscan.freshstatus.io/)                                                                                                                                                                |\r\n\r\n## Moonbeam\r\n\r\n### Moonbeam mainnet\r\n\r\nGLMR is used to pay transaction fees on Moonbeam mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                            |\r\n| :------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1284`                                                                                                                                                                                                           |\r\n| Address        | <a class=\"erc-token-address\" id=\"1284_0x012414A392F9FA442a3109f1320c439C45518aC3\" href=\"https://moonscan.io/address/0x012414A392F9FA442a3109f1320c439C45518aC3\">`0x012414A392F9FA442a3109f1320c439C45518aC3`</a> |\r\n| Name           | Chainlink Token on Moonbeam Mainnet                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                             |\r\n| Decimals       | 18                                                                                                                                                                                                               |\r\n| Network status | [moonscan.freshstatus.io](https://moonscan.freshstatus.io/)                                                                                                                                                      |\r\n\r\n## Metis\r\n\r\n### Andromeda mainnet\r\n\r\nMETIS is the currency that you use to pay for transactions on Metis mainnet. You can use the [Metis Bridge](https://bridge.metis.io/) to transfer METIS and LINK from Ethereum Mainnet to Metis mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                             |\r\n| :------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1088`                                                                                                                                                                                                                            |\r\n| Address        | <a class=\"erc-token-address\" id=\"1088_0x79892E8A3Aea66C8F6893fa49eC6208ef07EC046\"  href=\"https://andromeda-explorer.metis.io/address/0x79892E8A3Aea66C8F6893fa49eC6208ef07EC046\">`0x79892E8A3Aea66C8F6893fa49eC6208ef07EC046`</a> |\r\n| Name           | Chainlink Token on Metis Mainnet                                                                                                                                                                                                  |\r\n| Symbol         | LINK                                                                                                                                                                                                                              |\r\n| Decimals       | 18                                                                                                                                                                                                                                |\r\n| Network status | [andromeda-explorer.metis.io](https://andromeda-explorer.metis.io/)                                                                                                                                                               |\r\n\r\n## Klaytn\r\n\r\n### Baobab testnet\r\n\r\nKLAY is the currency that you use to pay for transactions on Klaytn testnet. Testnet LINK is available from [facuets.chain.link](https://faucets.chain.link/klaytn-testnet). Use the [KLAY Faucet](https://baobab.wallet.klaytn.foundation/faucet) to obtain testnet KLAY.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                       |\r\n| :------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1001`                                                                                                                                                                                                                      |\r\n| Address        | <a class=\"erc-token-address\" id=\"1001_0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18\"  href=\"https://baobab.scope.klaytn.com/token/0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18\">`0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18`</a> |\r\n| Name           | Chainlink Token on the Klaytn testnet                                                                                                                                                                                       |\r\n| Symbol         | LINK                                                                                                                                                                                                                        |\r\n| Decimals       | 18                                                                                                                                                                                                                          |\r\n| Network status | [status.klaytnapi.com](https://status.klaytnapi.com/)                                                                                                                                                                       |\r\n"
    },
    {
      "title": "Selecting Quality Data Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "data-feed-categories",
          "text": "Data Feed Categories"
        },
        {
          "depth": 3,
          "slug": "-verified-feeds",
          "text": "🟢 Verified Feeds"
        },
        {
          "depth": 3,
          "slug": "-monitored-feeds",
          "text": "🟡 Monitored Feeds"
        },
        {
          "depth": 3,
          "slug": "-custom-feeds",
          "text": "🔵 Custom Feeds"
        },
        {
          "depth": 3,
          "slug": "-specialized-feeds",
          "text": "⚫ Specialized Feeds"
        },
        {
          "depth": 3,
          "slug": "-deprecating",
          "text": "⭕ Deprecating"
        },
        {
          "depth": 2,
          "slug": "risk-mitigation",
          "text": "Risk Mitigation"
        },
        {
          "depth": 2,
          "slug": "chainlink-community-deployments",
          "text": "Chainlink Community Deployments"
        },
        {
          "depth": 2,
          "slug": "evaluating-data-sources-and-risks",
          "text": "Evaluating Data Sources and Risks"
        },
        {
          "depth": 3,
          "slug": "liquidity-and-its-distribution",
          "text": "Liquidity and its Distribution"
        },
        {
          "depth": 3,
          "slug": "single-source-data-providers",
          "text": "Single Source Data Providers"
        },
        {
          "depth": 3,
          "slug": "crypto-and-blockchain-actions",
          "text": "Crypto and Blockchain Actions"
        },
        {
          "depth": 3,
          "slug": "market-failures-resulting-from-extreme-events",
          "text": "Market Failures Resulting from Extreme Events"
        },
        {
          "depth": 3,
          "slug": "periods-of-high-network-congestion",
          "text": "Periods of High Network Congestion"
        },
        {
          "depth": 3,
          "slug": "unknown-and-known-users",
          "text": "Unknown and Known Users"
        },
        {
          "depth": 3,
          "slug": "extreme-events-causing-price-deviations-in-wrapped-or-bridged-assets",
          "text": "Extreme Events Causing Price Deviations in Wrapped or Bridged Assets"
        },
        {
          "depth": 3,
          "slug": "front-running-risk",
          "text": "Front Running Risk"
        },
        {
          "depth": 3,
          "slug": "fast-gas-reliability",
          "text": "Fast Gas Reliability"
        }
      ],
      "url": "/resources/selecting-data-feeds",
      "section": "ethereum",
      "content": "\r\nWhen you design your applications, consider the quality of the data that you use in your smart contracts. Ultimately you are responsible for identifying and assessing the accuracy, availability, and quality of data that you choose to consume via the Chainlink Network. Note that all feeds contain some inherent risk. Read the [Risk Mitigation](#risk-mitigation) and [Evaluating Data Sources](#evaluating-data-sources-and-risks) sections when making design decisions. Chainlink lists decentralized data feeds in the documentation to help developers build new applications integrated with data.\r\n\r\n**Topics**\r\n\r\n+ [Data Feed Categories](#data-feed-categories)\r\n+ [Risk Mitigation](#risk-mitigation)\r\n+ [Chainlink Community Deployments](#chainlink-community-deployments)\r\n+ [Evaluating Data Sources and Risks](#evaluating-data-sources-and-risks)\r\n\r\n## Data Feed Categories\r\n\r\nData feeds are grouped into the following categories based on the level of risk from lowest to highest:\r\n\r\n+ [Verified Feeds](#🟢-verified-feeds)\r\n+ [Monitored Feeds](#🟡-monitored-feeds)\r\n+ [Custom Feeds](#-custom-feeds)\r\n+ [Specialized Feeds](#-specialized-feeds)\r\n\r\n:::note[ For important updates regarding the use of Chainlink Price Feeds, users should join the official Chainlink Discord and subscribe to the [data-feeds-user-notifications channel](https://discord.gg/Dqy5N9UbsR).]\r\n\r\n:::\r\n\r\n### 🟢 Verified Feeds\r\n\r\nThese are data feeds that follow a standardized data feeds workflow. Chainlink node operators each query several sources for the market price and aggregate the estimates provided by those sources.\r\n\r\nVerified feeds have the following characteristics:\r\n\r\n- Highly resilient to disruption\r\n- Leverage many data sources\r\n- Use an extensive network of nodes\r\n- Highly liquid and well represented on a large number of markets\r\n\r\nThese feeds incorporate three layers of aggregation (at the data source, node operator, and oracle network layers), providing industry-grade security and reliability on the price data they reference. To learn more about the three layers of data aggregation, see the blog post about [Data Aggregation in Chainlink Price Feeds](https://blog.chain.link/levels-of-data-aggregation-in-chainlink-price-feeds/).\r\n\r\nInherent risks might still exist based on your use case, the blockchain on which the feed is deployed and the conditions on that chain.\r\n\r\n### 🟡 Monitored Feeds\r\n\r\nFeeds under the monitored category are *under review* by the Chainlink Labs team to support the stability of the broader ecosystem. While generally resilient and distributed, these feeds carry additional risk.\r\n\r\nData feeds might be under review for the following reasons:\r\n\r\n- The token project or asset is in early development\r\n- The project is going through a market event such as a token or liquidity migration\r\n- The token or project is being deprecated in the market\r\n\r\n### 🔵 Custom Feeds\r\n\r\nCustom Feeds are built to serve a specific use case and might not be suitable for general use or your use case's risk parameters. Users must evaluate the properties of a feed to make sure it aligns with their intended use case. [Contact the Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds) if you want more detail on any specific feeds in this category.\r\n\r\nCustom feeds have the following categories and compositions:\r\n\r\n- **On-chain single source feeds:** These feeds take their data from an on-chain source, however the feed has only a single data provider currently supporting the feed.\r\n- **On-chain Proof of Reserve Feeds:** Chainlink Proof of Reserve uses the largest decentralized collection of security-reviewed and Sybil-resistant node operators in the industry to acquire and verify reserve data. In this use case, reserves reside on-chain.\r\n- **Technical Feeds:** Feeds within this category measure a particular technical metric from a specified blockchain. For example, Fast Gas or Block Difficulty.\r\n- **Total Value Locked Feeds:** These feeds measure the total value locked in a particular protocol.\r\n- **Custom Index Feeds:** An index calculates a function of the values for multiple underlying assets. The function is specific to that index and is typically calculated by node operators following an agreed formula.\r\n\r\nIf you plan on using one of these feeds and would like to get a more detailed understanding, [contact the Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds).\r\n\r\n### ⚫ Specialized Feeds\r\n\r\nThese are purpose-built feeds that might rely heavily on contracts maintained by external entities. Typical users of these feeds are large institutional users with deep expertise in the market space they operate in.\r\n\r\nThese feeds are monitored and well-supported, but they might not meet the same levels of resiliency as the above categories. We strongly advise you to [speak with the Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds) to understand their use cases, properties, and associated risks.\r\n\r\n**Examples of Specialized feeds:**\r\n\r\n- **Off-chain Single Source Feeds:** Some data providers use a single data source, which might be necessary if only one source exists off-chain for a specific type of data.\r\n- **Off-chain Proof of Reserve Feeds:** Chainlink Proof of Reserve uses the largest decentralized collection of security-reviewed and Sybil-resistant node operators in the industry to acquire and verify reserve data. In this use case, reserves reside off-chain.\r\n- **LP Token Feeds:** These feeds use a decentralized feed for the underlying asset as well as calculations to value the LP tokens.\r\n- **Wrapped Calculated Feeds:** These feeds are typically pegged 1:1 to the underlying token or asset. Under normal market conditions, these feeds track their underlying value accurately. However, the price is a derivative formed from a calculated method and might not always track value precisely.\r\n\r\nIf you plan on using one of these feeds and would like to get a more detailed understanding, [contact the Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds).\r\n\r\n### ⭕ Deprecating\r\n\r\nThese feeds are being [deprecated](/docs/reference-contracts/#deprecation-of-chainlink-data-feeds). To find the deprecation dates for specific feeds, see the complete [deprecation list](/docs/deprecating-feeds/) or the [data feeds lists](/docs/reference-contracts/) for each network.\r\n\r\n## Risk Mitigation\r\n\r\nAs a development best practice, design your systems and smart contracts to be resilient and mitigate risk to your protocol and your users. Ensure that your systems can tolerate known and unknown exceptions that might occur. Some examples include but are not limited to volatile market conditions, the degraded performance of infrastructure, chains, or networks, and any other upstream outage related to data providers or node operators. You bear responsibility for any manner in which you use the Chainlink Network, its software, and documentation.\r\n\r\nTo help you prepare for unforeseen market events, we recommend taking additional steps for custom or specialized feeds to protect your application or protocol. This might also be worth considering in all categories based on the value that your application secures. This tooling is put in place to mitigate extreme market events, possible malicious activity on third-party venues or contracts, potential delays, performance degradation, and outages.\r\n\r\nBelow are some examples of tooling that Chainlink users have put in place:\r\n\r\n- **Circuit breakers:** In the case of an extreme price event, the contract would pause operations for a limited period of time.\r\n- **Contract update delays:** Contracts would not update until the protocol had received a recent fresh input from the data feed.\r\n- **Manual kill switch:** If a vulnerability or bug is discovered in one of the upstream contracts, the user can manually cease operation and temporarily sever the connection to the data feed.\r\n- **Monitoring:** Some users create their own monitoring alerts based on deviations in the data feeds that they are using.\r\n- **Soak testing:** Users are strongly advised to thoroughly test price feed integrations and incorporate a [soak period](https://en.wikipedia.org/wiki/Soak_testing) prior to providing access to end users or securing value.\r\n\r\nFor more detailed information about some of these examples, see the [Monitoring data feeds](/docs/using-chainlink-reference-contracts/#monitoring-data-feeds) documentation.\r\n\r\nFor important updates regarding the use of Chainlink Price Feeds, users should join the official Chainlink Discord and subscribe to the data-feeds-user-notifications channel: https://discord.gg/Dqy5N9UbsR\r\n\r\n## Chainlink Community Deployments\r\n\r\nChainlink technology is used by many within the blockchain community to support their use cases. Deployments built and run by community members are not tracked in the Chainlink documentation. Chainlink's community is continuously growing, and we believe they play a vital role in developing the ecosystem, so we continue to develop our software and tooling for anyone to use. Users have a wide variety of options for choosing how to deliver data on-chain. They can deploy Chainlink nodes themselves or via the extensive network of node operators that offer services and access one of the community-managed oracle networks that support the supply of various types of data on-chain. Chainlink Labs does not take responsibility for the use of Chainlink node software.\r\n\r\nIt is always recommended that you conduct a thorough analysis of your requirements and carry out appropriate due diligence on any partners you wish to use with your project.\r\n\r\n> **The Chainlink Labs team does not monitor community deployments** and encourages users to use best practices in observability, monitoring, and risk mitigation as appropriate for your application's stage of development and use case.\r\n\r\nAs your usage of data feeds evolves and requirements for higher availability and greater security increases, such as securing substantive value, the reliability properties of your data feed will become crucial. [Contact Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds) for services to ensure deployments meet the highest levels of availability and security.\r\n\r\n**High Risk: Forked, modified, or custom software:**\r\n\r\nAs Chainlink is open source, independent forks and modifications may exist. Chainlink Labs and development teams are not involved in these and do not track or maintain visibility on them. Chainlink Labs is not responsible for updates, enhancements, or bug fixes for these versions, and Chainlink Labs does not monitor them. Their use might pose risks that can do harm to your project. Users are responsible for thoroughly vetting and validating such deployments and determining their suitability.\r\n\r\n## Evaluating Data Sources and Risks\r\n\r\nIf your smart contracts use data feeds, assess those data feeds for the following characteristics:\r\n\r\n- [Liquidity and its Distribution](#liquidity-and-its-distribution)\r\n- [Single Source Data Providers](#single-source-data-providers)\r\n- [Crypto and Blockchain Actions](#crypto-and-blockchain-actions)\r\n- [Market Failures Resulting from Extreme Events](#market-failures-resulting-from-extreme-events)\r\n- [Periods of High Network Congestion](#periods-of-high-network-congestion)\r\n- [Unknown and Known Users](#unknown-and-known-users)\r\n- [Fast Gas Reliability](#fast-gas-reliability)\r\n\r\n### Liquidity and its Distribution\r\n\r\nIf your smart contract relies on pricing data for a specific asset, make sure that the asset has sufficient liquidity in the market to avoid price manipulation. Assets with low liquidity can be volatile, which might negatively impact your application and its users. Malicious actors might try to exploit volatility to take advantage of the logic in a smart contract and cause it to execute in a way that you did not intend.\r\n\r\nSome data feeds obtain their pricing data from individual exchanges rather than from aggregated price tracking services that gather their data from multiple exchanges. These are marked as such in the docs page for that feed. Assess the liquidity and reliability of that specific exchange.\r\n\r\n_Liquidity migrations_ occur when a project moves its tokens from one liquidity provider (such as a DEX, a CEX, or a new DeFi application) to another. When liquidity migrations occur, it can result in low liquidity in the original pool, making the asset susceptible to market manipulation. If your project is considering a liquidity migration, you should coordinate with relevant stakeholders, including liquidity providers, exchanges, oracle node operators, and users, to ensure prices are accurately reported throughout the migration.\r\n\r\nFeeds for assets with low market liquidity where data providers exhibit an abnormal price spread may, on occasion, see a price oscillate between two or more price points within regular intervals. To mitigate risk associated with such price oscillation, users must regularly monitor & assess the quality of an asset’s liquidity.\r\n\r\nDesign and test your contracts to handle price spikes and implement risk management measures to protect your assets. For example, create mock tests that return various oracle responses.\r\n\r\n### Single Source Data Providers\r\n\r\nSome data providers use a single data source, which might be necessary if only one source exists off-chain for a specific type of data. Evaluate data providers to make sure they provide high-quality data that your smart contracts can rely on. Any error or omission in the provider's data might negatively impact your application and its users.\r\n\r\n### Crypto and Blockchain Actions\r\n\r\nPrice data quality is subject to crypto actions by the crypto and blockchain project teams. Crypto actions are similar to [corporate actions](https://en.wikipedia.org/wiki/Corporate_action) but are specific to cryptocurrency and blockchain projects, such as token renaming, token swaps, redenominations, splits, network upgrades, and other migrations that teams who govern the blockchain or token might undertake\r\n\r\nSustaining data quality is dependent on data sources implementing the necessary adjustments related to such actions. For example, when a project upgrades to a new version of their token, this results in a *token migration*. When token migrations occur, they require building a new price feed to ensure that the token price is accurately reported. Similarly, actions by blockchain project teams, such as forks or upgrades to the network, may require new price feeds to ensure continuity and data quality. When considering a token migration, fork, network upgrade, or other crypto action, projects should proactively reach out to relevant stakeholders to ensure the asset price is accurately reported throughout the process.\r\n\r\n### Market Failures Resulting from Extreme Events\r\n\r\nUsers are strongly advised to set up monitoring and alerts in the event of unexpected market failures. Black swan events, hacks, coordinated attacks, or extreme market conditions may trigger unanticipated outcomes such as liquidity pools becoming unbalanced, unexpected re-weighting of indices, abnormal behavior by centralized or decentralized exchanges, or the de-pegging of synthetic assets and currencies from their intended exchange rates.\r\n\r\nUsers should be aware of inherently increased risk during such periods of high volatility and market failure.\r\n\r\n### Periods of High Network Congestion\r\n\r\nData Feed performance relies on the chains they are deployed on. Periods of high network congestion might impact the frequency of Chainlink Price Feeds. It is advised that you configure your applications to detect such chain performance issues and to respond appropriately.\r\n\r\n### Unknown and Known Users\r\n\r\nRoutine maintenance is carried out on Chainlink Data Feeds, including decommissioning, on an ad-hoc basis. These maintenance periods might require users to take action in order to maintain business continuity.\r\n\r\nNotifications are sent to inform known users regarding such occurrences, and it is strongly encouraged for all users, including those users utilizing data feeds for off-chain purposes, [to provide their contact information](https://chainlinkcommunity.typeform.com/unknownDfUsers?typeform-source=docs.chain.link) before utilizing data feeds. Without providing contact information, users will be unable to receive notifications regarding important price feed updates.\r\n\r\nIf you are using price feeds but have not provided your contact information, you can do so [here](https://chainlinkcommunity.typeform.com/unknownDfUsers?typeform-source=docs.chain.link). Users that fail to provide notification information do so at their own risk.\r\n\r\n### Extreme Events Causing Price Deviations in Wrapped or Bridged Assets\r\n\r\nChainlink Price Feeds are designed to provide the market-wide price of various assets, as determined by a volume-weighted average across a wide range of exchanges. On blockchain networks where assets are wrapped and/or bridged from another environment using a cross-chain token bridge, Chainlink Price Feeds on that blockchain will continue to report the market-wide price of the underlying asset as opposed to the price of the wrapped/bridged asset. This methodology reduces risks around market manipulation because wrapped/bridged tokens are often less liquid than the underlying asset.\r\n\r\nHowever, users should be aware that certain extreme events may result in price deviations between the wrapped/bridged asset and its underlying counterpart. For example, the exploitation or hack of a cross-chain token bridge may cause a collapse in demand for a particular wrapped asset. As such, users should construct their applications with safeguards, such as proactively pausing functionality, to mitigate risk during such scenarios.\r\n\r\nOne mechanism for securing a protocol utilizing wrapped assets is by incorporating [Chainlink Proof of Reserve](https://chain.link/proof-of-reserve). Chainlink Proof of Reserve enables the real-time reserve monitoring of off-chain and cross-chain assets, including those that have been wrapped/bridged. By comparing the wrapped token’s supply against a Chainlink Proof of Reserve feed, protocols can ensure that these assets are properly collateralized at all times.\r\n\r\n### Front Running Risk\r\n\r\nFront running (when a third party benefits from prior access to information about a transaction) is a known risk inherent to specific blockchain applications. Chainlink Data Feeds are optimized to prioritize high levels of data quality and reliability over latency.\r\n\r\nTo mitigate the risk associated with front running, users building highly latency-dependent applications should assess whether the configuration of data feeds meets their needed specifications for speed and frequency.\r\n\r\n### Fast Gas Reliability\r\n\r\nThe [Fast Gas Data Feed](https://data.chain.link/ethereum/mainnet/gas/fast-gas-gwei) provides a simple way to determine the price of gas so you can estimate how much gas you need to make a transaction execute quickly. Fast gas prices can be manipulated, so you should design your applications to detect gas price volatility or malicious activity that might affect the costs of your transactions.\r\n\r\n:::note[ The best practices above are provided for informational purposes only. You are responsible for reviewing the quality of the data that you integrate into your smart contracts.]\r\n\r\n:::\r\n"
    },
    {
      "title": "Supported Networks",
      "headings": [
        {
          "depth": 2,
          "slug": "coordinator-parameters",
          "text": "Coordinator parameters"
        },
        {
          "depth": 2,
          "slug": "fee-parameters",
          "text": "Fee parameters"
        },
        {
          "depth": 2,
          "slug": "configurations",
          "text": "Configurations"
        },
        {
          "depth": 3,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 3,
          "slug": "goerli-testnet",
          "text": "Goerli testnet"
        },
        {
          "depth": 3,
          "slug": "rinkeby-testnet-deprecated",
          "text": "Rinkeby testnet (Deprecated)"
        },
        {
          "depth": 3,
          "slug": "bnb-chain",
          "text": "BNB Chain"
        },
        {
          "depth": 3,
          "slug": "bnb-chain-testnet",
          "text": "BNB Chain testnet"
        },
        {
          "depth": 3,
          "slug": "polygon-matic-mainnet",
          "text": "Polygon (Matic) mainnet"
        },
        {
          "depth": 3,
          "slug": "polygon-matic-mumbai-testnet",
          "text": "Polygon (Matic) Mumbai testnet"
        },
        {
          "depth": 3,
          "slug": "avalanche-mainnet",
          "text": "Avalanche mainnet"
        },
        {
          "depth": 3,
          "slug": "avalanche-fuji-testnet",
          "text": "Avalanche Fuji testnet"
        },
        {
          "depth": 3,
          "slug": "fantom-mainnet",
          "text": "Fantom mainnet"
        },
        {
          "depth": 3,
          "slug": "fantom-testnet",
          "text": "Fantom testnet"
        },
        {
          "depth": 3,
          "slug": "klaytn-baobab-testnet",
          "text": "Klaytn Baobab testnet"
        }
      ],
      "url": "/vrf-supported-networks",
      "section": "ethereum",
      "content": "\n<VrfCommon />\n\nChainlink VRF allows you to integrate provably fair and verifiably random data in your smart contract.\n\nFor implementation details, read [Introduction to Chainlink VRF](/docs/vrf/v2/introduction/).\n\n## Coordinator parameters\n\nThese parameters are configured in the coordinator contract. You can view these values by running `getConfig` on the coordinator or by viewing the coordinator contracts in a blockchain explorer.\n\n- `uint16 minimumRequestConfirmations`: The minimum number of confirmation blocks on VRF requests before oracles respond\n- `uint32 maxGasLimit`: The maximum gas limit supported for a `fulfillRandomWords` callback.\n- `uint32 stalenessSeconds`: How long the coordinator waits until we consider the ETH/LINK price used for converting gas costs to LINK is stale and use `fallbackWeiPerUnitLink`\n- `uint32 gasAfterPaymentCalculation`: How much gas is used outside of the payment calculation. This covers the additional operations required to decrement the subscription balance and increment the balance for the oracle that handled the request.\n\n## Fee parameters\n\nFee parameters are configured in the coordinator contract and specify the premium you pay per request in addition to the gas cost for the transaction. You can view them by running `getFeeConfig` on the coordinator. The `uint32 fulfillmentFlatFeeLinkPPMTier1` parameter defines the fees per request specified in millionths of LINK.\n\n## Configurations\n\n- [Ethereum Mainnet](#ethereum-mainnet)\n- [Goerli testnet](#goerli-testnet)\n- [Rinkeby testnet](#rinkeby-testnet-deprecated)\n- [BNB Chain](#bnb-chain)\n- [BNB Chain testnet](#bnb-chain-testnet)\n- [Polygon mainnet](#polygon-matic-mainnet)\n- [Polygon Mumbai testnet](#polygon-matic-mumbai-testnet)\n- [Avalanche mainnet](#avalanche-mainnet)\n- [Avalanche Fuji testnet](#avalanche-fuji-testnet)\n- [Fantom mainnet](#fantom-mainnet)\n- [Fantom testnet](#fantom-testnet)\n- [Klaytn Baobab testnet](#klaytn-baobab-testnet)\n\n### Ethereum Mainnet\n\n| Item                  | Value                                                                                                                                                                                                        |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token            | <a class=\"erc-token-address\" id=\"1_0x514910771af9ca656af840dff83e8264ecf986ca\" href=\"https://etherscan.io/token/0x514910771af9ca656af840dff83e8264ecf986ca\">`0x514910771af9ca656af840dff83e8264ecf986ca`</a> |\n| VRF Coordinator       | [`0x271682DEB8C4E0901D1a1550aD2e64D568E69909`](https://etherscan.io/address/0x271682DEB8C4E0901D1a1550aD2e64D568E69909)                                                                                      |\n| 200 gwei Key Hash     | `0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef`                                                                                                                                         |\n| 500 gwei Key Hash     | `0xff8dedfbfa60af186cf3c830acbc32c05aae823045ae5ea7da1e45fbfaba4f92`                                                                                                                                         |\n| 1000 gwei Key Hash    | `0x9fe0eebf5e446e3c998ec9bb19951541aee00bb90ea201ae456421a2ded86805`                                                                                                                                         |\n| Premium               | 0.25 LINK                                                                                                                                                                                                    |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                    |\n| Minimum Confirmations | 3                                                                                                                                                                                                            |\n| Maximum Confirmations | 200                                                                                                                                                                                                          |\n| Maximum Random Values | 500                                                                                                                                                                                                          |\n\n### Goerli testnet\n\n> 🚰 Goerli Faucets\n>\n> Testnet LINK is available from https://faucets.chain.link/goerli\n> Testnet ETH is available from https://goerlifaucet.com/ or faucets listed at https://faucetlink.to/goerli.\n\n| Item                  | Value                                                                                                                                                                                                               |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"5_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://goerli.etherscan.io/token/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB`</a> |\n| VRF Coordinator       | [`0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D`](https://goerli.etherscan.io/address/0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D)                                                                                      |\n| 30 gwei Key Hash      | `0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15`                                                                                                                                                |\n| Premium               | 0.25 LINK                                                                                                                                                                                                           |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                           |\n| Minimum Confirmations | 3                                                                                                                                                                                                                   |\n| Maximum Confirmations | 200                                                                                                                                                                                                                 |\n| Maximum Random Values | 500                                                                                                                                                                                                                 |\n\n### Rinkeby testnet (Deprecated)\n\nThe Rinkeby network is [officially deprecated](https://ethereum.org/en/developers/docs/networks/#rinkeby) and is no longer be supported. [Goerli](#goerli-testnet) is the recommended testnet for Chainlink on Ethereum.\n\n> 🚰 Rinkeby Faucets\n>\n> Testnet LINK and ETH are available from https://faucets.chain.link/rinkeby\n> Backup Testnet ETH Faucets: https://rinkeby-faucet.com/, https://app.mycrypto.com/faucet\n\n| Item                  | Value                                                                                                                                                                                                                |\n| --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"4_0x01BE23585060835E02B77ef475b0Cc51aA1e0709\" href=\"https://rinkeby.etherscan.io/token/0x01BE23585060835E02B77ef475b0Cc51aA1e0709\">`0x01BE23585060835E02B77ef475b0Cc51aA1e0709`</a> |\n| VRF Coordinator       | [`0x6168499c0cFfCaCD319c818142124B7A15E857ab`](https://rinkeby.etherscan.io/address/0x6168499c0cFfCaCD319c818142124B7A15E857ab)                                                                                      |\n| 30 gwei Key Hash      | `0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc`                                                                                                                                                 |\n| Premium               | 0.25 LINK                                                                                                                                                                                                            |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                            |\n| Minimum Confirmations | 3                                                                                                                                                                                                                    |\n| Maximum Confirmations | 200                                                                                                                                                                                                                  |\n| Maximum Random Values | 500                                                                                                                                                                                                                  |\n\n### BNB Chain\n\n| Item                  | Value                                                                                                                                                                                                        |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token            | <a class=\"erc-token-address\" id=\"56_0x404460c6a5ede2d891e8297795264fde62adbb75\" href=\"https://bscscan.com/token/0x404460c6a5ede2d891e8297795264fde62adbb75\">`0x404460c6a5ede2d891e8297795264fde62adbb75`</a> |\n| VRF Coordinator       | [`0xc587d9053cd1118f25F645F9E08BB98c9712A4EE`](https://bscscan.com/address/0xc587d9053cd1118f25F645F9E08BB98c9712A4EE)                                                                                       |\n| 200 gwei Key Hash     | `0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04`                                                                                                                                         |\n| 500 gwei Key Hash     | `0xba6e730de88d94a5510ae6613898bfb0c3de5d16e609c5b7da808747125506f7`                                                                                                                                         |\n| 1000 gwei Key Hash    | `0x17cd473250a9a479dc7f234c64332ed4bc8af9e8ded7556aa6e66d83da49f470`                                                                                                                                         |\n| Premium               | 0.005 LINK                                                                                                                                                                                                   |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                    |\n| Minimum Confirmations | 3                                                                                                                                                                                                            |\n| Maximum Confirmations | 200                                                                                                                                                                                                          |\n| Maximum Random Values | 500                                                                                                                                                                                                          |\n\n### BNB Chain testnet\n\n> 🚰 BNB Chain Faucet\n>\n> Testnet LINK is available from https://faucets.chain.link/chapel\n\n| Item                  | Value                                                                                                                                                                                                                  |\n| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"97_0x84b9b910527ad5c03a9ca831909e21e236ea7b06\" href=\"https://testnet.bscscan.com/address/0x84b9b910527ad5c03a9ca831909e21e236ea7b06\">`0x84b9b910527ad5c03a9ca831909e21e236ea7b06`</a> |\n| VRF Coordinator       | [`0x6A2AAd07396B36Fe02a22b33cf443582f682c82f`](https://testnet.bscscan.com/address/0x6A2AAd07396B36Fe02a22b33cf443582f682c82f)                                                                                         |\n| 50 gwei Key Hash      | `0xd4bb89654db74673a187bd804519e65e3f71a52bc55f11da7601a13dcf505314`                                                                                                                                                   |\n| Premium               | 0.005 LINK                                                                                                                                                                                                             |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                              |\n| Minimum Confirmations | 3                                                                                                                                                                                                                      |\n| Maximum Confirmations | 200                                                                                                                                                                                                                    |\n| Maximum Random Values | 500                                                                                                                                                                                                                    |\n\n### Polygon (Matic) mainnet\n\n> 📘 Important\n>\n> The LINK provided by the [Polygon (Matic) Bridge](https://wallet.polygon.technology/bridge) is not ERC-677 compatible, so cannot be used with Chainlink oracles. However, it can be [**converted to the official LINK token on Polygon (Matic) using Chainlink's PegSwap service**](https://pegswap.chain.link/)\n\n| Item                  | Value                                                                                                                                                                                                               |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"137_0xb0897686c545045afc77cf20ec7a532e3120e0f1\" href=\"https://polygonscan.com/address/0xb0897686c545045afc77cf20ec7a532e3120e0f1\">`0xb0897686c545045afc77cf20ec7a532e3120e0f1`</a> |\n| VRF Coordinator       | [`0xAE975071Be8F8eE67addBC1A82488F1C24858067`](https://polygonscan.com/address/0xAE975071Be8F8eE67addBC1A82488F1C24858067)                                                                                          |\n| 200 gwei Key Hash     | `0x6e099d640cde6de9d40ac749b4b594126b0169747122711109c9985d47751f93`                                                                                                                                                |\n| 500 gwei Key Hash     | `0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd`                                                                                                                                                |\n| 1000 gwei Key Hash    | `0xd729dc84e21ae57ffb6be0053bf2b0668aa2aaf300a2a7b2ddf7dc0bb6e875a8`                                                                                                                                                |\n| Premium               | 0.0005 LINK                                                                                                                                                                                                         |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                           |\n| Minimum Confirmations | 3                                                                                                                                                                                                                   |\n| Maximum Confirmations | 200                                                                                                                                                                                                                 |\n| Maximum Random Values | 500                                                                                                                                                                                                                 |\n\n### Polygon (Matic) Mumbai testnet\n\n> 🚰 Mumbai Faucet\n>\n> Testnet LINK and MATIC are available from the [Polygon faucet](https://faucet.polygon.technology/) and https://faucets.chain.link/mumbai.\n\n| Item                  | Value                                                                                                                                                                                                                         |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"80001_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://mumbai.polygonscan.com/address/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB `</a> |\n| VRF Coordinator       | [`0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed`](https://mumbai.polygonscan.com/address/0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed)                                                                                             |\n| 500 gwei Key Hash     | `0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f`                                                                                                                                                          |\n| Premium               | 0.0005 LINK                                                                                                                                                                                                                   |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                                     |\n| Minimum Confirmations | 3                                                                                                                                                                                                                             |\n| Maximum Confirmations | 200                                                                                                                                                                                                                           |\n| Maximum Random Values | 500                                                                                                                                                                                                                           |\n\n### Avalanche mainnet\n\n| Item                  | Value                                                                                                                                                                                                              |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token            | <a class=\"erc-token-address\" id=\"43114_0x5947BB275c521040051D82396192181b413227A3\" href=\"https://snowtrace.io/address/0x5947BB275c521040051D82396192181b413227A3\">`0x5947BB275c521040051D82396192181b413227A3`</a> |\n| VRF Coordinator       | [`0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634`](https://snowtrace.io/address/0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634)                                                                                            |\n| 200 gwei Key Hash     | `0x83250c5584ffa93feb6ee082981c5ebe484c865196750b39835ad4f13780435d`                                                                                                                                               |\n| 500 gwei Key Hash     | `0x89630569c9567e43c4fe7b1633258df9f2531b62f2352fa721cf3162ee4ecb46`                                                                                                                                               |\n| 1000 gwei Key Hash    | `0x06eb0e2ea7cca202fc7c8258397a36f33d88568d2522b37aaa3b14ff6ee1b696`                                                                                                                                               |\n| Premium               | 0.005 LINK                                                                                                                                                                                                         |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                          |\n| Minimum Confirmations | 1                                                                                                                                                                                                                  |\n| Maximum Confirmations | 200                                                                                                                                                                                                                |\n| Maximum Random Values | 500                                                                                                                                                                                                                |\n\n### Avalanche Fuji testnet\n\n> 🚰 Avax Fuji Faucet\n>\n> Testnet LINK is available from https://faucets.chain.link/fuji\n\n| Item                  | Value                                                                                                                                                                                                                      |\n| --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"43113_0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\" href=\"https://testnet.snowtrace.io/address/0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\">`0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846`</a> |\n| VRF Coordinator       | [`0x2eD832Ba664535e5886b75D64C46EB9a228C2610`](https://testnet.snowtrace.io/address/0x2eD832Ba664535e5886b75D64C46EB9a228C2610)                                                                                            |\n| 300 gwei Key Hash     | `0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61`                                                                                                                                                       |\n| Premium               | 0.005 LINK                                                                                                                                                                                                                 |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                                  |\n| Minimum Confirmations | 1                                                                                                                                                                                                                          |\n| Maximum Confirmations | 200                                                                                                                                                                                                                        |\n| Maximum Random Values | 500                                                                                                                                                                                                                        |\n\n### Fantom mainnet\n\n> 🚧 ERC-677 LINK on Fantom\n>\n> You must use ERC-677 LINK on Fantom. ERC-20 LINK will not work with Chainlink services.\n> Use [bridge.multichain.org](https://bridge.multichain.org/#/router) to send LINK to the Fantom network and be sure to select LINK-ERC677 as the token you will receive on the Fantom mainnet.\n\n| Item                  | Value                                                                                                                                                                                                         |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"250_0x6f43ff82cca38001b6699a8ac47a2d0e66939407\" href=\"https://ftmscan.com/token/0x6f43ff82cca38001b6699a8ac47a2d0e66939407\">`0x6f43ff82cca38001b6699a8ac47a2d0e66939407`</a> |\n| VRF Coordinator       | [`0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634`](https://ftmscan.com/address/0xd5d517abe5cf79b7e95ec98db0f0277788aff634)                                                                                        |\n| 4000 gwei Key Hash    | `0xb4797e686f9a1548b9a2e8c68988d74788e0c4af5899020fb0c47784af76ddfa`                                                                                                                                          |\n| 10000 gwei Key Hash   | `0x5881eea62f9876043df723cf89f0c2bb6f950da25e9dfe66995c24f919c8f8ab`                                                                                                                                          |\n| 20000 gwei Key Hash   | `0x64ae04e5dba58bc08ba2d53eb33fe95bf71f5002789692fe78fb3778f16121c9`                                                                                                                                          |\n| Premium               | 0.0005 LINK                                                                                                                                                                                                   |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                     |\n| Minimum Confirmations | 1                                                                                                                                                                                                             |\n| Maximum Confirmations | 200                                                                                                                                                                                                           |\n| Maximum Random Values | 500                                                                                                                                                                                                           |\n\n### Fantom testnet\n\n> 🚰 Fantom Testnet Faucet\n>\n> Testnet LINK is available from https://faucets.chain.link/fantom-testnet\n\n| Item                  | Value                                                                                                                                                                                                                    |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token            | <a class=\"erc-token-address\" id=\"4002_0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\" href=\"https://testnet.ftmscan.com/address/0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\">`0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F`</a> |\n| VRF Coordinator       | [`0xbd13f08b8352A3635218ab9418E340c60d6Eb418`](https://testnet.ftmscan.com/address/0xbd13f08b8352a3635218ab9418e340c60d6eb418)                                                                                           |\n| 3000 gwei Key Hash    | `0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4`                                                                                                                                                     |\n| Premium               | 0.0005 LINK                                                                                                                                                                                                              |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                                |\n| Minimum Confirmations | 1                                                                                                                                                                                                                        |\n| Maximum Confirmations | 200                                                                                                                                                                                                                      |\n| Maximum Random Values | 500                                                                                                                                                                                                                      |\n\n### Klaytn Baobab testnet\n\n> 🚰 Klaytn Testnet Faucet\n>\n> Testnet LINK is available from [facuets.chain.link](https://faucets.chain.link/klaytn-testnet). Use the [KLAY Faucet](https://baobab.wallet.klaytn.foundation/faucet) to obtain testnet KLAY.\n\n| Item                  | Value                                                                                                                                                                                                                      |\n| --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"1001_0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18\" href=\"https://baobab.scope.klaytn.com/token/0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18\">`0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18`</a> |\n| VRF Coordinator       | [`0x771143FcB645128b07E41D79D82BE707ad8bDa1C`](https://baobab.scope.klaytn.com/address/0x771143FcB645128b07E41D79D82BE707ad8bDa1C)                                                                                         |\n| 750 gwei Key Hash     | `0x9be50e2346ee6abe000e6d3a34245e1d232c669703efc44660a413854427027c`                                                                                                                                                       |\n| Premium               | 0.005 LINK                                                                                                                                                                                                                 |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                                  |\n| Minimum Confirmations | 1                                                                                                                                                                                                                          |\n| Maximum Confirmations | 200                                                                                                                                                                                                                        |\n| Maximum Random Values | 500                                                                                                                                                                                                                        |\n"
    },
    {
      "title": "DNS Ownership Oracle",
      "headings": [
        {
          "depth": 2,
          "slug": "requirements",
          "text": "Requirements"
        },
        {
          "depth": 2,
          "slug": "dns-ownership-contract",
          "text": "DNS Ownership Contract"
        },
        {
          "depth": 2,
          "slug": "network-details",
          "text": "Network Details"
        },
        {
          "depth": 4,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 4,
          "slug": "ethereum-kovan-testnet",
          "text": "Ethereum Kovan Testnet"
        },
        {
          "depth": 4,
          "slug": "bnb-chain-mainnet",
          "text": "BNB Chain Mainnet"
        },
        {
          "depth": 4,
          "slug": "polygon-matic-mainnet",
          "text": "Polygon (Matic) Mainnet"
        },
        {
          "depth": 2,
          "slug": "job",
          "text": "Job"
        }
      ],
      "url": "/any-api/data-providers/dns-ownership",
      "section": "ethereum",
      "content": "---\r\nlayout: ../../../layouts/MainLayout.astro\r\nsection: ethereum\r\ndate: Last Modified\r\ntitle: \"DNS Ownership Oracle\"\r\npermalink: \"docs/any-api/data-providers/dns-ownership/\"\r\n---\r\n\r\nimport { variables } from \"@variables\"\r\nimport CodeSample from \"@components/CodeSample/CodeSample.astro\"\r\n\r\nThis oracle checks Google’s DNS service to determine if a given domain is owned by a given blockchain address. Each address is stored in a _TXT record_.\r\nThis guide explains how to call the _DNS ownership oracle_ and verify that a given address owns a specific domain. For instance, we will confirm that the address _0xf75519f611776c22275474151a04183665b7feDe_ owns _www5.infernos.io_. **Note** that the source of data is [google dns](https://dns.google/resolve?name=www5.infernos.io&type=TXT).\r\n\r\n## Requirements\r\n\r\nThis guide assumes that you know how to create and deploy smart contracts on the Kovan Testnet using the following tools:\r\n\r\n- [The Remix IDE](https://remix.ethereum.org/)\r\n- [MetaMask](https://metamask.io/)\r\n- [Kovan Link tokens](/docs/link-token-contracts/#kovan-testnet-deprecated)\r\n\r\nYou should be familiar with the [Chainlink Basic Request Model](/docs/architecture-request-model/). If you are new to developing smart contracts on Ethereum, see the [Getting Started](/docs/conceptual-overview/) guide to learn the basics.\r\n\r\n## DNS Ownership Contract\r\n\r\nThis example operates using the following steps:\r\n\r\n1. When you deploy the contract, the `constructor()` initializes the address of `oracle`, the `jobId`, and the fees `oraclePayment`. The code example is configured for the _Kovan testnet_. Check the [Network Details section](#network-details) for other networks.\r\n1. Fund the contract with LINK tokens. Each request requires 0.1 LINK.\r\n1. Run the `requestProof()` function to check that an address owns a domain name. For this example, you can use `www5.infernos.io` for the `_name` and `0xf75519f611776c22275474151a04183665b7feDe` for the `_record`. Notice how these parameters are used to build the Chainlink request. The selector of the `fulfill()` function is also passed so that the oracle knows which function to call back with the `proof`.\r\n1. After few seconds, check the value of `proof`. It should return `true`.\r\n\r\n<CodeSample src=\"samples/DataProviders/DnsOwnership.sol\" />\r\n\r\n## Network Details\r\n\r\nThe [DNS Ownership Contract example](#dns-ownership-contract) works on the _Kovan Testnet_. Below are the configuration for other chains.\r\n\r\n#### Ethereum Mainnet\r\n\r\n- Payment Amount: 2 LINK\r\n- LINK Token Address: <code>{variables.MAINNET_LINK_TOKEN}</code>\r\n- Oracle Address: `0x240BaE5A27233Fd3aC5440B5a598467725F7D1cd`\r\n- JobID: `6ca2e68622bd421d98c648f056ee7c76`\r\n\r\n#### Ethereum Kovan Testnet\r\n\r\n- Payment Amount: 0.1 LINK\r\n- LINK Token Address: <code>{variables.KOVAN_LINK_TOKEN}</code>\r\n- Oracle Address: `0xff07c97631ff3bab5e5e5660cdf47aded8d4d4fd`\r\n- JobID: `791bd73c8a1349859f09b1cb87304f71`\r\n\r\n#### BNB Chain Mainnet\r\n\r\n- Payment Amount: 0.1 LINK\r\n- LINK Token address: <code>{variables.BINANCE_MAINNET_LINK_TOKEN}</code>\r\n- Oracle Address: `0x63B72AF260E8b40A7b89E238FeB53448A97b03D2`\r\n- JobID: `fb06afd5a9df4e6cb156f6b797b63a24`\r\n\r\n#### Polygon (Matic) Mainnet\r\n\r\n- Payment Amount: 0.1 LINK\r\n- LINK Token Address: <code>{variables.MATIC_MAINNET_LINK_TOKEN}</code>\r\n- Oracle Address: `0x63B72AF260E8b40A7b89E238FeB53448A97b03D2`\r\n- JobID: `f3daed2990114e98906aaf21c4172da3`\r\n\r\n## Job\r\n\r\nThe _DNS Ownership_ node uses a [Chainlink v2 direct-request job](/docs/jobs/types/direct-request/). It is composed by the following taks:\r\n\r\n- [ETH ABI Decode Log](/docs/jobs/task-types/eth-abi-decode-log/)\r\n- [CBOR Parse](/docs/jobs/task-types/cborparse/)\r\n- [DNS Proof external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/dns-query#dns-proof-endpoint)\r\n- [JSON Parse](/docs/jobs/task-types/jsonparse/)\r\n- [ETH ABI Encode](/docs/jobs/task-types/eth-abi-encode/)\r\n- [EthTx](/docs/jobs/task-types/eth-tx/)\r\n\r\n```jpv2\r\ntype = \"directrequest\"\r\nschemaVersion = 1\r\ncontractAddress = \"0x0000000000000000000000000000000000000000\"\r\nmaxTaskDuration = \"0s\"\r\nobservationSource = \"\"\"\r\n    decode_log          [type=ethabidecodelog\r\n                         abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\r\n                         data=\"$(jobRun.logData)\"\r\n                         topics=\"$(jobRun.logTopics)\"]\r\n\r\n    decode_cbor         [type=cborparse data=\"$(decode_log.data)\"]\r\n\r\n    dnsproof            [type=bridge\r\n                         name=\"dnsproof\"\r\n                         requestData=\"{\\\\\"data\\\\\": {\\\\\"endpoint\\\\\": \\\\\"dnsProof\\\\\", \\\\\"name\\\\\": $(decode_cbor.name), \\\\\"record\\\\\": $(decode_cbor.record)}}\"]\r\n\r\n\r\n    result_parse        [type=jsonparse data=\"$(dnsproof)\" path=\"result\"]\r\n\r\n    encode_data         [type=ethabiencode\r\n                         abi=\"(bool _result)\"\r\n                         data=\"{\\\\\"_requestId\\\\\": $(decode_log.requestId),\\\\\"_result\\\\\": $(result_parse)}\"]\r\n\r\n    encode_tx           [type=ethabiencode\r\n                         abi=\"fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)\"\r\n                         data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId),\\\\\"payment\\\\\": $(decode_log.payment),\\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr),\\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId),\\\\\"expiration\\\\\": $(decode_log.cancelExpiration),\\\\\"data\\\\\": $(encode_data)}\"]\r\n\r\n    submit_tx           [type=ethtx to=\"0x0000000000000000000000000000000000000000\" data=\"$(encode_tx)\" minConfirmations=\"2\"]\r\n\r\n    decode_log -> decode_cbor -> dnsproof -> result_parse -> encode_data -> encode_tx -> submit_tx\r\n\"\"\"\r\n```\r\n"
    },
    {
      "title": "Finage Global Market Data Oracle",
      "headings": [
        {
          "depth": 2,
          "slug": "steps-for-using-this-oracle",
          "text": "Steps For Using This Oracle"
        },
        {
          "depth": 2,
          "slug": "network-details",
          "text": "Network Details"
        },
        {
          "depth": 4,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 4,
          "slug": "ethereum-kovan-testnet",
          "text": "Ethereum Kovan Testnet"
        },
        {
          "depth": 4,
          "slug": "bnb-chain-mainnet",
          "text": "BNB Chain Mainnet"
        },
        {
          "depth": 2,
          "slug": "create-your-contract",
          "text": "Create Your Contract"
        },
        {
          "depth": 1,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 1,
          "slug": "request-parameters",
          "text": "Request Parameters"
        },
        {
          "depth": 3,
          "slug": "symbol",
          "text": "symbol"
        },
        {
          "depth": 4,
          "slug": "solidity-example",
          "text": "Solidity Example"
        },
        {
          "depth": 1,
          "slug": "chainlink-examples",
          "text": "Chainlink Examples"
        },
        {
          "depth": 3,
          "slug": "requestdata-function",
          "text": "requestData function"
        },
        {
          "depth": 3,
          "slug": "fulfill-function",
          "text": "fulfill function"
        },
        {
          "depth": 2,
          "slug": "documentation-and-support",
          "text": "Documentation and Support"
        }
      ],
      "url": "/any-api/data-providers/finage-global-market-data",
      "section": "ethereum",
      "content": "---\r\nlayout: ../../../layouts/MainLayout.astro\r\nsection: ethereum\r\ndate: Last Modified\r\ntitle: \"Finage Global Market Data Oracle\"\r\npermalink: \"docs/any-api/data-providers/finage-global-market-data/\"\r\n---\r\n\r\nimport { variables } from \"@variables\"\r\n\r\nFinage is a leading real-time stock, forex, and cryptocurrency data provider. They offer market data for 60,000+ securities, and a broad selection of data such as financial statements, Ownership, News Sentiments, Earning Call Transcripts and Mergers and Acquisitions. This oracle will initially provide a given stock’s performance relative to its sector’s performance.\r\n\r\n## Steps For Using This Oracle\r\n\r\n- Write and deploy your contract using the network details below\r\n- Fund it with [LINK](/docs/link-token-contracts/)\r\n- Call your [request method](./#chainlink-examples)\r\n\r\n## Network Details\r\n\r\n#### Ethereum Mainnet\r\n\r\nPayment Amount: 1 LINK  \r\nLINK Token Address: <code>{variables.MAINNET_LINK_TOKEN}</code>\r\nOracle Address: `0xE98dFc0C36408b54326Fa11235D573574B1e8eC3`  \r\nJobID: `3e478404a3ca4cf5abd2820efe7c1913`\r\n\r\n#### Ethereum Kovan Testnet\r\n\r\nPayment Amount: 0.1 LINK\r\nLINK Token Address: <code>{variables.KOVAN_LINK_TOKEN}</code>\r\nOracle Address: `0x56dd6586DB0D08c6Ce7B2f2805af28616E082455`\r\nJobID: `955810d193e144abb85ae2edea65344d`\r\n\r\n#### BNB Chain Mainnet\r\n\r\nPayment Amount: 0.1 LINK\r\nLINK Token address: <code>{variables.BINANCE_MAINNET_LINK_TOKEN}</code>\r\nOracle Address: `0xa80bEAEBf1955D8AA9B5f741388e5A43Ba309935`\r\nJobID: `55d23024c541439ca28b456044d01304`\r\n\r\n## Create Your Contract\r\n\r\nImport `ChainlinkClient.sol` into your contract so you can inherit the Chainlink behavior.\r\n\r\n```solidity Solidity 4\r\npragma solidity ^0.4.24;\r\n\r\nimport \"@chainlink/contracts/v0.4/ChainlinkClient.sol\";\r\n\r\ncontract FinageChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    setChainlinkToken(0xa36085F69e2889c224210F603D836748e7dC0088);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n```solidity Solidity 5\r\npragma solidity ^0.5.0;\r\n\r\nimport \"@chainlink/contracts/v0.5/ChainlinkClient.sol\";\r\n\r\ncontract FinageChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    setChainlinkToken(0xa36085F69e2889c224210F603D836748e7dC0088);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n```solidity Solidity 6\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@chainlink/contracts/v0.6/ChainlinkClient.sol\";\r\n\r\ncontract FinageChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    setChainlinkToken(0xa36085F69e2889c224210F603D836748e7dC0088);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n<div class=\"remix-callout\">\r\n  <a\r\n    href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/DataProviders/Finage.sol\"\r\n    target=\"_blank\"\r\n  >\r\n    Open in Remix\r\n  </a>\r\n  <a href=\"/docs/conceptual-overview/#what-is-remix\">What is Remix?</a>\r\n</div>\r\n\r\n# Tasks\r\n\r\n- [Finage external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/finage)\r\n- [Copy](/docs/core-adapters/#copy)\r\n- [Multiply](/docs/core-adapters/#multiply)\r\n- [EthInt256](/docs/core-adapters/#ethint256)\r\n- [EthTx](/docs/core-adapters/#ethtx)\r\n\r\n# Request Parameters\r\n\r\n### `symbol`\r\n\r\n- The symbol of the stock to query\r\n\r\n#### Solidity Example\r\n\r\n`req.add(\"symbol\", \"AAPL\");`\r\n\r\n# Chainlink Examples\r\n\r\nThe examples below show how to create a request for the Chainlink node.\r\n\r\n### `requestData` function\r\n\r\n```solidity\r\nfunction requestData\r\n(\r\n  address _oracle,\r\n  bytes32 _jobId,\r\n  string memory _symbol\r\n)\r\n  public\r\n  onlyOwner\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(_jobId, this, this.fulfill.selector);\r\n  req.add(\"symbol\", _symbol);\r\n  sendChainlinkRequestTo(_oracle, req, oraclePayment);\r\n}\r\n```\r\n\r\n### `fulfill` function\r\n\r\n```solidity\r\nint256 public data;\r\n\r\nfunction fulfill(bytes32 _requestId, int256 _data)\r\n  public\r\n  recordChainlinkFulfillment(_requestId)\r\n{\r\n  data = _data;\r\n}\r\n```\r\n\r\n## Documentation and Support\r\n\r\n- The `Finage Relative Stock Performance` job depends on calls to the Finage <a href=\"https://finage.co.uk/docs/api/stock-market-aggregates-api\" target=\"_blank\">Stock Market Aggregates API</a> and the <a href=\"https://finage.co.uk/docs/api/stock-market-details-api\" target=\"_blank\">Stock Market Details API</a>\r\n- For assistance, reach out to Finage using <a href=\"https://finage.co.uk/consultation\" target=\"_blank\">this form</a>\r\n"
    },
    {
      "title": "Kraken Rates Oracle Node",
      "headings": [
        {
          "depth": 1,
          "slug": "steps-for-using-this-oracle",
          "text": "Steps for using this oracle"
        },
        {
          "depth": 1,
          "slug": "network-details",
          "text": "Network Details"
        },
        {
          "depth": 4,
          "slug": "rinkeby",
          "text": "Rinkeby"
        },
        {
          "depth": 4,
          "slug": "kovan",
          "text": "Kovan"
        },
        {
          "depth": 4,
          "slug": "mainnet",
          "text": "Mainnet"
        },
        {
          "depth": 2,
          "slug": "create-your-contract",
          "text": "Create your contract"
        },
        {
          "depth": 1,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "request-parameters",
          "text": "Request Parameters"
        },
        {
          "depth": 3,
          "slug": "arguments",
          "text": "Arguments"
        },
        {
          "depth": 4,
          "slug": "solidity-example",
          "text": "Solidity example"
        },
        {
          "depth": 3,
          "slug": "times",
          "text": "times"
        },
        {
          "depth": 4,
          "slug": "solidity-example-1",
          "text": "Solidity example"
        },
        {
          "depth": 1,
          "slug": "chainlink-examples",
          "text": "Chainlink Examples"
        }
      ],
      "url": "/any-api/data-providers/kraken-rates",
      "section": "ethereum",
      "content": "---\r\nlayout: ../../../layouts/MainLayout.astro\r\nsection: ethereum\r\ndate: Last Modified\r\ntitle: \"Kraken Rates Oracle Node\"\r\npermalink: \"docs/any-api/data-providers/kraken-rates/\"\r\nmetadata:\r\n  image:\r\n    0: \"/files/2713d5c-cl.png\"\r\n---\r\n\r\nimport { variables } from \"@variables\"\r\n\r\nThis Chainlink has a dedicated connection to <a href=\"https://blog.cfbenchmarks.com/rest-api/\" target=\"_blank\">Kraken's Prices</a> API.\r\n\r\n# Steps for using this oracle\r\n\r\n- Write and deploy your contract using the network details below\r\n- Fund it with [LINK](/docs/link-token-contracts/)\r\n- Call your [request method](./#chainlink-examples)\r\n\r\n# Network Details\r\n\r\nYou will need to use the following LINK token address, oracle address, and Job ID in order to create the Chainlink request.\r\n\r\n#### Rinkeby\r\n\r\n- Payment amount: 1 LINK\r\n- LINK Token address: <code>{variables.RINKEBY_LINK_TOKEN}</code>\r\n- Oracle address: <code>{variables.RINKEBY_CHAINLINK_ORACLE}</code>\r\n- JobID: `49ea116156cd44be997e7670a5dde80d`\r\n\r\n#### Kovan\r\n\r\n- Payment amount: 1 LINK\r\n- LINK Token address: <code>{variables.KOVAN_LINK_TOKEN}</code>\r\n- Oracle address: <code>{variables.KOVAN_CHAINLINK_ORACLE}</code>\r\n- JobID: `8f4eeda1a8724077a0560ee84eb006b4`\r\n\r\n#### Mainnet\r\n\r\n- Payment amount: 0.5 LINK\r\n- LINK Token address: <code>{variables.MAINNET_LINK_TOKEN}</code>\r\n- Oracle address: <code>{variables.MAINNET_CHAINLINK_ORACLE}</code>\r\n- JobID: `contact dataproviders@chain.link for details`\r\n\r\n## Create your contract\r\n\r\nImport `ChainlinkClient.sol` into your contract so you can inherit the Chainlink behavior.\r\n\r\n```solidity Solidity 4\r\npragma solidity ^0.4.24;\r\n\r\nimport \"@chainlink/contracts/v0.4/ChainlinkClient.sol\";\r\n\r\ncontract KrakenChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    // Rinkeby LINK Token Contract\r\n    setChainlinkToken(0x01BE23585060835E02B77ef475b0Cc51aA1e0709);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n```solidity Solidity 5\r\npragma solidity ^0.5.0;\r\n\r\nimport \"@chainlink/contracts/v0.5/ChainlinkClient.sol\";\r\n\r\ncontract KrakenChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    // Rinkeby LINK Token Contract\r\n    setChainlinkToken(0x01BE23585060835E02B77ef475b0Cc51aA1e0709);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n```solidity Solidity 6\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@chainlink/contracts/v0.6/ChainlinkClient.sol\";\r\n\r\ncontract KrakenChainlink is ChainlinkClient {\r\n\r\n  uint256 oraclePayment;\r\n\r\n  constructor(uint256 _oraclePayment) public {\r\n    // Rinkeby LINK Token Contract\r\n    setChainlinkToken(0x01BE23585060835E02B77ef475b0Cc51aA1e0709);\r\n    oraclePayment = _oraclePayment;\r\n  }\r\n  // Additional functions here:\r\n\r\n}\r\n```\r\n\r\n<div class=\"remix-callout\">\r\n  <a\r\n    href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/DataProviders/Kraken.sol\"\r\n    target=\"_blank\"\r\n  >\r\n    Open in Remix\r\n  </a>\r\n  <a href=\"/docs/conceptual-overview/#what-is-remix\">What is Remix?</a>\r\n</div>\r\n\r\n# Tasks\r\n\r\n- [Kraken](/docs/external-adapters/)\r\n- [Multiply](/docs/core-adapters/#multiply)\r\n- [EthUint256](/docs/core-adapters/#ethuint256)\r\n- [EthTx](/docs/core-adapters/#ethtx)\r\n\r\n## Request Parameters\r\n\r\n### Arguments\r\n\r\nUse the `index` parameter to request the desired index from Kraken.\r\n\r\n#### Solidity example\r\n\r\nTo obtain KXBTUSD index, use the `DEFI_KXBTUSD` identifier.\r\n\r\n```solidity\r\nreq.add(\"index\", \"DEFI_KXBTUSD\");\r\n```\r\n\r\nIndex identifiers include:\r\n\r\n- DEFI_KXBTUSD\r\n- DEFI_KETHUSD\r\n- DEFI_KBCHUSD\r\n- DEFI_KXRPUSD\r\n- DEFI_KLTCUSD\r\n- DEFI_KLINKUSD\r\n- DEFI_KEOSUSD\r\n- DEFI_KXTZUSD\r\n- DEFI_KXLMUSD\r\n- DEFI_KPAXGUSD\r\n- DEFI_KALGOUSD\r\n- DEFI_KATOMUSD\r\n- DEFI_KOMGUSD\r\n- DEFI_KOXTUSD\r\n- DEFI_KXBTEUR\r\n- DEFI_KETHEUR\r\n\r\n### times\r\n\r\nThe amount to multiply the result by (since Solidity does not handle decimals).\r\n\r\n#### Solidity example\r\n\r\n```solidity\r\nreq.addInt(\"times\", 100);\r\n```\r\n\r\n# Chainlink Examples\r\n\r\nThe examples below show how to create a request for the Chainlink node.\r\n\r\n```solidity\r\nfunction requestPrice\r\n(\r\n  address _oracle,\r\n  bytes32 _jobId,\r\n  string _index\r\n)\r\n  public\r\n  onlyOwner\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(_jobId, address(this), this.fulfill.selector);\r\n  req.add(\"index\", _index);\r\n  req.addInt(\"times\", 100);\r\n  sendChainlinkRequestTo(_oracle, req, oraclePayment);\r\n}\r\n```\r\n\r\nHere is an example of the fulfill method:\r\n\r\n```solidity\r\nuint256 public currentPrice;\r\n\r\nfunction fulfill(bytes32 _requestId, uint256 _price)\r\n  public\r\n  recordChainlinkFulfillment(_requestId)\r\n{\r\n  currentPrice = _price;\r\n}\r\n```\r\n"
    },
    {
      "title": "Chainlink Overview",
      "headings": [
        {
          "depth": 1,
          "slug": "lookup",
          "text": "Lookup"
        },
        {
          "depth": 1,
          "slug": "manual-lookup",
          "text": "Manual Lookup"
        },
        {
          "depth": 1,
          "slug": "naming-structure",
          "text": "Naming Structure"
        },
        {
          "depth": 2,
          "slug": "subdomains",
          "text": "Subdomains"
        },
        {
          "depth": 1,
          "slug": "architecture",
          "text": "Architecture"
        },
        {
          "depth": 2,
          "slug": "resolver",
          "text": "Resolver"
        },
        {
          "depth": 2,
          "slug": "listening-for-address-changes",
          "text": "Listening for Address Changes"
        },
        {
          "depth": 1,
          "slug": "obtaining-addresses",
          "text": "Obtaining Addresses"
        },
        {
          "depth": 2,
          "slug": "javascript",
          "text": "Javascript"
        },
        {
          "depth": 2,
          "slug": "solidity",
          "text": "Solidity"
        }
      ],
      "url": "/ens",
      "section": "gettingStarted",
      "description": "Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.",
      "content": "---\nlayout: ../layouts/MainLayout.astro\nsection: gettingStarted\ndate: Last Modified\ntitle: \"Chainlink Overview\"\nexcerpt: \"Smart Contracts and Chainlink\"\nwhatsnext:\n  {\n    \"Deploy Your First Smart Contract\": \"/docs/deploy-your-first-contract/\",\n    \"Consuming Data Feeds\": \"/docs/consuming-data-feeds/\",\n  }\nmetadata:\n  title: \"Conceptual Overview\"\n  description: \"Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.\"\n  image:\n    0: \"/files/1a63254-link.png\"\n---\n\nimport { EnsLookupForm } from \"../features/ens/components/EnsLookupForm.tsx\"\nimport { EnsManualLookupForm } from \"../features/ens/components/EnsManualLookupForm.tsx\"\n\n# Lookup\n\n<EnsLookupForm client:idle />\n\n# Manual Lookup\n\n<EnsManualLookupForm client:idle />\n\n# Naming Structure\n\nChainlink data feeds fall under the `data.eth` naming suffix. To obtain a specific feed address, prefix this with the assets in the feed, separated by a dash (-).\n\n| Pair      | ENS Domain Name    |\n| :-------- | :----------------- |\n| ETH / USD | `eth-usd.data.eth` |\n| BTC / USD | `btc-usd.data.eth` |\n| ...       | `...`              |\n\n## Subdomains\n\nBy default, the base name structure (`eth-usd.data.eth`) returns the proxy address for that feed. However, subdomains enable callers to retrieve other associated contract addresses, as shown in the following table.\n\n| Contract Addresses    | Subdomain Prefix | Example                       |\n| :-------------------- | :--------------- | :---------------------------- |\n| Proxy                 | `proxy`          | `proxy.eth-usd.data.eth`      |\n| Underlying aggregator | `aggregator`     | `aggregator.eth-usd.data.eth` |\n| Proposed aggregator   | `proposed`       | `proposed.eth-usd.data.eth`   |\n\n# Architecture\n\n## Resolver\n\nFor each network, there is a single Chainlink resolver, which does not change. Its address can be obtained using the `data.eth` domain. This resolver manages the subdomains associated with `data.eth`.\n\n| Network          | Resolver Address                                                                                                                                       |\n| :--------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Ethereum Mainnet | <a href=\"https://app.ens.domains/address/0x122eb74f9d0F1a5ed587F43D120C1c2BbDb9360B/\" target=\"_blank\">`0x122eb74f9d0F1a5ed587F43D120C1c2BbDb9360B`</a> |\n\n## Listening for Address Changes\n\nWhen a new aggregator is deployed for a specific feed, it is first proposed, and when accepted becomes the aggregator for that feed. During this process, the `proposed` and `aggregator` subdomains for that feed will change. With each change, the resolver emits an `AddrChanged` event, using the feed subdomain (for example: `eth-usd.data.eth`) as the indexed parameter.\n\n**Example**: If you want to listen for when the aggregator of the ETH / USD feed changes, set up a listener to track the `AddrChanged` event on the resolver, using a filter like this: `ethers.utils.namehash('aggregator.eth-usd.data.eth')`.\n\n# Obtaining Addresses\n\n> 🚧 Reverse Lookup\n>\n> Reverse lookup is not supported.\n\n:::warning[Reverse Lookup]\n\nReverse lookup is not supported.\n\n:::\n\n## Javascript\n\nThe example below uses Javascript Web3 library to interact with ENS. See the <a href=\"https://docs.ens.domains/dapp-developer-guide/resolving-names\" target=\"_blank\">ENS documentation</a> for the full list of languages and libraries libraries that support ENS.\n\nThis example logs the address of the data feed on the Ethereum mainnet for ETH / USD prices.\n\n```javascript\n{% include 'samples/PriceFeeds/ENSConsumer.js' %}\n```\n\n## Solidity\n\nIn Solidity, the address of the ENS registry must be known. According to <a href=\"https://docs.ens.domains/ens-deployments\" target=\"_blank\">ENS documentation</a>, this address is the same across Mainnet, Ropsten, Rinkeby and Goerli networks:\n\nENS registry address: <a href=\"https://etherscan.io/address/0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\" target=\"_blank\">`0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e`</a>.\n\nAlso, instead of using readable string names like `eth-usd.data.eth`, resolvers accept bytes32 hash IDs for names. Hash IDs can be retrieved from <a href=\"https://thegraph.com/explorer/subgraph/ensdomains/ens\" target=\"_blank\">this subgraph</a> or via this npm package <a href=\"https://www.npmjs.com/package/@ensdomains/eth-ens-namehash\" target=\"_blank\">eth-ens-namehash</a>.\n\n\"ETH / USD\" hash: `0xf599f4cd075a34b92169cf57271da65a7a936c35e3f31e854447fbb3e7eb736d`\n\n::solidity-remix[/samples/PriceFeeds/ENSConsumer.sol]\n"
    },
    {
      "title": "Overview",
      "headings": [
        {
          "depth": 1,
          "slug": "mdx",
          "text": "MDX"
        },
        {
          "depth": 2,
          "slug": "features",
          "text": "Features"
        },
        {
          "depth": 2,
          "slug": "commands-cheatsheet",
          "text": "Commands Cheatsheet"
        },
        {
          "depth": 2,
          "slug": "new-to-astro",
          "text": "New to Astro?"
        },
        {
          "depth": 2,
          "slug": "customize-this-theme",
          "text": "Customize This Theme"
        },
        {
          "depth": 3,
          "slug": "site-metadata",
          "text": "Site metadata"
        },
        {
          "depth": 3,
          "slug": "css-styling",
          "text": "CSS styling"
        },
        {
          "depth": 2,
          "slug": "page-metadata",
          "text": "Page metadata"
        },
        {
          "depth": 3,
          "slug": "sidebar-navigation",
          "text": "Sidebar navigation"
        },
        {
          "depth": 3,
          "slug": "multiple-languages-support",
          "text": "Multiple Languages support"
        },
        {
          "depth": 3,
          "slug": "what-if-i-dont-plan-to-support-multiple-languages",
          "text": "What if I don’t plan to support multiple languages?"
        },
        {
          "depth": 3,
          "slug": "search-powered-by-algolia",
          "text": "Search (Powered by Algolia)"
        }
      ],
      "url": "/rc",
      "section": "gettingStarted",
      "content": "---\nlayout: ../layouts/MainLayout.astro\nsection: gettingStarted\ndate: Last Modified\ntitle: \"Overview\"\nexcerpt: \"Smart Contracts\"\nwhatsnext:\n  {\n    \"Deploy Your First Smart Contract\": \"/docs/deploy-your-first-contract/\",\n    \"Consuming Data Feeds\": \"/docs/consuming-data-feeds/\",\n  }\n---\n\nimport { Aside } from \"@components\"\n\n# MDX\n\n```bash\nnpm init astro -- --template docs\n```\n\n<Aside title=\"note\">this is a note</Aside>\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/docs)\n\n## Features\n\n- ✅ **Full Markdown support**\n- ✅ **Responsive mobile-friendly design**\n- ✅ **Sidebar navigation**\n- ✅ **Search (powered by Algolia)**\n- ✅ **Multi-language i18n**\n- ✅ **Automatic table of contents**\n- ✅ **Automatic list of contributors**\n- ✅ (and, best of all) **dark mode**\n\n## Commands Cheatsheet\n\nAll commands are run from the root of the project, from a terminal:\n\n| Command           | Action                                       |\n| :---------------- | :------------------------------------------- |\n| `npm install`     | Installs dependencies                        |\n| `npm run dev`     | Starts local dev server at `localhost:3000`  |\n| `npm run build`   | Build your production site to `./dist/`      |\n| `npm run preview` | Preview your build locally, before deploying |\n\nTo deploy your site to production, check out our [Deploy an Astro Website](https://docs.astro.build/guides/deploy) guide.\n\n## New to Astro?\n\nWelcome! Check out [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).\n\n## Customize This Theme\n\n### Site metadata\n\n`src/config.ts` contains several data objects that describe metadata about your site like title, description, default language, and Open Graph details. You can customize these to match your project.\n\n### CSS styling\n\nThe theme's look and feel is controlled by a few key variables that you can customize yourself. You'll find them in the `public/theme.css` CSS file.\n\nIf you've never worked with CSS variables before, give [MDN's guide on CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) a quick read.\n\nThis theme uses a \"cool blue\" accent color by default. To customize this for your project, change the `--theme-accent` variable to whatever color you'd like:\n\n```diff\n/* public/theme.css */\n:root {\n  color-scheme: light;\n-  --theme-accent: hsla(var(--color-blue), 1);\n+  --theme-accent: hsla(var(--color-red), 1);   /* or: hsla(#FF0000, 1); */\n```\n\n## Page metadata\n\nAstro uses frontmatter in Markdown pages to choose layouts and pass properties to those layouts. If you are using the default layout, you can customize the page in many different ways to optimize SEO and other things. For example, you can use the `title` and `description` properties to set the document title, meta title, meta description, and Open Graph description.\n\n```markdown\n---\ntitle: Example title\ndescription: Really cool docs example that uses Astro\nlayout: ../../layouts/MainLayout.astro\n---\n\n# Page content...\n```\n\nFor more SEO related properties, look at `src/components/HeadSEO.astro`\n\n### Sidebar navigation\n\nThe sidebar navigation is controlled by the `SIDEBAR` variable in your `src/config.ts` file. You can customize the sidebar by modifying this object. A default, starter navigation has already been created for you.\n\n```ts\nexport const SIDEBAR = {\n  en: [\n    { text: \"Section Header\", header: true },\n    { text: \"Introduction\", link: \"en/introduction\" },\n    { text: \"Page 2\", link: \"en/page-2\" },\n    { text: \"Page 3\", link: \"en/page-3\" },\n\n    { text: \"Another Section\", header: true },\n    { text: \"Page 4\", link: \"en/page-4\" },\n  ],\n}\n```\n\nNote the top-level `en` key: This is needed for multi-language support. You can change it to whatever language you'd like, or add new languages as you go. More details on this below.\n\n### Multiple Languages support\n\nThe Astro docs template supports multiple langauges out of the box. The default theme only shows `en` documentation, but you can enable multi-language support features by adding a second language to your project.\n\nTo add a new language to your project, you'll want to extend the current `src/pages/[lang]/...` layout:\n\n```diff\n 📂 src/pages\n ┣ 📂 en\n ┃ ┣ 📜 page-1.md\n ┃ ┣ 📜 page-2.md\n ┃ ┣ 📜 page-3.astro\n+ ┣ 📂 es\n+ ┃ ┣ 📜 page-1.md\n+ ┃ ┣ 📜 page-2.md\n+ ┃ ┣ 📜 page-3.astro\n```\n\nYou'll also need to add the new language name to the `KNOWN_LANGUAGES` map in your `src/config.ts` file. This will enable your new language switcher in the site header.\n\n```diff\n// src/config.ts\nexport const KNOWN_LANGUAGES = {\n  English: 'en',\n+  Spanish: 'es',\n};\n```\n\nLast step: you'll need to add a new entry to your sidebar, to create the table of contents for that language. While duplicating every page might not sound ideal to everyone, this extra control allows you to create entirely custom content for every language.\n\n> Make sure the sidebar `link` value points to the correct language!\n\n```diff\n// src/config.ts\nexport const SIDEBAR = {\n  en: [\n    { text: 'Section Header', header: true, },\n    { text: 'Introduction', link: 'en/introduction' },\n    // ...\n  ],\n+  es: [\n+    { text: 'Encabezado de sección', header: true, },\n+    { text: 'Introducción', link: 'es/introduction' },\n+    // ...\n+  ],\n};\n\n// ...\n```\n\nIf you plan to use Spanish as the the default language, you just need to modify the redirect path in `src/pages/index.astro`:\n\n```diff\n<script>\n- window.location.pathname = `/en/introduction`;\n+ window.location.pathname = `/es/introduction`;\n</script>\n```\n\nYou can also remove the above script and write a landing page in Spanish instead.\n\n### What if I don't plan to support multiple languages?\n\nThat's totally fine! Not all projects need (or can support) multiple languages. You can continue to use this theme without ever adding a second language.\n\nIf that single language is not English, you can just replace `en` in directory layouts and configurations with the preferred language.\n\n### Search (Powered by Algolia)\n\n[Algolia](https://www.algolia.com/) offers a free service to qualified open source projects called [DocSearch](https://docsearch.algolia.com/). If you are accepted to the DocSearch program, provide your API Key & index name in `src/config.ts` and a search box will automatically appear in your site header.\n\nNote that Aglolia and Astro are not affiliated. We have no say over acceptance to the DocSearch program.\n\nIf you'd prefer to remove Algolia's search and replace it with your own, check out the `src/components/Header.astro` component to see where the component is added.\n"
    }
  ]
}